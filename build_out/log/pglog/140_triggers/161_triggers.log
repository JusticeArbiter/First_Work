LOG:  00000: statement: CREATE OR REPLACE FUNCTION trigger_data() RETURNS trigger  LANGUAGE plpgsql AS $$   declare   argstr text;  relid text;   begin   relid := TG_relid::regclass;   -- plpgsql can't discover its trigger data in a hash like perl and python  -- can, or by a sort of reflection like tcl can,  -- so we have to hard code the names.  raise NOTICE 'TG_NAME: %', TG_name;  raise NOTICE 'TG_WHEN: %', TG_when;  raise NOTICE 'TG_LEVEL: %', TG_level;  raise NOTICE 'TG_OP: %', TG_op;  raise NOTICE 'TG_RELID::regclass: %', relid;  raise NOTICE 'TG_RELNAME: %', TG_relname;  raise NOTICE 'TG_TABLE_NAME: %', TG_table_name;  raise NOTICE 'TG_TABLE_SCHEMA: %', TG_table_schema;  raise NOTICE 'TG_NARGS: %', TG_nargs;   argstr := '[';  for i in 0 .. TG_nargs - 1 loop  if i > 0 then  argstr := argstr || ', ';  end if;  argstr := argstr || TG_argv[i];  end loop;  argstr := argstr || ']';  raise NOTICE 'TG_ARGV: %', argstr;   if TG_OP != 'INSERT' then  raise NOTICE 'OLD: %', OLD;  end if;   if TG_OP != 'DELETE' then  raise NOTICE 'NEW: %', NEW;  end if;   if TG_OP = 'DELETE' then  return OLD;  else  return NEW;  end if;   end;  $$;
LOCATION:  exec_simple_query, postgres.c:938
NOTICE:  00000: test_event_trigger: ddl_command_start CREATE FUNCTION
LOCATION:  exec_stmt_raise, pl_exec.c:3216
STATEMENT:  CREATE OR REPLACE FUNCTION trigger_data() RETURNS trigger  LANGUAGE plpgsql AS $$   declare   argstr text;  relid text;   begin   relid := TG_relid::regclass;   -- plpgsql can't discover its trigger data in a hash like perl and python  -- can, or by a sort of reflection like tcl can,  -- so we have to hard code the names.  raise NOTICE 'TG_NAME: %', TG_name;  raise NOTICE 'TG_WHEN: %', TG_when;  raise NOTICE 'TG_LEVEL: %', TG_level;  raise NOTICE 'TG_OP: %', TG_op;  raise NOTICE 'TG_RELID::regclass: %', relid;  raise NOTICE 'TG_RELNAME: %', TG_relname;  raise NOTICE 'TG_TABLE_NAME: %', TG_table_name;  raise NOTICE 'TG_TABLE_SCHEMA: %', TG_table_schema;  raise NOTICE 'TG_NARGS: %', TG_nargs;   argstr := '[';  for i in 0 .. TG_nargs - 1 loop  if i > 0 then  argstr := argstr || ', ';  end if;  argstr := argstr || TG_argv[i];  end loop;  argstr := argstr || ']';  raise NOTICE 'TG_ARGV: %', argstr;   if TG_OP != 'INSERT' then  raise NOTICE 'OLD: %', OLD;  end if;   if TG_OP != 'DELETE' then  raise NOTICE 'NEW: %', NEW;  end if;   if TG_OP = 'DELETE' then  return OLD;  else  return NEW;  end if;   end;  $$;
ERROR:  42601: syntax error at end of input at character 1116
LOCATION:  plpgsql_yyerror, pl_scanner.c:623
STATEMENT:  CREATE OR REPLACE FUNCTION trigger_data() RETURNS trigger  LANGUAGE plpgsql AS $$   declare   argstr text;  relid text;   begin   relid := TG_relid::regclass;   -- plpgsql can't discover its trigger data in a hash like perl and python  -- can, or by a sort of reflection like tcl can,  -- so we have to hard code the names.  raise NOTICE 'TG_NAME: %', TG_name;  raise NOTICE 'TG_WHEN: %', TG_when;  raise NOTICE 'TG_LEVEL: %', TG_level;  raise NOTICE 'TG_OP: %', TG_op;  raise NOTICE 'TG_RELID::regclass: %', relid;  raise NOTICE 'TG_RELNAME: %', TG_relname;  raise NOTICE 'TG_TABLE_NAME: %', TG_table_name;  raise NOTICE 'TG_TABLE_SCHEMA: %', TG_table_schema;  raise NOTICE 'TG_NARGS: %', TG_nargs;   argstr := '[';  for i in 0 .. TG_nargs - 1 loop  if i > 0 then  argstr := argstr || ', ';  end if;  argstr := argstr || TG_argv[i];  end loop;  argstr := argstr || ']';  raise NOTICE 'TG_ARGV: %', argstr;   if TG_OP != 'INSERT' then  raise NOTICE 'OLD: %', OLD;  end if;   if TG_OP != 'DELETE' then  raise NOTICE 'NEW: %', NEW;  end if;   if TG_OP = 'DELETE' then  return OLD;  else  return NEW;  end if;   end;  $$;
