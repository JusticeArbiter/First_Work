create function binary_coercible(oid, oid) returns bool as $$  SELECT ($1 = $2) OR  EXISTS(select 1 from pg_catalog.pg_cast where  castsource = $1 and casttarget = $2 and  castmethod = 'b' and castcontext = 'i') OR  ($2 = 'pg_catalog.any'::pg_catalog.regtype) OR  ($2 = 'pg_catalog.anyarray'::pg_catalog.regtype AND  EXISTS(select 1 from pg_catalog.pg_type where  oid = $1 and typelem != 0 and typlen = -1)) OR  ($2 = 'pg_catalog.anyrange'::pg_catalog.regtype AND  (select typtype from pg_catalog.pg_type where oid = $1) = 'r')  $$ language sql strict stable;
create function physically_coercible(oid, oid) returns bool as $$  SELECT ($1 = $2) OR  EXISTS(select 1 from pg_catalog.pg_cast where  castsource = $1 and casttarget = $2 and  castmethod = 'b') OR  ($2 = 'pg_catalog.any'::pg_catalog.regtype) OR  ($2 = 'pg_catalog.anyarray'::pg_catalog.regtype AND  EXISTS(select 1 from pg_catalog.pg_type where  oid = $1 and typelem != 0 and typlen = -1)) OR  ($2 = 'pg_catalog.anyrange'::pg_catalog.regtype AND  (select typtype from pg_catalog.pg_type where oid = $1) = 'r')  $$ language sql strict stable;
SELECT p1.oid, p1.proname  FROM pg_proc as p1  WHERE p1.prolang = 0 OR p1.prorettype = 0 OR  p1.pronargs < 0 OR  p1.pronargdefaults < 0 OR  p1.pronargdefaults > p1.pronargs OR  array_lower(p1.proargtypes, 1) != 0 OR  array_upper(p1.proargtypes, 1) != p1.pronargs-1 OR  0::oid = ANY (p1.proargtypes) OR  procost <= 0 OR  CASE WHEN proretset THEN prorows <= 0 ELSE prorows != 0 END;
SELECT p1.oid, p1.proname  FROM pg_proc as p1  WHERE prosrc IS NULL OR prosrc = '' OR prosrc = '-';
SELECT p1.oid, p1.proname  FROM pg_proc AS p1  WHERE proiswindow AND (proisagg OR proretset);
SELECT p1.oid, p1.proname  FROM pg_proc AS p1  WHERE (pronargdefaults <> 0) != (proargdefaults IS NOT NULL);
SELECT p1.oid, p1.proname  FROM pg_proc as p1  WHERE prolang = 13 AND (probin IS NULL OR probin = '' OR probin = '-');
SELECT p1.oid, p1.proname  FROM pg_proc as p1  WHERE prolang != 13 AND probin IS NOT NULL;
SELECT p1.oid, p1.proname, p2.oid, p2.proname  FROM pg_proc AS p1, pg_proc AS p2  WHERE p1.oid != p2.oid AND  p1.proname = p2.proname AND  p1.pronargs = p2.pronargs AND  p1.proargtypes = p2.proargtypes;
SELECT p1.oid, p1.proname, p2.oid, p2.proname  FROM pg_proc AS p1, pg_proc AS p2  WHERE p1.oid < p2.oid AND  p1.prosrc = p2.prosrc AND  p1.prolang = 12 AND p2.prolang = 12 AND  (p1.proisagg = false OR p2.proisagg = false) AND  (p1.prolang != p2.prolang OR  p1.proisagg != p2.proisagg OR  p1.prosecdef != p2.prosecdef OR  p1.proleakproof != p2.proleakproof OR  p1.proisstrict != p2.proisstrict OR  p1.proretset != p2.proretset OR  p1.provolatile != p2.provolatile OR  p1.pronargs != p2.pronargs);
SELECT DISTINCT p1.prorettype, p2.prorettype  FROM pg_proc AS p1, pg_proc AS p2  WHERE p1.oid != p2.oid AND  p1.prosrc = p2.prosrc AND  p1.prolang = 12 AND p2.prolang = 12 AND  NOT p1.proisagg AND NOT p2.proisagg AND  p1.prosrc NOT LIKE E'range\\_constructor_' AND  p2.prosrc NOT LIKE E'range\\_constructor_' AND  (p1.prorettype < p2.prorettype)  ORDER BY 1, 2;
SELECT DISTINCT p1.proargtypes[0], p2.proargtypes[0]  FROM pg_proc AS p1, pg_proc AS p2  WHERE p1.oid != p2.oid AND  p1.prosrc = p2.prosrc AND  p1.prolang = 12 AND p2.prolang = 12 AND  NOT p1.proisagg AND NOT p2.proisagg AND  p1.prosrc NOT LIKE E'range\\_constructor_' AND  p2.prosrc NOT LIKE E'range\\_constructor_' AND  (p1.proargtypes[0] < p2.proargtypes[0])  ORDER BY 1, 2;
SELECT DISTINCT p1.proargtypes[1], p2.proargtypes[1]  FROM pg_proc AS p1, pg_proc AS p2  WHERE p1.oid != p2.oid AND  p1.prosrc = p2.prosrc AND  p1.prolang = 12 AND p2.prolang = 12 AND  NOT p1.proisagg AND NOT p2.proisagg AND  p1.prosrc NOT LIKE E'range\\_constructor_' AND  p2.prosrc NOT LIKE E'range\\_constructor_' AND  (p1.proargtypes[1] < p2.proargtypes[1])  ORDER BY 1, 2;
SELECT DISTINCT p1.proargtypes[2], p2.proargtypes[2]  FROM pg_proc AS p1, pg_proc AS p2  WHERE p1.oid != p2.oid AND  p1.prosrc = p2.prosrc AND  p1.prolang = 12 AND p2.prolang = 12 AND  NOT p1.proisagg AND NOT p2.proisagg AND  (p1.proargtypes[2] < p2.proargtypes[2])  ORDER BY 1, 2;
SELECT DISTINCT p1.proargtypes[3], p2.proargtypes[3]  FROM pg_proc AS p1, pg_proc AS p2  WHERE p1.oid != p2.oid AND  p1.prosrc = p2.prosrc AND  p1.prolang = 12 AND p2.prolang = 12 AND  NOT p1.proisagg AND NOT p2.proisagg AND  (p1.proargtypes[3] < p2.proargtypes[3])  ORDER BY 1, 2;
SELECT DISTINCT p1.proargtypes[4], p2.proargtypes[4]  FROM pg_proc AS p1, pg_proc AS p2  WHERE p1.oid != p2.oid AND  p1.prosrc = p2.prosrc AND  p1.prolang = 12 AND p2.prolang = 12 AND  NOT p1.proisagg AND NOT p2.proisagg AND  (p1.proargtypes[4] < p2.proargtypes[4])  ORDER BY 1, 2;
SELECT DISTINCT p1.proargtypes[5], p2.proargtypes[5]  FROM pg_proc AS p1, pg_proc AS p2  WHERE p1.oid != p2.oid AND  p1.prosrc = p2.prosrc AND  p1.prolang = 12 AND p2.prolang = 12 AND  NOT p1.proisagg AND NOT p2.proisagg AND  (p1.proargtypes[5] < p2.proargtypes[5])  ORDER BY 1, 2;
SELECT DISTINCT p1.proargtypes[6], p2.proargtypes[6]  FROM pg_proc AS p1, pg_proc AS p2  WHERE p1.oid != p2.oid AND  p1.prosrc = p2.prosrc AND  p1.prolang = 12 AND p2.prolang = 12 AND  NOT p1.proisagg AND NOT p2.proisagg AND  (p1.proargtypes[6] < p2.proargtypes[6])  ORDER BY 1, 2;
SELECT DISTINCT p1.proargtypes[7], p2.proargtypes[7]  FROM pg_proc AS p1, pg_proc AS p2  WHERE p1.oid != p2.oid AND  p1.prosrc = p2.prosrc AND  p1.prolang = 12 AND p2.prolang = 12 AND  NOT p1.proisagg AND NOT p2.proisagg AND  (p1.proargtypes[7] < p2.proargtypes[7])  ORDER BY 1, 2;
SELECT p1.oid, p1.proname  FROM pg_proc as p1  WHERE p1.prorettype = 'internal'::regtype AND NOT  'internal'::regtype = ANY (p1.proargtypes);
SELECT p1.oid, p1.proname  FROM pg_proc as p1  WHERE p1.prorettype IN  ('anyelement'::regtype, 'anyarray'::regtype, 'anynonarray'::regtype,  'anyenum'::regtype, 'anyrange'::regtype)  AND NOT  ('anyelement'::regtype = ANY (p1.proargtypes) OR  'anyarray'::regtype = ANY (p1.proargtypes) OR  'anynonarray'::regtype = ANY (p1.proargtypes) OR  'anyenum'::regtype = ANY (p1.proargtypes) OR  'anyrange'::regtype = ANY (p1.proargtypes))  ORDER BY 2;
SELECT p1.oid, p1.proname  FROM pg_proc as p1  WHERE proallargtypes IS NOT NULL AND  array_length(proallargtypes,1) < array_length(proargtypes,1);
SELECT p1.oid, p1.proname  FROM pg_proc as p1  WHERE proargmodes IS NOT NULL AND  array_length(proargmodes,1) < array_length(proargtypes,1);
SELECT p1.oid, p1.proname  FROM pg_proc as p1  WHERE proargnames IS NOT NULL AND  array_length(proargnames,1) < array_length(proargtypes,1);
SELECT p1.oid, p1.proname  FROM pg_proc as p1  WHERE proallargtypes IS NOT NULL AND proargmodes IS NOT NULL AND  array_length(proallargtypes,1) <> array_length(proargmodes,1);
SELECT p1.oid, p1.proname  FROM pg_proc as p1  WHERE proallargtypes IS NOT NULL AND proargnames IS NOT NULL AND  array_length(proallargtypes,1) <> array_length(proargnames,1);
SELECT p1.oid, p1.proname  FROM pg_proc as p1  WHERE proargmodes IS NOT NULL AND proargnames IS NOT NULL AND  array_length(proargmodes,1) <> array_length(proargnames,1);
SELECT p1.oid, p1.proname, p1.proargtypes, p1.proallargtypes, p1.proargmodes  FROM pg_proc as p1  WHERE proallargtypes IS NOT NULL AND  ARRAY(SELECT unnest(proargtypes)) <>  ARRAY(SELECT proallargtypes[i]  FROM generate_series(1, array_length(proallargtypes, 1)) g(i)  WHERE proargmodes IS NULL OR proargmodes[i] IN ('i', 'b', 'v'));
SELECT p1.oid, p1.proname, p2.oid, p2.proname  FROM pg_proc AS p1, pg_proc AS p2  WHERE p2.oid = p1.protransform AND  (p2.prorettype != 'internal'::regtype OR p2.proretset OR p2.pronargs != 1  OR p2.proargtypes[0] != 'internal'::regtype);
SELECT p1.oid, p1.proname  FROM pg_proc as p1 LEFT JOIN pg_description as d  ON p1.tableoid = d.classoid and p1.oid = d.objoid and d.objsubid = 0  WHERE d.classoid IS NULL AND p1.oid <= 9999;
SELECT p1.oid::regprocedure  FROM pg_proc p1 JOIN pg_namespace pn  ON pronamespace = pn.oid  WHERE nspname = 'pg_catalog' AND proleakproof  ORDER BY 1;
select proname, oid from pg_catalog.pg_proc  where proname in (  'lo_open',  'lo_close',  'lo_creat',  'lo_create',  'lo_unlink',  'lo_lseek',  'lo_lseek64',  'lo_tell',  'lo_tell64',  'lo_truncate',  'lo_truncate64',  'loread',  'lowrite')  and pronamespace = (select oid from pg_catalog.pg_namespace  where nspname = 'pg_catalog')  order by 1;
SELECT *  FROM pg_cast c  WHERE castsource = 0 OR casttarget = 0 OR castcontext NOT IN ('e', 'a', 'i')  OR castmethod NOT IN ('f', 'b' ,'i');
SELECT *  FROM pg_cast c  WHERE (castmethod = 'f' AND castfunc = 0)  OR (castmethod IN ('b', 'i') AND castfunc <> 0);
SELECT *  FROM pg_cast c  WHERE castsource = casttarget AND castfunc = 0;
SELECT c.*  FROM pg_cast c, pg_proc p  WHERE c.castfunc = p.oid AND p.pronargs < 2 AND castsource = casttarget;
SELECT c.*  FROM pg_cast c, pg_proc p  WHERE c.castfunc = p.oid AND  (p.pronargs < 1 OR p.pronargs > 3  OR NOT (binary_coercible(c.castsource, p.proargtypes[0])  OR (c.castsource = 'character'::regtype AND  p.proargtypes[0] = 'text'::regtype))  OR NOT binary_coercible(p.prorettype, c.casttarget));
SELECT c.*  FROM pg_cast c, pg_proc p  WHERE c.castfunc = p.oid AND  ((p.pronargs > 1 AND p.proargtypes[1] != 'int4'::regtype) OR  (p.pronargs > 2 AND p.proargtypes[2] != 'bool'::regtype));
SELECT castsource::regtype, casttarget::regtype, castfunc, castcontext  FROM pg_cast c  WHERE c.castmethod = 'b' AND  NOT EXISTS (SELECT 1 FROM pg_cast k  WHERE k.castmethod = 'b' AND  k.castsource = c.casttarget AND  k.casttarget = c.castsource);
SELECT p1.oid, p1.oprname  FROM pg_operator as p1  WHERE (p1.oprkind != 'b' AND p1.oprkind != 'l' AND p1.oprkind != 'r') OR  p1.oprresult = 0 OR p1.oprcode = 0;
SELECT p1.oid, p1.oprname  FROM pg_operator as p1  WHERE (p1.oprleft = 0 and p1.oprkind != 'l') OR  (p1.oprleft != 0 and p1.oprkind = 'l') OR  (p1.oprright = 0 and p1.oprkind != 'r') OR  (p1.oprright != 0 and p1.oprkind = 'r');
SELECT p1.oid, p1.oprcode, p2.oid, p2.oprcode  FROM pg_operator AS p1, pg_operator AS p2  WHERE p1.oid != p2.oid AND  p1.oprname = p2.oprname AND  p1.oprkind = p2.oprkind AND  p1.oprleft = p2.oprleft AND  p1.oprright = p2.oprright;
SELECT p1.oid, p1.oprcode, p2.oid, p2.oprcode  FROM pg_operator AS p1, pg_operator AS p2  WHERE p1.oprcom = p2.oid AND  (p1.oprkind != 'b' OR  p1.oprleft != p2.oprright OR  p1.oprright != p2.oprleft OR  p1.oprresult != p2.oprresult OR  p1.oid != p2.oprcom);
SELECT p1.oid, p1.oprcode, p2.oid, p2.oprcode  FROM pg_operator AS p1, pg_operator AS p2  WHERE p1.oprnegate = p2.oid AND  (p1.oprkind != p2.oprkind OR  p1.oprleft != p2.oprleft OR  p1.oprright != p2.oprright OR  p1.oprresult != 'bool'::regtype OR  p2.oprresult != 'bool'::regtype OR  p1.oid != p2.oprnegate OR  p1.oid = p2.oid);
SELECT DISTINCT o1.oprname AS op1, o2.oprname AS op2  FROM pg_operator o1, pg_operator o2  WHERE o1.oprcom = o2.oid AND o1.oprname <= o2.oprname  ORDER BY 1, 2;
SELECT DISTINCT o1.oprname AS op1, o2.oprname AS op2  FROM pg_operator o1, pg_operator o2  WHERE o1.oprnegate = o2.oid AND o1.oprname <= o2.oprname  ORDER BY 1, 2;
SELECT p1.oid, p1.oprname FROM pg_operator AS p1  WHERE (p1.oprcanmerge OR p1.oprcanhash) AND NOT  (p1.oprkind = 'b' AND p1.oprresult = 'bool'::regtype AND p1.oprcom != 0);
SELECT p1.oid, p1.oprname, p2.oid, p2.oprname  FROM pg_operator AS p1, pg_operator AS p2  WHERE p1.oprcom = p2.oid AND  (p1.oprcanmerge != p2.oprcanmerge OR  p1.oprcanhash != p2.oprcanhash);
SELECT p1.oid, p1.oprname  FROM pg_operator AS p1  WHERE p1.oprcanmerge AND NOT EXISTS  (SELECT 1 FROM pg_amop  WHERE amopmethod = (SELECT oid FROM pg_am WHERE amname = 'btree') AND  amopopr = p1.oid AND amopstrategy = 3);
SELECT p1.oid, p1.oprname, p.amopfamily  FROM pg_operator AS p1, pg_amop p  WHERE amopopr = p1.oid  AND amopmethod = (SELECT oid FROM pg_am WHERE amname = 'btree')  AND amopstrategy = 3  AND NOT p1.oprcanmerge;
SELECT p1.oid, p1.oprname  FROM pg_operator AS p1  WHERE p1.oprcanhash AND NOT EXISTS  (SELECT 1 FROM pg_amop  WHERE amopmethod = (SELECT oid FROM pg_am WHERE amname = 'hash') AND  amopopr = p1.oid AND amopstrategy = 1);
SELECT p1.oid, p1.oprname, p.amopfamily  FROM pg_operator AS p1, pg_amop p  WHERE amopopr = p1.oid  AND amopmethod = (SELECT oid FROM pg_am WHERE amname = 'hash')  AND NOT p1.oprcanhash;
SELECT p1.oid, p1.oprname, p2.oid, p2.proname  FROM pg_operator AS p1, pg_proc AS p2  WHERE p1.oprcode = p2.oid AND  p1.oprkind = 'b' AND  (p2.pronargs != 2  OR NOT binary_coercible(p2.prorettype, p1.oprresult)  OR NOT binary_coercible(p1.oprleft, p2.proargtypes[0])  OR NOT binary_coercible(p1.oprright, p2.proargtypes[1]));
SELECT p1.oid, p1.oprname, p2.oid, p2.proname  FROM pg_operator AS p1, pg_proc AS p2  WHERE p1.oprcode = p2.oid AND  p1.oprkind = 'l' AND  (p2.pronargs != 1  OR NOT binary_coercible(p2.prorettype, p1.oprresult)  OR NOT binary_coercible(p1.oprright, p2.proargtypes[0])  OR p1.oprleft != 0);
SELECT p1.oid, p1.oprname, p2.oid, p2.proname  FROM pg_operator AS p1, pg_proc AS p2  WHERE p1.oprcode = p2.oid AND  p1.oprkind = 'r' AND  (p2.pronargs != 1  OR NOT binary_coercible(p2.prorettype, p1.oprresult)  OR NOT binary_coercible(p1.oprleft, p2.proargtypes[0])  OR p1.oprright != 0);
SELECT p1.oid, p1.oprname, p2.oid, p2.proname  FROM pg_operator AS p1, pg_proc AS p2  WHERE p1.oprcode = p2.oid AND  (p1.oprcanmerge OR p1.oprcanhash) AND  p2.provolatile = 'v';
SELECT p1.oid, p1.oprname, p2.oid, p2.proname  FROM pg_operator AS p1, pg_proc AS p2  WHERE p1.oprrest = p2.oid AND  (p1.oprresult != 'bool'::regtype OR  p2.prorettype != 'float8'::regtype OR p2.proretset OR  p2.pronargs != 4 OR  p2.proargtypes[0] != 'internal'::regtype OR  p2.proargtypes[1] != 'oid'::regtype OR  p2.proargtypes[2] != 'internal'::regtype OR  p2.proargtypes[3] != 'int4'::regtype);
SELECT p1.oid, p1.oprname, p2.oid, p2.proname  FROM pg_operator AS p1, pg_proc AS p2  WHERE p1.oprjoin = p2.oid AND  (p1.oprkind != 'b' OR p1.oprresult != 'bool'::regtype OR  p2.prorettype != 'float8'::regtype OR p2.proretset OR  p2.pronargs != 5 OR  p2.proargtypes[0] != 'internal'::regtype OR  p2.proargtypes[1] != 'oid'::regtype OR  p2.proargtypes[2] != 'internal'::regtype OR  p2.proargtypes[3] != 'int2'::regtype OR  p2.proargtypes[4] != 'internal'::regtype);
SELECT p1.oid, p1.oprname  FROM pg_operator as p1 LEFT JOIN pg_description as d  ON p1.tableoid = d.classoid and p1.oid = d.objoid and d.objsubid = 0  WHERE d.classoid IS NULL AND p1.oid <= 9999;
WITH funcdescs AS (  SELECT p.oid as p_oid, proname, o.oid as o_oid,  obj_description(p.oid, 'pg_proc') as prodesc,  'implementation of ' || oprname || ' operator' as expecteddesc,  obj_description(o.oid, 'pg_operator') as oprdesc  FROM pg_proc p JOIN pg_operator o ON oprcode = p.oid  WHERE o.oid <= 9999  )  SELECT * FROM funcdescs  WHERE prodesc IS DISTINCT FROM expecteddesc  AND oprdesc NOT LIKE 'deprecated%'  AND prodesc IS DISTINCT FROM oprdesc;
WITH funcdescs AS (  SELECT p.oid as p_oid, proname, o.oid as o_oid,  obj_description(p.oid, 'pg_proc') as prodesc,  'implementation of ' || oprname || ' operator' as expecteddesc,  obj_description(o.oid, 'pg_operator') as oprdesc  FROM pg_proc p JOIN pg_operator o ON oprcode = p.oid  WHERE o.oid <= 9999  )  SELECT p_oid, proname, prodesc FROM funcdescs  WHERE prodesc IS DISTINCT FROM expecteddesc  AND oprdesc NOT LIKE 'deprecated%'  ORDER BY 1;
SELECT ctid, aggfnoid::oid  FROM pg_aggregate as p1  WHERE aggfnoid = 0 OR aggtransfn = 0 OR  aggkind NOT IN ('n', 'o', 'h') OR  aggnumdirectargs < 0 OR  (aggkind = 'n' AND aggnumdirectargs > 0) OR  aggtranstype = 0 OR aggtransspace < 0 OR aggmtransspace < 0;
SELECT a.aggfnoid::oid, p.proname  FROM pg_aggregate as a, pg_proc as p  WHERE a.aggfnoid = p.oid AND  (NOT p.proisagg OR p.proretset OR p.pronargs < a.aggnumdirectargs);
SELECT oid, proname  FROM pg_proc as p  WHERE p.proisagg AND  NOT EXISTS (SELECT 1 FROM pg_aggregate a WHERE a.aggfnoid = p.oid);
SELECT a.aggfnoid::oid, p.proname  FROM pg_aggregate as a, pg_proc as p  WHERE a.aggfnoid = p.oid AND  a.aggfinalfn = 0 AND p.prorettype != a.aggtranstype;
SELECT a.aggfnoid::oid, p.proname, ptr.oid, ptr.proname  FROM pg_aggregate AS a, pg_proc AS p, pg_proc AS ptr  WHERE a.aggfnoid = p.oid AND  a.aggtransfn = ptr.oid AND  (ptr.proretset  OR NOT (ptr.pronargs =  CASE WHEN a.aggkind = 'n' THEN p.pronargs + 1  ELSE greatest(p.pronargs - a.aggnumdirectargs, 1) + 1 END)  OR NOT physically_coercible(ptr.prorettype, a.aggtranstype)  OR NOT physically_coercible(a.aggtranstype, ptr.proargtypes[0])  OR (p.pronargs > 0 AND  NOT physically_coercible(p.proargtypes[0], ptr.proargtypes[1]))  OR (p.pronargs > 1 AND  NOT physically_coercible(p.proargtypes[1], ptr.proargtypes[2]))  OR (p.pronargs > 2 AND  NOT physically_coercible(p.proargtypes[2], ptr.proargtypes[3]))   );
SELECT a.aggfnoid::oid, p.proname, pfn.oid, pfn.proname  FROM pg_aggregate AS a, pg_proc AS p, pg_proc AS pfn  WHERE a.aggfnoid = p.oid AND  a.aggfinalfn = pfn.oid AND  (pfn.proretset OR  NOT binary_coercible(pfn.prorettype, p.prorettype) OR  NOT binary_coercible(a.aggtranstype, pfn.proargtypes[0]) OR  CASE WHEN a.aggfinalextra THEN pfn.pronargs != p.pronargs + 1  ELSE pfn.pronargs != a.aggnumdirectargs + 1 END  OR (pfn.pronargs > 1 AND  NOT binary_coercible(p.proargtypes[0], pfn.proargtypes[1]))  OR (pfn.pronargs > 2 AND  NOT binary_coercible(p.proargtypes[1], pfn.proargtypes[2]))  OR (pfn.pronargs > 3 AND  NOT binary_coercible(p.proargtypes[2], pfn.proargtypes[3]))   );
SELECT a.aggfnoid::oid, p.proname, ptr.oid, ptr.proname  FROM pg_aggregate AS a, pg_proc AS p, pg_proc AS ptr  WHERE a.aggfnoid = p.oid AND  a.aggtransfn = ptr.oid AND ptr.proisstrict AND  a.agginitval IS NULL AND  NOT binary_coercible(p.proargtypes[0], a.aggtranstype);
SELECT ctid, aggfnoid::oid  FROM pg_aggregate as p1  WHERE aggmtranstype != 0 AND  (aggmtransfn = 0 OR aggminvtransfn = 0);
SELECT ctid, aggfnoid::oid  FROM pg_aggregate as p1  WHERE aggmtranstype = 0 AND  (aggmtransfn != 0 OR aggminvtransfn != 0 OR aggmfinalfn != 0 OR  aggmtransspace != 0 OR aggminitval IS NOT NULL);
SELECT a.aggfnoid::oid, p.proname  FROM pg_aggregate as a, pg_proc as p  WHERE a.aggfnoid = p.oid AND  a.aggmtransfn != 0 AND  a.aggmfinalfn = 0 AND p.prorettype != a.aggmtranstype;
SELECT a.aggfnoid::oid, p.proname, ptr.oid, ptr.proname  FROM pg_aggregate AS a, pg_proc AS p, pg_proc AS ptr  WHERE a.aggfnoid = p.oid AND  a.aggmtransfn = ptr.oid AND  (ptr.proretset  OR NOT (ptr.pronargs =  CASE WHEN a.aggkind = 'n' THEN p.pronargs + 1  ELSE greatest(p.pronargs - a.aggnumdirectargs, 1) + 1 END)  OR NOT physically_coercible(ptr.prorettype, a.aggmtranstype)  OR NOT physically_coercible(a.aggmtranstype, ptr.proargtypes[0])  OR (p.pronargs > 0 AND  NOT physically_coercible(p.proargtypes[0], ptr.proargtypes[1]))  OR (p.pronargs > 1 AND  NOT physically_coercible(p.proargtypes[1], ptr.proargtypes[2]))  OR (p.pronargs > 2 AND  NOT physically_coercible(p.proargtypes[2], ptr.proargtypes[3]))   );
SELECT a.aggfnoid::oid, p.proname, ptr.oid, ptr.proname  FROM pg_aggregate AS a, pg_proc AS p, pg_proc AS ptr  WHERE a.aggfnoid = p.oid AND  a.aggminvtransfn = ptr.oid AND  (ptr.proretset  OR NOT (ptr.pronargs =  CASE WHEN a.aggkind = 'n' THEN p.pronargs + 1  ELSE greatest(p.pronargs - a.aggnumdirectargs, 1) + 1 END)  OR NOT physically_coercible(ptr.prorettype, a.aggmtranstype)  OR NOT physically_coercible(a.aggmtranstype, ptr.proargtypes[0])  OR (p.pronargs > 0 AND  NOT physically_coercible(p.proargtypes[0], ptr.proargtypes[1]))  OR (p.pronargs > 1 AND  NOT physically_coercible(p.proargtypes[1], ptr.proargtypes[2]))  OR (p.pronargs > 2 AND  NOT physically_coercible(p.proargtypes[2], ptr.proargtypes[3]))   );
SELECT a.aggfnoid::oid, p.proname, pfn.oid, pfn.proname  FROM pg_aggregate AS a, pg_proc AS p, pg_proc AS pfn  WHERE a.aggfnoid = p.oid AND  a.aggmfinalfn = pfn.oid AND  (pfn.proretset OR  NOT binary_coercible(pfn.prorettype, p.prorettype) OR  NOT binary_coercible(a.aggmtranstype, pfn.proargtypes[0]) OR  CASE WHEN a.aggmfinalextra THEN pfn.pronargs != p.pronargs + 1  ELSE pfn.pronargs != a.aggnumdirectargs + 1 END  OR (pfn.pronargs > 1 AND  NOT binary_coercible(p.proargtypes[0], pfn.proargtypes[1]))  OR (pfn.pronargs > 2 AND  NOT binary_coercible(p.proargtypes[1], pfn.proargtypes[2]))  OR (pfn.pronargs > 3 AND  NOT binary_coercible(p.proargtypes[2], pfn.proargtypes[3]))   );
SELECT a.aggfnoid::oid, p.proname, ptr.oid, ptr.proname  FROM pg_aggregate AS a, pg_proc AS p, pg_proc AS ptr  WHERE a.aggfnoid = p.oid AND  a.aggmtransfn = ptr.oid AND ptr.proisstrict AND  a.aggminitval IS NULL AND  NOT binary_coercible(p.proargtypes[0], a.aggmtranstype);
SELECT a.aggfnoid::oid, p.proname, ptr.oid, ptr.proname, iptr.oid, iptr.proname  FROM pg_aggregate AS a, pg_proc AS p, pg_proc AS ptr, pg_proc AS iptr  WHERE a.aggfnoid = p.oid AND  a.aggmtransfn = ptr.oid AND  a.aggminvtransfn = iptr.oid AND  ptr.proisstrict != iptr.proisstrict;
SELECT DISTINCT proname, oprname  FROM pg_operator AS o, pg_aggregate AS a, pg_proc AS p  WHERE a.aggfnoid = p.oid AND a.aggsortop = o.oid  ORDER BY 1, 2;
SELECT a.aggfnoid::oid, o.oid  FROM pg_operator AS o, pg_aggregate AS a, pg_proc AS p  WHERE a.aggfnoid = p.oid AND a.aggsortop = o.oid AND  (oprkind != 'b' OR oprresult != 'boolean'::regtype  OR oprleft != p.proargtypes[0] OR oprright != p.proargtypes[0]);
SELECT a.aggfnoid::oid, o.oid  FROM pg_operator AS o, pg_aggregate AS a, pg_proc AS p  WHERE a.aggfnoid = p.oid AND a.aggsortop = o.oid AND  NOT EXISTS(SELECT 1 FROM pg_amop  WHERE amopmethod = (SELECT oid FROM pg_am WHERE amname = 'btree')  AND amopopr = o.oid  AND amoplefttype = o.oprleft  AND amoprighttype = o.oprright);
SELECT DISTINCT proname, oprname, amopstrategy  FROM pg_operator AS o, pg_aggregate AS a, pg_proc AS p,  pg_amop as ao  WHERE a.aggfnoid = p.oid AND a.aggsortop = o.oid AND  amopopr = o.oid AND  amopmethod = (SELECT oid FROM pg_am WHERE amname = 'btree')  ORDER BY 1, 2;
SELECT p1.oid::regprocedure, p2.oid::regprocedure  FROM pg_proc AS p1, pg_proc AS p2  WHERE p1.oid < p2.oid AND p1.proname = p2.proname AND  p1.proisagg AND p2.proisagg AND  array_dims(p1.proargtypes) != array_dims(p2.proargtypes)  ORDER BY 1;
SELECT oid, proname  FROM pg_proc AS p  WHERE proisagg AND proargdefaults IS NOT NULL;
SELECT p.oid, proname  FROM pg_proc AS p JOIN pg_aggregate AS a ON a.aggfnoid = p.oid  WHERE proisagg AND provariadic != 0 AND a.aggkind = 'n';
SELECT p1.oid  FROM pg_opfamily as p1  WHERE p1.opfmethod = 0 OR p1.opfnamespace = 0;
SELECT p1.oid  FROM pg_opclass AS p1  WHERE p1.opcmethod = 0 OR p1.opcnamespace = 0 OR p1.opcfamily = 0  OR p1.opcintype = 0;
SELECT p1.oid, p2.oid  FROM pg_opclass AS p1, pg_opfamily AS p2  WHERE p1.opcfamily = p2.oid AND p1.opcmethod != p2.opfmethod;
SELECT p1.oid, p2.oid  FROM pg_opclass AS p1, pg_opclass AS p2  WHERE p1.oid != p2.oid AND  p1.opcmethod = p2.opcmethod AND p1.opcintype = p2.opcintype AND  p1.opcdefault AND p2.opcdefault;
SELECT p1.amopfamily, p1.amopstrategy  FROM pg_amop as p1  WHERE p1.amopfamily = 0 OR p1.amoplefttype = 0 OR p1.amoprighttype = 0  OR p1.amopopr = 0 OR p1.amopmethod = 0 OR p1.amopstrategy < 1;
SELECT p1.amopfamily, p1.amopstrategy  FROM pg_amop as p1  WHERE NOT ((p1.amoppurpose = 's' AND p1.amopsortfamily = 0) OR  (p1.amoppurpose = 'o' AND p1.amopsortfamily <> 0));
SELECT p1.oid, p2.oid  FROM pg_amop AS p1, pg_operator AS p2  WHERE p1.amopopr = p2.oid AND NOT  (p1.amoplefttype = p2.oprleft AND p1.amoprighttype = p2.oprright);
SELECT p1.oid, p2.oid  FROM pg_amop AS p1, pg_opfamily AS p2  WHERE p1.amopfamily = p2.oid AND p1.amopmethod != p2.opfmethod;
SELECT p1.amopfamily, p1.amopstrategy  FROM pg_amop AS p1  WHERE p1.amopsortfamily <> 0 AND NOT EXISTS  (SELECT 1 from pg_opfamily op WHERE op.oid = p1.amopsortfamily  AND op.opfmethod = (SELECT oid FROM pg_am WHERE amname = 'btree'));
SELECT p1.amopfamily, p1.amopopr, p2.oid, p2.amname  FROM pg_amop AS p1, pg_am AS p2  WHERE p1.amopmethod = p2.oid AND  p1.amoppurpose = 'o' AND NOT p2.amcanorderbyop;
SELECT p1.amopfamily, p1.amopopr, p2.oid, p2.amname  FROM pg_amop AS p1, pg_am AS p2  WHERE p1.amopmethod = p2.oid AND  p1.amopstrategy > p2.amstrategies AND p2.amstrategies <> 0;
SELECT p1.amname, p2.amoplefttype, p2.amoprighttype  FROM pg_am AS p1, pg_amop AS p2  WHERE p2.amopmethod = p1.oid AND  p1.amstrategies <> 0 AND  p1.amstrategies != (SELECT count(*) FROM pg_amop AS p3  WHERE p3.amopfamily = p2.amopfamily AND  p3.amoplefttype = p2.amoplefttype AND  p3.amoprighttype = p2.amoprighttype AND  p3.amoppurpose = 's');
SELECT p1.amname, p2.amopfamily, p2.amopstrategy  FROM pg_am AS p1, pg_amop AS p2  WHERE p2.amopmethod = p1.oid AND  p1.amstrategies <> 0 AND p2.amoppurpose <> 's';
SELECT p1.amopfamily, p1.amopopr, p2.oid, p2.oprname  FROM pg_amop AS p1, pg_operator AS p2  WHERE p1.amopopr = p2.oid AND  p2.oprkind != 'b';
SELECT p1.amopfamily, p1.amopopr, p2.oid, p2.oprname  FROM pg_amop AS p1, pg_operator AS p2  WHERE p1.amopopr = p2.oid AND p1.amoppurpose = 's' AND  p2.oprresult != 'bool'::regtype;
SELECT p1.amopfamily, p1.amopopr, p2.oid, p2.oprname  FROM pg_amop AS p1, pg_operator AS p2  WHERE p1.amopopr = p2.oid AND p1.amoppurpose = 'o' AND NOT EXISTS  (SELECT 1 FROM pg_opclass op  WHERE opcfamily = p1.amopsortfamily AND opcintype = p2.oprresult);
SELECT DISTINCT amopmethod, amopstrategy, oprname  FROM pg_amop p1 LEFT JOIN pg_operator p2 ON amopopr = p2.oid  ORDER BY 1, 2, 3;
SELECT p1.amopfamily, p1.amopopr, p2.oid, p2.oprname  FROM pg_amop AS p1, pg_operator AS p2  WHERE p1.amopopr = p2.oid AND p1.amoppurpose = 's' AND  (p2.oprrest = 0 OR p2.oprjoin = 0);
SELECT p1.opcname, p1.opcfamily  FROM pg_opclass AS p1  WHERE NOT EXISTS(SELECT 1 FROM pg_amop AS p2  WHERE p2.amopfamily = p1.opcfamily  AND binary_coercible(p1.opcintype, p2.amoplefttype));
SELECT p1.amopfamily, p1.amopstrategy, p1.amopopr  FROM pg_amop AS p1  WHERE NOT EXISTS(SELECT 1 FROM pg_opclass AS p2  WHERE p2.opcfamily = p1.amopfamily  AND binary_coercible(p2.opcintype, p1.amoplefttype));
SELECT p1.amopfamily, p1.amopopr, p2.oprname, p3.prosrc  FROM pg_amop AS p1, pg_operator AS p2, pg_proc AS p3  WHERE p1.amopopr = p2.oid AND p2.oprcode = p3.oid AND  p1.amoplefttype = p1.amoprighttype AND  p3.provolatile != 'i';
SELECT p1.amopfamily, p1.amopopr, p2.oprname, p3.prosrc  FROM pg_amop AS p1, pg_operator AS p2, pg_proc AS p3  WHERE p1.amopopr = p2.oid AND p2.oprcode = p3.oid AND  p1.amoplefttype != p1.amoprighttype AND  p3.provolatile = 'v';
SELECT p1.amoplefttype, p1.amoprighttype  FROM pg_amop AS p1  WHERE p1.amopmethod = (SELECT oid FROM pg_am WHERE amname = 'btree') AND  p1.amopstrategy = 3 AND  p1.amoplefttype != p1.amoprighttype AND  NOT EXISTS(SELECT 1 FROM pg_amop p2 WHERE  p2.amopfamily = p1.amopfamily AND  p2.amoplefttype = p1.amoprighttype AND  p2.amoprighttype = p1.amoplefttype AND  p2.amopstrategy = 3);
SELECT p1.amoplefttype, p1.amoprighttype, p2.amoprighttype  FROM pg_amop AS p1, pg_amop AS p2  WHERE p1.amopfamily = p2.amopfamily AND  p1.amoprighttype = p2.amoplefttype AND  p1.amopmethod = (SELECT oid FROM pg_am WHERE amname = 'btree') AND  p2.amopmethod = (SELECT oid FROM pg_am WHERE amname = 'btree') AND  p1.amopstrategy = 3 AND p2.amopstrategy = 3 AND  p1.amoplefttype != p1.amoprighttype AND  p2.amoplefttype != p2.amoprighttype AND  NOT EXISTS(SELECT 1 FROM pg_amop p3 WHERE  p3.amopfamily = p1.amopfamily AND  p3.amoplefttype = p1.amoplefttype AND  p3.amoprighttype = p2.amoprighttype AND  p3.amopstrategy = 3);
SELECT p1.amoplefttype, p2.amoplefttype  FROM pg_amop AS p1, pg_amop AS p2  WHERE p1.amopfamily = p2.amopfamily AND  p1.amoplefttype = p1.amoprighttype AND  p2.amoplefttype = p2.amoprighttype AND  p1.amopmethod = (SELECT oid FROM pg_am WHERE amname = 'hash') AND  p2.amopmethod = (SELECT oid FROM pg_am WHERE amname = 'hash') AND  p1.amopstrategy = 1 AND p2.amopstrategy = 1 AND  p1.amoplefttype != p2.amoplefttype AND  NOT EXISTS(SELECT 1 FROM pg_amop p3 WHERE  p3.amopfamily = p1.amopfamily AND  p3.amoplefttype = p1.amoplefttype AND  p3.amoprighttype = p2.amoplefttype AND  p3.amopstrategy = 1);
SELECT p1.amprocfamily, p1.amprocnum  FROM pg_amproc as p1  WHERE p1.amprocfamily = 0 OR p1.amproclefttype = 0 OR p1.amprocrighttype = 0  OR p1.amprocnum < 1 OR p1.amproc = 0;
SELECT p1.amprocfamily, p1.amprocnum, p2.oid, p2.amname  FROM pg_amproc AS p1, pg_am AS p2, pg_opfamily AS p3  WHERE p1.amprocfamily = p3.oid AND p3.opfmethod = p2.oid AND  p1.amprocnum > p2.amsupport;
SELECT * FROM (  SELECT p1.amname, p2.opfname, p3.amproclefttype, p3.amprocrighttype,  array_agg(p3.amprocnum ORDER BY amprocnum) AS procnums  FROM pg_am AS p1, pg_opfamily AS p2, pg_amproc AS p3  WHERE p2.opfmethod = p1.oid AND p3.amprocfamily = p2.oid  GROUP BY p1.amname, p2.opfname, p3.amproclefttype, p3.amprocrighttype  ) AS t  WHERE NOT (         amname = 'btree' AND procnums @> '{1}' OR  amname = 'hash' AND procnums = '{1}' OR  amname = 'gist' AND procnums @> '{1, 2, 3, 4, 5, 6, 7}' OR  amname = 'gin' AND (procnums @> '{1, 2, 3}' AND (procnums && '{4, 6}')) OR  amname = 'spgist' AND procnums = '{1, 2, 3, 4, 5}' OR  amname = 'brin' AND procnums @> '{1, 2, 3, 4}'  );
SELECT * FROM (  SELECT amname, opcname, array_agg(amprocnum ORDER BY amprocnum) as procnums  FROM pg_am am JOIN pg_opclass op ON opcmethod = am.oid  LEFT JOIN pg_amproc p ON amprocfamily = opcfamily AND  amproclefttype = amprocrighttype AND amproclefttype = opcintype  GROUP BY amname, opcname, amprocfamily  ) AS t  WHERE NOT (   amname = 'btree' AND procnums @> '{1}' OR  amname = 'hash' AND procnums = '{1}' OR  amname = 'gist' AND procnums @> '{1, 2, 3, 4, 5, 6, 7}' OR  amname = 'gin' AND (procnums @> '{1, 2, 3}' AND (procnums && '{4, 6}')) OR  amname = 'spgist' AND procnums = '{1, 2, 3, 4, 5}' OR  amname = 'brin' AND procnums @> '{1, 2, 3, 4}'  );
SELECT p1.amprocfamily, p1.amprocnum,  p2.oid, p2.proname,  p3.opfname,  p4.amprocfamily, p4.amprocnum,  p5.oid, p5.proname,  p6.opfname  FROM pg_amproc AS p1, pg_proc AS p2, pg_opfamily AS p3,  pg_amproc AS p4, pg_proc AS p5, pg_opfamily AS p6  WHERE p1.amprocfamily = p3.oid AND p4.amprocfamily = p6.oid AND  p3.opfmethod = p6.opfmethod AND p1.amprocnum = p4.amprocnum AND  p1.amproc = p2.oid AND p4.amproc = p5.oid AND  (p2.proretset OR p5.proretset OR p2.pronargs != p5.pronargs);
SELECT p1.amprocfamily, p1.amprocnum,  p2.oid, p2.proname,  p3.opfname  FROM pg_amproc AS p1, pg_proc AS p2, pg_opfamily AS p3  WHERE p3.opfmethod = (SELECT oid FROM pg_am WHERE amname = 'btree')  AND p1.amprocfamily = p3.oid AND p1.amproc = p2.oid AND  (CASE WHEN amprocnum = 1  THEN prorettype != 'int4'::regtype OR proretset OR pronargs != 2  OR proargtypes[0] != amproclefttype  OR proargtypes[1] != amprocrighttype  WHEN amprocnum = 2  THEN prorettype != 'void'::regtype OR proretset OR pronargs != 1  OR proargtypes[0] != 'internal'::regtype  ELSE true END);
SELECT p1.amprocfamily, p1.amprocnum, p2.proname, p3.opfname  FROM pg_amproc AS p1, pg_proc AS p2, pg_opfamily AS p3  WHERE p3.opfmethod = (SELECT oid FROM pg_am WHERE amname = 'hash')  AND p1.amprocfamily = p3.oid AND p1.amproc = p2.oid AND  (amprocnum != 1  OR proretset  OR prorettype != 'int4'::regtype  OR pronargs != 1  OR NOT physically_coercible(amproclefttype, proargtypes[0])  OR amproclefttype != amprocrighttype)  ORDER BY 1;
SELECT p1.amprocfamily, p1.amprocnum,  p2.oid, p2.proname,  p3.opfname  FROM pg_amproc AS p1, pg_proc AS p2, pg_opfamily AS p3  WHERE p3.opfmethod = (SELECT oid FROM pg_am WHERE amname = 'spgist')  AND p1.amprocfamily = p3.oid AND p1.amproc = p2.oid AND  (CASE WHEN amprocnum = 1 OR amprocnum = 2 OR amprocnum = 3 OR amprocnum = 4  THEN prorettype != 'void'::regtype OR proretset OR pronargs != 2  OR proargtypes[0] != 'internal'::regtype  OR proargtypes[1] != 'internal'::regtype  WHEN amprocnum = 5  THEN prorettype != 'bool'::regtype OR proretset OR pronargs != 2  OR proargtypes[0] != 'internal'::regtype  OR proargtypes[1] != 'internal'::regtype  ELSE true END);
SELECT p1.amprocfamily, p1.amproc, p2.prosrc  FROM pg_amproc AS p1, pg_proc AS p2  WHERE p1.amproc = p2.oid AND  p1.amproclefttype = p1.amprocrighttype AND  p2.provolatile != 'i';
SELECT p1.amprocfamily, p1.amproc, p2.prosrc  FROM pg_amproc AS p1, pg_proc AS p2  WHERE p1.amproc = p2.oid AND  p1.amproclefttype != p1.amprocrighttype AND  p2.provolatile = 'v';
SELECT p1.indexrelid, p1.indrelid  FROM pg_index as p1  WHERE p1.indexrelid = 0 OR p1.indrelid = 0 OR  p1.indnatts <= 0 OR p1.indnatts > 32;
SELECT p1.indexrelid, p1.indrelid  FROM pg_index as p1  WHERE array_lower(indkey, 1) != 0 OR array_upper(indkey, 1) != indnatts-1 OR  array_lower(indclass, 1) != 0 OR array_upper(indclass, 1) != indnatts-1 OR  array_lower(indcollation, 1) != 0 OR array_upper(indcollation, 1) != indnatts-1 OR  array_lower(indoption, 1) != 0 OR array_upper(indoption, 1) != indnatts-1;
SELECT indexrelid::regclass, indrelid::regclass, attname, atttypid::regtype, opcname FROM (SELECT indexrelid, indrelid, unnest(indkey) as ikey,  unnest(indclass) as iclass, unnest(indcollation) as icoll  FROM pg_index) ss,  pg_attribute a,  pg_opclass opc  WHERE a.attrelid = indrelid AND a.attnum = ikey AND opc.oid = iclass AND  (NOT binary_coercible(atttypid, opcintype) OR icoll != attcollation);
SELECT indexrelid::regclass, indrelid::regclass, attname, atttypid::regtype, opcname FROM (SELECT indexrelid, indrelid, unnest(indkey) as ikey,  unnest(indclass) as iclass, unnest(indcollation) as icoll  FROM pg_index  WHERE indrelid < 16384) ss,  pg_attribute a,  pg_opclass opc  WHERE a.attrelid = indrelid AND a.attnum = ikey AND opc.oid = iclass AND  (opcintype != atttypid OR icoll != attcollation)  ORDER BY 1;
SELECT indexrelid::regclass, indrelid::regclass, iclass, icoll  FROM (SELECT indexrelid, indrelid,  unnest(indclass) as iclass, unnest(indcollation) as icoll  FROM pg_index  WHERE indrelid < 16384) ss  WHERE icoll != 0 AND iclass !=  (SELECT oid FROM pg_opclass  WHERE opcname = 'text_pattern_ops' AND opcmethod =  (SELECT oid FROM pg_am WHERE amname = 'btree'));
