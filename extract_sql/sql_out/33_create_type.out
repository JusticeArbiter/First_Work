CREATE TYPE widget (  internallength = 24,  input = widget_in,  output = widget_out,  typmod_in = numerictypmodin,  typmod_out = numerictypmodout,  alignment = double  );
CREATE TYPE city_budget (  internallength = 16,  input = int44in,  output = int44out,  element = int4,  category = 'x',  preferred = true  );
CREATE TYPE shell;
CREATE TYPE shell;
DROP TYPE shell;
DROP TYPE shell;
CREATE TYPE myshell;
CREATE TYPE int42;
CREATE TYPE text_w_default;
CREATE FUNCTION int42_in(cstring)  RETURNS int42  AS 'int4in'  LANGUAGE internal STRICT IMMUTABLE;
CREATE FUNCTION int42_out(int42)  RETURNS cstring  AS 'int4out'  LANGUAGE internal STRICT IMMUTABLE;
CREATE FUNCTION text_w_default_in(cstring)  RETURNS text_w_default  AS 'textin'  LANGUAGE internal STRICT IMMUTABLE;
CREATE FUNCTION text_w_default_out(text_w_default)  RETURNS cstring  AS 'textout'  LANGUAGE internal STRICT IMMUTABLE;
CREATE TYPE int42 (  internallength = 4,  input = int42_in,  output = int42_out,  alignment = int4,  default = 42,  passedbyvalue  );
CREATE TYPE text_w_default (  internallength = variable,  input = text_w_default_in,  output = text_w_default_out,  alignment = int4,  default = 'zippo'  );
CREATE TABLE default_test (f1 text_w_default, f2 int42);
INSERT INTO default_test DEFAULT VALUES;
SELECT * FROM default_test;
CREATE TYPE default_test_row AS (f1 text_w_default, f2 int42);
CREATE FUNCTION get_default_test() RETURNS SETOF default_test_row AS ' SELECT * FROM default_test;  ' LANGUAGE SQL;
SELECT * FROM get_default_test();
COMMENT ON TYPE bad IS 'bad comment';
COMMENT ON TYPE default_test_row IS 'good comment';
COMMENT ON TYPE default_test_row IS NULL;
COMMENT ON COLUMN default_test_row.nope IS 'bad comment';
COMMENT ON COLUMN default_test_row.f1 IS 'good comment';
COMMENT ON COLUMN default_test_row.f1 IS NULL;
CREATE TYPE text_w_default;
DROP TYPE default_test_row CASCADE;
DROP TABLE default_test;
CREATE TYPE not_existing_type (INPUT = array_in,  OUTPUT = array_out,  ELEMENT = int,  INTERNALLENGTH = 32);
CREATE FUNCTION base_fn_in(cstring) RETURNS opaque AS 'boolin'  LANGUAGE internal IMMUTABLE STRICT;
CREATE FUNCTION base_fn_out(opaque) RETURNS opaque AS 'boolout'  LANGUAGE internal IMMUTABLE STRICT;
CREATE TYPE base_type(INPUT = base_fn_in, OUTPUT = base_fn_out);
DROP FUNCTION base_fn_in(cstring);
DROP FUNCTION base_fn_out(opaque);
DROP TYPE base_type;
DROP TYPE base_type CASCADE;
CREATE TEMP TABLE mytab (foo widget(42,13,7));
CREATE TEMP TABLE mytab (foo widget(42,13));
SELECT format_type(atttypid,atttypmod) FROM pg_attribute  WHERE attrelid = 'mytab'::regclass AND attnum > 0;
