LOG:  statement: select message from postgres_log where query is null;
 statement: SELECT 'first line'                                                                                                                                  +
 ' - next line'                                                                                                                                                  +
         ' - third line'                                                                                                                                         +
         AS "Three lines to one";
 statement: SET standard_conforming_strings TO on;
 statement: SELECT U&'d\0061t\+000061' AS U&"d\0061t\+000061";
 statement: SELECT U&'d!0061t\+000061' UESCAPE '!' AS U&"d*0061t\+000061" UESCAPE '*';
 statement: SELECT U&' \' UESCAPE '!' AS "tricky";
 statement: SELECT 'tricky' AS U&"\" UESCAPE '!';
 statement: SET standard_conforming_strings TO off;
 statement: SELECT 'tricky' AS U&"\" UESCAPE '!';
 statement: RESET standard_conforming_strings;
 statement: SET bytea_output TO hex;
 statement: SELECT E'\\xDeAdBeEf'::bytea;
 statement: SELECT E'\\x De Ad Be Ef '::bytea;
 statement: SELECT E'\\xDeAdBeE'::bytea;
 statement: SELECT E'\\xDeAdBeEx'::bytea;
 statement: SELECT E'\\xDe00BeEf'::bytea;
 statement: SELECT E'DeAdBeEf'::bytea;
 statement: SELECT E'De\\000dBeEf'::bytea;
 statement: SELECT E'De\123dBeEf'::bytea;
 statement: SELECT E'De\\123dBeEf'::bytea;
 statement: SELECT E'De\\678dBeEf'::bytea;
 statement: SET bytea_output TO escape;
 statement: SELECT E'\\xDeAdBeEf'::bytea;
 statement: SELECT E'\\x De Ad Be Ef '::bytea;
 statement: SELECT E'\\xDe00BeEf'::bytea;
 statement: SELECT E'DeAdBeEf'::bytea;
 statement: SELECT E'De\\000dBeEf'::bytea;
 statement: SELECT E'De\\123dBeEf'::bytea;
 statement: SELECT CAST(f1 AS text) AS "text(char)" FROM CHAR_TBL;
 statement: SELECT CAST(f1 AS text) AS "text(varchar)" FROM VARCHAR_TBL;
 statement: SELECT CAST(name 'namefield' AS text) AS "text(name)";
 statement: SELECT CAST(f1 AS char(10)) AS "char(text)" FROM TEXT_TBL;
 statement: SELECT CAST(f1 AS char(20)) AS "char(text)" FROM TEXT_TBL;
 statement: SELECT CAST(f1 AS char(10)) AS "char(varchar)" FROM VARCHAR_TBL;
 statement: SELECT CAST(name 'namefield' AS char(10)) AS "char(name)";
 statement: SELECT CAST(f1 AS varchar) AS "varchar(text)" FROM TEXT_TBL;
 statement: SELECT CAST(f1 AS varchar) AS "varchar(char)" FROM CHAR_TBL;
 statement: SELECT CAST(name 'namefield' AS varchar) AS "varchar(name)";
 statement: SELECT TRIM(BOTH FROM '  bunch o blanks  ') = 'bunch o blanks' AS "bunch o blanks";
 statement: SELECT TRIM(LEADING FROM '  bunch o blanks  ') = 'bunch o blanks  ' AS "bunch o blanks  ";
 statement: SELECT TRIM(TRAILING FROM '  bunch o blanks  ') = '  bunch o blanks' AS "  bunch o blanks";
 statement: SELECT TRIM(BOTH 'x' FROM 'xxxxxsome Xsxxxxx') = 'some Xs' AS "some Xs";
 statement: SELECT SUBSTRING('1234567890' FROM 3) = '34567890' AS "34567890";
 statement: SELECT SUBSTRING('1234567890' FROM 4 FOR 3) = '456' AS "456";
 statement: SELECT SUBSTRING('abcdefg' FROM 'a#"(b_d)#"%' FOR '#') AS "bcd";
 statement: SELECT SUBSTRING('abcdefg' FROM '#"(b_d)#"%' FOR '#') IS NULL AS "True";
 statement: SELECT SUBSTRING('abcdefg' FROM '(b|c)' FOR NULL) IS NULL AS "True";
 statement: SELECT SUBSTRING(NULL FROM '(b|c)' FOR '#') IS NULL AS "True";
 statement: SELECT SUBSTRING('abcdefg' FROM NULL FOR '#') IS NULL AS "True";
 statement: SELECT SUBSTRING('abcdefg' FROM 'c.e') AS "cde";
 statement: SELECT SUBSTRING('abcdefg' FROM 'b(.*)f') AS "cde";
 statement: SELECT regexp_replace('1112223333', E'(\\d{3})(\\d{3})(\\d{4})', E'(\\1) \\2-\\3');
 statement: SELECT regexp_replace('AAA   BBB   CCC   ', E'\\s+', ' ', 'g');
 statement: SELECT regexp_replace('AAA', '^|$', 'Z', 'g');
 statement: SELECT regexp_replace('AAA aaa', 'A+', 'Z', 'gi');
 statement: SELECT regexp_replace('AAA aaa', 'A+', 'Z', 'z');
 statement: SELECT regexp_matches('foobarbequebaz', $re$(bar)(beque)$re$);
 statement: SELECT regexp_matches('foObARbEqUEbAz', $re$(bar)(beque)$re$, 'i');
 statement: SELECT regexp_matches('foobarbequebazilbarfbonk', $re$(b[^b]+)(b[^b]+)$re$, 'g');
 statement: SELECT regexp_matches('foobarbequebaz', $re$(bar)(.*)(beque)$re$);
 statement: SELECT regexp_matches('foobarbequebaz', $re$(bar)(.+)(beque)$re$);
 statement: SELECT regexp_matches('foobarbequebaz', $re$(bar)(.+)?(beque)$re$);
 statement: SELECT regexp_matches('foobarbequebaz', $re$barbeque$re$);
 statement: SELECT regexp_matches('foo' || chr(10) || 'bar' || chr(10) || 'bequq' || chr(10) || 'baz', '^', 'mg');
 statement: SELECT regexp_matches('foo' || chr(10) || 'bar' || chr(10) || 'bequq' || chr(10) || 'baz', '$', 'mg');
 statement: SELECT regexp_matches('1' || chr(10) || '2' || chr(10) || '3' || chr(10) || '4' || chr(10), '^.?', 'mg');
 statement: SELECT regexp_matches(chr(10) || '1' || chr(10) || '2' || chr(10) || '3' || chr(10) || '4' || chr(10), '.?$', 'mg');
 statement: SELECT regexp_matches(chr(10) || '1' || chr(10) || '2' || chr(10) || '3' || chr(10) || '4', '.?$', 'mg');
 statement: SELECT regexp_matches('foobarbequebaz', $re$(bar)(beque)$re$, 'gz');
 statement: SELECT regexp_matches('foobarbequebaz', $re$(barbeque$re$);
 statement: SELECT regexp_matches('foobarbequebaz', $re$(bar)(beque){2,1}$re$);
 statement: SELECT foo, length(foo) FROM regexp_split_to_table('the quick brown fox jumps over the lazy dog', $re$\s+$re$) AS foo;
 statement: SELECT regexp_split_to_array('the quick brown fox jumps over the lazy dog', $re$\s+$re$);
 statement: SELECT foo, length(foo) FROM regexp_split_to_table('the quick brown fox jumps over the lazy dog', $re$\s*$re$) AS foo;
 statement: SELECT regexp_split_to_array('the quick brown fox jumps over the lazy dog', $re$\s*$re$);
 statement: SELECT foo, length(foo) FROM regexp_split_to_table('the quick brown fox jumps over the lazy dog', '') AS foo;
 statement: SELECT regexp_split_to_array('the quick brown fox jumps over the lazy dog', '');
 statement: SELECT foo, length(foo) FROM regexp_split_to_table('thE QUick bROWn FOx jUMPs ovEr The lazy dOG', 'e', 'i') AS foo;
 statement: SELECT regexp_split_to_array('thE QUick bROWn FOx jUMPs ovEr The lazy dOG', 'e', 'i');
 statement: SELECT foo, length(foo) FROM regexp_split_to_table('the quick brown fox jumps over the lazy dog', 'nomatch') AS foo;
 statement: SELECT regexp_split_to_array('the quick brown fox jumps over the lazy dog', 'nomatch');
 statement: SELECT regexp_split_to_array('123456','1');
 statement: SELECT regexp_split_to_array('123456','6');
 statement: SELECT regexp_split_to_array('123456','.');
 statement: SELECT foo, length(foo) FROM regexp_split_to_table('thE QUick bROWn FOx jUMPs ovEr The lazy dOG', 'e', 'zippy') AS foo;
 statement: SELECT regexp_split_to_array('thE QUick bROWn FOx jUMPs ovEr The lazy dOG', 'e', 'iz');
 statement: SELECT foo, length(foo) FROM regexp_split_to_table('thE QUick bROWn FOx jUMPs ovEr The lazy dOG', 'e', 'g') AS foo;
 statement: SELECT regexp_split_to_array('thE QUick bROWn FOx jUMPs ovEr The lazy dOG', 'e', 'g');
 statement: SELECT POSITION('4' IN '1234567890') = '4' AS "4";
 statement: SELECT POSITION('5' IN '1234567890') = '5' AS "5";
 statement: SELECT OVERLAY('abcdef' PLACING '45' FROM 4) AS "abc45f";
 statement: SELECT OVERLAY('yabadoo' PLACING 'daba' FROM 5) AS "yabadaba";
 statement: SELECT OVERLAY('yabadoo' PLACING 'daba' FROM 5 FOR 0) AS "yabadabadoo";
 statement: SELECT OVERLAY('babosa' PLACING 'ubb' FROM 2 FOR 4) AS "bubba";
 statement: SELECT 'hawkeye' LIKE 'h%' AS "true";
 statement: SELECT 'hawkeye' NOT LIKE 'h%' AS "false";
 statement: SELECT 'hawkeye' LIKE 'H%' AS "false";
 statement: SELECT 'hawkeye' NOT LIKE 'H%' AS "true";
 statement: SELECT 'hawkeye' LIKE 'indio%' AS "false";
 statement: SELECT 'hawkeye' NOT LIKE 'indio%' AS "true";
 statement: SELECT 'hawkeye' LIKE 'h%eye' AS "true";
 statement: SELECT 'hawkeye' NOT LIKE 'h%eye' AS "false";
 statement: SELECT 'indio' LIKE '_ndio' AS "true";
 statement: SELECT 'indio' NOT LIKE '_ndio' AS "false";
 statement: SELECT 'indio' LIKE 'in__o' AS "true";
 statement: SELECT 'indio' NOT LIKE 'in__o' AS "false";
 statement: SELECT 'indio' LIKE 'in_o' AS "false";
 statement: SELECT 'indio' NOT LIKE 'in_o' AS "true";
 statement: SELECT 'hawkeye' LIKE 'h%' ESCAPE '#' AS "true";
 statement: SELECT 'hawkeye' NOT LIKE 'h%' ESCAPE '#' AS "false";
 statement: SELECT 'indio' LIKE 'ind_o' ESCAPE '$' AS "true";
 statement: SELECT 'indio' NOT LIKE 'ind_o' ESCAPE '$' AS "false";
 statement: SELECT 'h%' LIKE 'h#%' ESCAPE '#' AS "true";
 statement: SELECT 'h%' NOT LIKE 'h#%' ESCAPE '#' AS "false";
 statement: SELECT 'h%wkeye' LIKE 'h#%' ESCAPE '#' AS "false";
 statement: SELECT 'h%wkeye' NOT LIKE 'h#%' ESCAPE '#' AS "true";
 statement: SELECT 'h%wkeye' LIKE 'h#%%' ESCAPE '#' AS "true";
 statement: SELECT 'h%wkeye' NOT LIKE 'h#%%' ESCAPE '#' AS "false";
 statement: SELECT 'h%awkeye' LIKE 'h#%a%k%e' ESCAPE '#' AS "true";
 statement: SELECT 'h%awkeye' NOT LIKE 'h#%a%k%e' ESCAPE '#' AS "false";
 statement: SELECT 'indio' LIKE '_ndio' ESCAPE '$' AS "true";
 statement: SELECT 'indio' NOT LIKE '_ndio' ESCAPE '$' AS "false";
 statement: SELECT 'i_dio' LIKE 'i$_d_o' ESCAPE '$' AS "true";
 statement: SELECT 'i_dio' NOT LIKE 'i$_d_o' ESCAPE '$' AS "false";
 statement: SELECT 'i_dio' LIKE 'i$_nd_o' ESCAPE '$' AS "false";
 statement: SELECT 'i_dio' NOT LIKE 'i$_nd_o' ESCAPE '$' AS "true";
 statement: SELECT 'i_dio' LIKE 'i$_d%o' ESCAPE '$' AS "true";
 statement: SELECT 'i_dio' NOT LIKE 'i$_d%o' ESCAPE '$' AS "false";
 statement: SELECT 'maca' LIKE 'm%aca' ESCAPE '%' AS "true";
 statement: SELECT 'maca' NOT LIKE 'm%aca' ESCAPE '%' AS "false";
 statement: SELECT 'ma%a' LIKE 'm%a%%a' ESCAPE '%' AS "true";
 statement: SELECT 'ma%a' NOT LIKE 'm%a%%a' ESCAPE '%' AS "false";
 statement: SELECT 'bear' LIKE 'b_ear' ESCAPE '_' AS "true";
 statement: SELECT 'bear' NOT LIKE 'b_ear' ESCAPE '_' AS "false";
 statement: SELECT 'be_r' LIKE 'b_e__r' ESCAPE '_' AS "true";
 statement: SELECT 'be_r' NOT LIKE 'b_e__r' ESCAPE '_' AS "false";
 statement: SELECT 'be_r' LIKE '__e__r' ESCAPE '_' AS "false";
 statement: SELECT 'be_r' NOT LIKE '__e__r' ESCAPE '_' AS "true";
 statement: SELECT 'hawkeye' ILIKE 'h%' AS "true";
 statement: SELECT 'hawkeye' NOT ILIKE 'h%' AS "false";
 statement: SELECT 'hawkeye' ILIKE 'H%' AS "true";
 statement: SELECT 'hawkeye' NOT ILIKE 'H%' AS "false";
 statement: SELECT 'hawkeye' ILIKE 'H%Eye' AS "true";
 statement: SELECT 'hawkeye' NOT ILIKE 'H%Eye' AS "false";
 statement: SELECT 'Hawkeye' ILIKE 'h%' AS "true";
 statement: SELECT 'Hawkeye' NOT ILIKE 'h%' AS "false";
 statement: SELECT 'foo' LIKE '_%' as t, 'f' LIKE '_%' as t, '' LIKE '_%' as f;
 statement: SELECT 'foo' LIKE '%_' as t, 'f' LIKE '%_' as t, '' LIKE '%_' as f;
 statement: SELECT 'foo' LIKE '__%' as t, 'foo' LIKE '___%' as t, 'foo' LIKE '____%' as f;
 statement: SELECT 'foo' LIKE '%__' as t, 'foo' LIKE '%___' as t, 'foo' LIKE '%____' as f;
 statement: SELECT 'jack' LIKE '%____%' AS t;
 statement: SELECT 'unknown' || ' and unknown' AS "Concat unknown types";
 statement: SELECT text 'text' || ' and unknown' AS "Concat text to unknown type";
 statement: SELECT char(20) 'characters' || ' and text' AS "Concat char to unknown type";
 statement: SELECT text 'text' || char(20) ' and characters' AS "Concat text to char";
 statement: SELECT text 'text' || varchar ' and varchar' AS "Concat text to varchar";
 statement: CREATE TABLE toasttest(f1 text);
 statement: insert into toasttest values(repeat('1234567890',10000));
 statement: insert into toasttest values(repeat('1234567890',10000));
 statement: alter table toasttest alter column f1 set storage external;
 statement: insert into toasttest values(repeat('1234567890',10000));
 statement: insert into toasttest values(repeat('1234567890',10000));
 statement: SELECT substr(f1, -1, 5) from toasttest;
 statement: SELECT substr(f1, 5, -1) from toasttest;
 statement: SELECT substr(f1, 99995) from toasttest;
 statement: SELECT substr(f1, 99995, 10) from toasttest;
 statement: DROP TABLE toasttest;
 statement: CREATE TABLE toasttest(f1 bytea);
 statement: insert into toasttest values(decode(repeat('1234567890',10000),'escape'));
 statement: insert into toasttest values(decode(repeat('1234567890',10000),'escape'));
 statement: alter table toasttest alter column f1 set storage external;
 statement: insert into toasttest values(decode(repeat('1234567890',10000),'escape'));
 statement: insert into toasttest values(decode(repeat('1234567890',10000),'escape'));
 statement: SELECT substr(f1, -1, 5) from toasttest;
 statement: SELECT substr(f1, 5, -1) from toasttest;
 statement: SELECT substr(f1, 99995) from toasttest;
 statement: SELECT substr(f1, 99995, 10) from toasttest;
 statement: DROP TABLE toasttest;
 statement: CREATE TABLE toasttest (c char(4096));
 statement: INSERT INTO toasttest VALUES('x');
 statement: SELECT length(c), c::text FROM toasttest;
 statement: SELECT c FROM toasttest;
 statement: DROP TABLE toasttest;
 statement: SELECT length('abcdef') AS "length_6";
 statement: SELECT strpos('abcdef', 'cd') AS "pos_3";
 statement: SELECT strpos('abcdef', 'xy') AS "pos_0";
 statement: SELECT replace('abcdef', 'de', '45') AS "abc45f";
 statement: SELECT replace('yabadabadoo', 'ba', '123') AS "ya123da123doo";
 statement: SELECT replace('yabadoo', 'bad', '') AS "yaoo";
 statement: select split_part('joeuser@mydatabase','@',0) AS "an error";
 statement: select split_part('joeuser@mydatabase','@',1) AS "joeuser";
 statement: select split_part('joeuser@mydatabase','@',2) AS "mydatabase";
 statement: select split_part('joeuser@mydatabase','@',3) AS "empty string";
 statement: select split_part('@joeuser@mydatabase@','@',2) AS "joeuser";
 statement: select to_hex(256*256*256 - 1) AS "ffffff";
 statement: select to_hex(256::bigint*256::bigint*256::bigint*256::bigint - 1) AS "ffffffff";
 statement: select md5('') = 'd41d8cd98f00b204e9800998ecf8427e' AS "TRUE";
 statement: select md5('a') = '0cc175b9c0f1b6a831c399e269772661' AS "TRUE";
 statement: select md5('abc') = '900150983cd24fb0d6963f7d28e17f72' AS "TRUE";
 statement: select md5('message digest') = 'f96b697d7cb7938d525a2f31aaf161d0' AS "TRUE";
 statement: select md5('abcdefghijklmnopqrstuvwxyz') = 'c3fcd3d76192e4007dfb496cca67e13b' AS "TRUE";
 statement: select md5('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789') = 'd174ab98d277d9f5a5611c2c9f419d9f' AS "TRUE";
 statement: select md5('12345678901234567890123456789012345678901234567890123456789012345678901234567890') = '57edf4a22be3c955ac49da2e2107b67a' AS "TRUE";
 statement: select md5(''::bytea) = 'd41d8cd98f00b204e9800998ecf8427e' AS "TRUE";
 statement: select md5('a'::bytea) = '0cc175b9c0f1b6a831c399e269772661' AS "TRUE";
 statement: select md5('abc'::bytea) = '900150983cd24fb0d6963f7d28e17f72' AS "TRUE";
 statement: select md5('message digest'::bytea) = 'f96b697d7cb7938d525a2f31aaf161d0' AS "TRUE";
 statement: select md5('abcdefghijklmnopqrstuvwxyz'::bytea) = 'c3fcd3d76192e4007dfb496cca67e13b' AS "TRUE";
 statement: select md5('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'::bytea) = 'd174ab98d277d9f5a5611c2c9f419d9f' AS "TRUE";
 statement: select md5('12345678901234567890123456789012345678901234567890123456789012345678901234567890'::bytea) = '57edf4a22be3c955ac49da2e2107b67a' AS "TRUE";
 statement: set escape_string_warning = off;
 statement: set standard_conforming_strings = off;
 statement: show escape_string_warning;
 statement: show standard_conforming_strings;
 statement: set escape_string_warning = on;
 statement: set standard_conforming_strings = on;
 statement: show escape_string_warning;
 statement: show standard_conforming_strings;
 statement: select 'a\bcd' as f1, 'a\b''cd' as f2, 'a\b''''cd' as f3, 'abcd\'   as f4, 'ab\''cd' as f5, '\\' as f6;
 statement: set standard_conforming_strings = off;
 statement: select 'a\\bcd' as f1, 'a\\b\'cd' as f2, 'a\\b\'''cd' as f3, 'abcd\\'   as f4, 'ab\\\'cd' as f5, '\\\\' as f6;
 statement: set escape_string_warning = off;
 statement: set standard_conforming_strings = on;
 statement: select 'a\bcd' as f1, 'a\b''cd' as f2, 'a\b''''cd' as f3, 'abcd\'   as f4, 'ab\''cd' as f5, '\\' as f6;
 statement: set standard_conforming_strings = off;
 statement: select 'a\\bcd' as f1, 'a\\b\'cd' as f2, 'a\\b\'''cd' as f3, 'abcd\\'   as f4, 'ab\\\'cd' as f5, '\\\\' as f6;
 statement: SELECT initcap('hi THOMAS');
 statement: SELECT lpad('hi', 5, 'xy');
 statement: SELECT lpad('hi', 5);
 statement: SELECT lpad('hi', -5, 'xy');
 statement: SELECT lpad('hello', 2);
 statement: SELECT lpad('hi', 5, '');
 statement: SELECT rpad('hi', 5, 'xy');
 statement: SELECT rpad('hi', 5);
 statement: SELECT rpad('hi', -5, 'xy');
 statement: SELECT rpad('hello', 2);
 statement: SELECT rpad('hi', 5, '');
 statement: SELECT ltrim('zzzytrim', 'xyz');
 statement: SELECT translate('', '14', 'ax');
 statement: SELECT translate('12345', '14', 'ax');
 statement: SELECT ascii('x');
 statement: SELECT ascii('');
 statement: SELECT chr(65);
 statement: SELECT chr(0);
 statement: SELECT repeat('Pg', 4);
 statement: SELECT repeat('Pg', -4);
 statement: SELECT trim(E'\\000'::bytea from E'\\000Tom\\000'::bytea);
 statement: SELECT btrim(E'\\000trim\\000'::bytea, E'\\000'::bytea);
 statement: SELECT btrim(''::bytea, E'\\000'::bytea);
 statement: SELECT btrim(E'\\000trim\\000'::bytea, ''::bytea);
 statement: SELECT encode(overlay(E'Th\\000omas'::bytea placing E'Th\\001omas'::bytea from 2),'escape');
 statement: SELECT encode(overlay(E'Th\\000omas'::bytea placing E'\\002\\003'::bytea from 8),'escape');
 statement: SELECT encode(overlay(E'Th\\000omas'::bytea placing E'\\002\\003'::bytea from 5 for 3),'escape');

