LOG:  statement: select message from postgres_log where query is null;
 statement: create type textrange as range (subtype=text, collation="C");
 statement: select ''::textrange;
 statement: select '-[a,z)'::textrange;
 statement: select '[a,z) - '::textrange;
 statement: select '(",a)'::textrange;
 statement: select '(,,a)'::textrange;
 statement: select '(),a)'::textrange;
 statement: select '(a,))'::textrange;
 statement: select '(],a)'::textrange;
 statement: select '(a,])'::textrange;
 statement: select '[z,a]'::textrange;
 statement: select '  empty  '::textrange;
 statement: select ' ( empty, empty )  '::textrange;
 statement: select ' ( " a " " a ", " z " " z " )  '::textrange;
 statement: select '(,z)'::textrange;
 statement: select '(a,)'::textrange;
 statement: select '[,z]'::textrange;
 statement: select '[a,]'::textrange;
 statement: select '(,)'::textrange;
 statement: select '[ , ]'::textrange;
 statement: select '["",""]'::textrange;
 statement: select '[",",","]'::textrange;
 statement: select '["\\","\\"]'::textrange;
 statement: select '(\\,a)'::textrange;
 statement: select '((,z)'::textrange;
 statement: select '([,z)'::textrange;
 statement: select '(!,()'::textrange;
 statement: select '(!,[)'::textrange;
 statement: select '[a,a]'::textrange;
 statement: select '[a,a)'::textrange;
 statement: select '(a,a]'::textrange;
 statement: select '(a,a)'::textrange;
 statement: CREATE TABLE numrange_test (nr NUMRANGE);
 statement: create index numrange_test_btree on numrange_test(nr);
 statement: INSERT INTO numrange_test VALUES('[,)');
 statement: INSERT INTO numrange_test VALUES('[3,]');
 statement: INSERT INTO numrange_test VALUES('[, 5)');
 statement: INSERT INTO numrange_test VALUES(numrange(1.1, 2.2));
 statement: INSERT INTO numrange_test VALUES('empty');
 statement: INSERT INTO numrange_test VALUES(numrange(1.7, 1.7, '[]'));
 statement: SELECT nr, isempty(nr), lower(nr), upper(nr) FROM numrange_test;
 statement: SELECT nr, lower_inc(nr), lower_inf(nr), upper_inc(nr), upper_inf(nr) FROM numrange_test;
 statement: SELECT * FROM numrange_test WHERE range_contains(nr, numrange(1.9,1.91));
 statement: SELECT * FROM numrange_test WHERE nr @> numrange(1.0,10000.1);
 statement: SELECT * FROM numrange_test WHERE range_contained_by(numrange(-1e7,-10000.1), nr);
 statement: SELECT * FROM numrange_test WHERE 1.9 <@ nr;
 statement: select * from numrange_test where nr = 'empty';
 statement: select * from numrange_test where nr = '(1.1, 2.2)';
 statement: select * from numrange_test where nr = '[1.1, 2.2)';
 statement: select * from numrange_test where nr < 'empty';
 statement: select * from numrange_test where nr < numrange(-1000.0, -1000.0,'[]');
 statement: select * from numrange_test where nr < numrange(0.0, 1.0,'[]');
 statement: select * from numrange_test where nr < numrange(1000.0, 1001.0,'[]');
 statement: select * from numrange_test where nr <= 'empty';
 statement: select * from numrange_test where nr >= 'empty';
 statement: select * from numrange_test where nr > 'empty';
 statement: select * from numrange_test where nr > numrange(-1001.0, -1000.0,'[]');
 statement: select * from numrange_test where nr > numrange(0.0, 1.0,'[]');
 statement: select * from numrange_test where nr > numrange(1000.0, 1000.0,'[]');
 statement: select numrange(2.0, 1.0);
 statement: select numrange(2.0, 3.0) -|- numrange(3.0, 4.0);
 statement: select range_adjacent(numrange(2.0, 3.0), numrange(3.1, 4.0));
 statement: select range_adjacent(numrange(2.0, 3.0), numrange(3.1, null));
 statement: select numrange(2.0, 3.0, '[]') -|- numrange(3.0, 4.0, '()');
 statement: select numrange(1.0, 2.0) -|- numrange(2.0, 3.0,'[]');
 statement: select range_adjacent(numrange(2.0, 3.0, '(]'), numrange(1.0, 2.0, '(]'));
 statement: select numrange(1.1, 3.3) <@ numrange(0.1,10.1);
 statement: select numrange(0.1, 10.1) <@ numrange(1.1,3.3);
 statement: select numrange(1.1, 2.2) - numrange(2.0, 3.0);
 statement: select numrange(1.1, 2.2) - numrange(2.2, 3.0);
 statement: select numrange(1.1, 2.2,'[]') - numrange(2.0, 3.0);
 statement: select range_minus(numrange(10.1,12.2,'[]'), numrange(110.0,120.2,'(]'));
 statement: select range_minus(numrange(10.1,12.2,'[]'), numrange(0.0,120.2,'(]'));
 statement: select numrange(4.5, 5.5, '[]') && numrange(5.5, 6.5);
 statement: select numrange(1.0, 2.0) << numrange(3.0, 4.0);
 statement: select numrange(1.0, 3.0,'[]') << numrange(3.0, 4.0,'[]');
 statement: select numrange(1.0, 3.0,'()') << numrange(3.0, 4.0,'()');
 statement: select numrange(1.0, 2.0) >> numrange(3.0, 4.0);
 statement: select numrange(3.0, 70.0) &< numrange(6.6, 100.0);
 statement: select numrange(1.1, 2.2) < numrange(1.0, 200.2);
 statement: select numrange(1.1, 2.2) < numrange(1.1, 1.2);
 statement: select numrange(1.0, 2.0) + numrange(2.0, 3.0);
 statement: select numrange(1.0, 2.0) + numrange(1.5, 3.0);
 statement: select numrange(1.0, 2.0) + numrange(2.5, 3.0);
 statement: select range_merge(numrange(1.0, 2.0), numrange(2.0, 3.0));
 statement: select range_merge(numrange(1.0, 2.0), numrange(1.5, 3.0));
 statement: select range_merge(numrange(1.0, 2.0), numrange(2.5, 3.0));
 statement: select numrange(1.0, 2.0) * numrange(2.0, 3.0);
 statement: select numrange(1.0, 2.0) * numrange(1.5, 3.0);
 statement: select numrange(1.0, 2.0) * numrange(2.5, 3.0);
 statement: create table numrange_test2(nr numrange);
 statement: create index numrange_test2_hash_idx on numrange_test2 (nr);
 statement: INSERT INTO numrange_test2 VALUES('[, 5)');
 statement: INSERT INTO numrange_test2 VALUES(numrange(1.1, 2.2));
 statement: INSERT INTO numrange_test2 VALUES(numrange(1.1, 2.2));
 statement: INSERT INTO numrange_test2 VALUES(numrange(1.1, 2.2,'()'));
 statement: INSERT INTO numrange_test2 VALUES('empty');
 statement: select * from numrange_test2 where nr = 'empty'::numrange;
 statement: select * from numrange_test2 where nr = numrange(1.1, 2.2);
 statement: select * from numrange_test2 where nr = numrange(1.1, 2.3);
 statement: set enable_nestloop=t;
 statement: set enable_hashjoin=f;
 statement: set enable_mergejoin=f;
 statement: select * from numrange_test natural join numrange_test2 order by nr;
 statement: set enable_nestloop=f;
 statement: set enable_hashjoin=t;
 statement: set enable_mergejoin=f;
 statement: select * from numrange_test natural join numrange_test2 order by nr;
 statement: set enable_nestloop=f;
 statement: set enable_hashjoin=f;
 statement: set enable_mergejoin=t;
 statement: select * from numrange_test natural join numrange_test2 order by nr;
 statement: set enable_nestloop to default;
 statement: set enable_hashjoin to default;
 statement: set enable_mergejoin to default;
 statement: DROP TABLE numrange_test;
 statement: DROP TABLE numrange_test2;
 statement: select int4range(1, 10, '[]');
 statement: select int4range(1, 10, '[)');
 statement: select int4range(1, 10, '(]');
 statement: select int4range(1, 10, '()');
 statement: select int4range(1, 2, '()');
 statement: select daterange('2000-01-10'::date, '2000-01-20'::date, '[]');
 statement: select daterange('2000-01-10'::date, '2000-01-20'::date, '[)');
 statement: select daterange('2000-01-10'::date, '2000-01-20'::date, '(]');
 statement: select daterange('2000-01-10'::date, '2000-01-20'::date, '()');
 statement: select daterange('2000-01-10'::date, '2000-01-11'::date, '()');
 statement: select daterange('2000-01-10'::date, '2000-01-11'::date, '(]');
 statement: create table test_range_gist(ir int4range);
 statement: create index test_range_gist_idx on test_range_gist using gist (ir);
 statement: insert into test_range_gist select int4range(g, g+10) from generate_series(1,2000) g;
 statement: insert into test_range_gist select 'empty'::int4range from generate_series(1,500) g;
 statement: insert into test_range_gist select int4range(g, g+10000) from generate_series(1,1000) g;
 statement: insert into test_range_gist select 'empty'::int4range from generate_series(1,500) g;
 statement: insert into test_range_gist select int4range(NULL,g*10,'(]') from generate_series(1,100) g;
 statement: insert into test_range_gist select int4range(g*10,NULL,'(]') from generate_series(1,100) g;
 statement: insert into test_range_gist select int4range(g, g+10) from generate_series(1,2000) g;
 statement: SET enable_seqscan    = t;
 statement: SET enable_indexscan  = f;
 statement: SET enable_bitmapscan = f;
 statement: select count(*) from test_range_gist where ir @> 'empty'::int4range;
 statement: select count(*) from test_range_gist where ir = int4range(10,20);
 statement: select count(*) from test_range_gist where ir @> 10;
 statement: select count(*) from test_range_gist where ir @> int4range(10,20);
 statement: select count(*) from test_range_gist where ir && int4range(10,20);
 statement: select count(*) from test_range_gist where ir <@ int4range(10,50);
 statement: select count(*) from test_range_gist where ir << int4range(100,500);
 statement: select count(*) from test_range_gist where ir >> int4range(100,500);
 statement: select count(*) from test_range_gist where ir &< int4range(100,500);
 statement: select count(*) from test_range_gist where ir &> int4range(100,500);
 statement: select count(*) from test_range_gist where ir -|- int4range(100,500);
 statement: SET enable_seqscan    = f;
 statement: SET enable_indexscan  = t;
 statement: SET enable_bitmapscan = f;
 statement: select count(*) from test_range_gist where ir @> 'empty'::int4range;
 statement: select count(*) from test_range_gist where ir = int4range(10,20);
 statement: select count(*) from test_range_gist where ir @> 10;
 statement: select count(*) from test_range_gist where ir @> int4range(10,20);
 statement: select count(*) from test_range_gist where ir && int4range(10,20);
 statement: select count(*) from test_range_gist where ir <@ int4range(10,50);
 statement: select count(*) from test_range_gist where ir << int4range(100,500);
 statement: select count(*) from test_range_gist where ir >> int4range(100,500);
 statement: select count(*) from test_range_gist where ir &< int4range(100,500);
 statement: select count(*) from test_range_gist where ir &> int4range(100,500);
 statement: select count(*) from test_range_gist where ir -|- int4range(100,500);
 statement: drop index test_range_gist_idx;
 statement: create index test_range_gist_idx on test_range_gist using gist (ir);
 statement: select count(*) from test_range_gist where ir @> 'empty'::int4range;
 statement: select count(*) from test_range_gist where ir = int4range(10,20);
 statement: select count(*) from test_range_gist where ir @> 10;
 statement: select count(*) from test_range_gist where ir @> int4range(10,20);
 statement: select count(*) from test_range_gist where ir && int4range(10,20);
 statement: select count(*) from test_range_gist where ir <@ int4range(10,50);
 statement: select count(*) from test_range_gist where ir << int4range(100,500);
 statement: select count(*) from test_range_gist where ir >> int4range(100,500);
 statement: select count(*) from test_range_gist where ir &< int4range(100,500);
 statement: select count(*) from test_range_gist where ir &> int4range(100,500);
 statement: select count(*) from test_range_gist where ir -|- int4range(100,500);
 statement: create table test_range_spgist(ir int4range);
 statement: create index test_range_spgist_idx on test_range_spgist using spgist (ir);
 statement: insert into test_range_spgist select int4range(g, g+10) from generate_series(1,2000) g;
 statement: insert into test_range_spgist select 'empty'::int4range from generate_series(1,500) g;
 statement: insert into test_range_spgist select int4range(g, g+10000) from generate_series(1,1000) g;
 statement: insert into test_range_spgist select 'empty'::int4range from generate_series(1,500) g;
 statement: insert into test_range_spgist select int4range(NULL,g*10,'(]') from generate_series(1,100) g;
 statement: insert into test_range_spgist select int4range(g*10,NULL,'(]') from generate_series(1,100) g;
 statement: insert into test_range_spgist select int4range(g, g+10) from generate_series(1,2000) g;
 statement: SET enable_seqscan    = t;
 statement: SET enable_indexscan  = f;
 statement: SET enable_bitmapscan = f;
 statement: select count(*) from test_range_spgist where ir @> 'empty'::int4range;
 statement: select count(*) from test_range_spgist where ir = int4range(10,20);
 statement: select count(*) from test_range_spgist where ir @> 10;
 statement: select count(*) from test_range_spgist where ir @> int4range(10,20);
 statement: select count(*) from test_range_spgist where ir && int4range(10,20);
 statement: select count(*) from test_range_spgist where ir <@ int4range(10,50);
 statement: select count(*) from test_range_spgist where ir << int4range(100,500);
 statement: select count(*) from test_range_spgist where ir >> int4range(100,500);
 statement: select count(*) from test_range_spgist where ir &< int4range(100,500);
 statement: select count(*) from test_range_spgist where ir &> int4range(100,500);
 statement: select count(*) from test_range_spgist where ir -|- int4range(100,500);
 statement: SET enable_seqscan    = f;
 statement: SET enable_indexscan  = t;
 statement: SET enable_bitmapscan = f;
 statement: select count(*) from test_range_spgist where ir @> 'empty'::int4range;
 statement: select count(*) from test_range_spgist where ir = int4range(10,20);
 statement: select count(*) from test_range_spgist where ir @> 10;
 statement: select count(*) from test_range_spgist where ir @> int4range(10,20);
 statement: select count(*) from test_range_spgist where ir && int4range(10,20);
 statement: select count(*) from test_range_spgist where ir <@ int4range(10,50);
 statement: select count(*) from test_range_spgist where ir << int4range(100,500);
 statement: select count(*) from test_range_spgist where ir >> int4range(100,500);
 statement: select count(*) from test_range_spgist where ir &< int4range(100,500);
 statement: select count(*) from test_range_spgist where ir &> int4range(100,500);
 statement: select count(*) from test_range_spgist where ir -|- int4range(100,500);
 statement: drop index test_range_spgist_idx;
 statement: create index test_range_spgist_idx on test_range_spgist using spgist (ir);
 statement: select count(*) from test_range_spgist where ir @> 'empty'::int4range;
 statement: select count(*) from test_range_spgist where ir = int4range(10,20);
 statement: select count(*) from test_range_spgist where ir @> 10;
 statement: select count(*) from test_range_spgist where ir @> int4range(10,20);
 statement: select count(*) from test_range_spgist where ir && int4range(10,20);
 statement: select count(*) from test_range_spgist where ir <@ int4range(10,50);
 statement: select count(*) from test_range_spgist where ir << int4range(100,500);
 statement: select count(*) from test_range_spgist where ir >> int4range(100,500);
 statement: select count(*) from test_range_spgist where ir &< int4range(100,500);
 statement: select count(*) from test_range_spgist where ir &> int4range(100,500);
 statement: select count(*) from test_range_spgist where ir -|- int4range(100,500);
 statement: explain (costs off)                                                                            +
 select ir from test_range_spgist where ir -|- int4range(10,20) order by ir;
 statement: select ir from test_range_spgist where ir -|- int4range(10,20) order by ir;
 statement: RESET enable_seqscan;
 statement: RESET enable_indexscan;
 statement: RESET enable_bitmapscan;
 statement: create table test_range_elem(i int4);
 statement: create index test_range_elem_idx on test_range_elem (i);
 statement: insert into test_range_elem select i from generate_series(1,100) i;
 statement: select count(*) from test_range_elem where i <@ int4range(10,50);
 statement: drop table test_range_elem;
 statement: create table test_range_excl(                                                                  +
   room int4range,                                                                                         +
   speaker int4range,                                                                                      +
   during tsrange,                                                                                         +
   exclude using gist (room with =, during with &&),                                                       +
   exclude using gist (speaker with =, during with &&)                                                     +
 );
 statement: insert into test_range_excl                                                                    +
   values(int4range(123, 123, '[]'), int4range(1, 1, '[]'), '[2010-01-02 10:00, 2010-01-02 11:00)');
 statement: insert into test_range_excl                                                                    +
   values(int4range(123, 123, '[]'), int4range(2, 2, '[]'), '[2010-01-02 11:00, 2010-01-02 12:00)');
 statement: insert into test_range_excl                                                                    +
   values(int4range(123, 123, '[]'), int4range(3, 3, '[]'), '[2010-01-02 10:10, 2010-01-02 11:00)');
 statement: insert into test_range_excl                                                                    +
   values(int4range(124, 124, '[]'), int4range(3, 3, '[]'), '[2010-01-02 10:10, 2010-01-02 11:10)');
 statement: insert into test_range_excl                                                                    +
   values(int4range(125, 125, '[]'), int4range(1, 1, '[]'), '[2010-01-02 10:10, 2010-01-02 11:00)');
 statement: select int8range(10000000000::int8, 20000000000::int8,'(]');
 statement: set timezone to '-08';
 statement: select '[2010-01-01 01:00:00 -05, 2010-01-01 02:00:00 -08)'::tstzrange;
 statement: select '[2010-01-01 01:00:00 -08, 2010-01-01 02:00:00 -05)'::tstzrange;
 statement: set timezone to default;
 statement: create type float8range as range (subtype=float8, subtype_diff=float4mi);
 statement: create type float8range as range (subtype=float8, subtype_diff=float8mi);
 statement: select '[123.001, 5.e9)'::float8range @> 888.882::float8;
 statement: create table float8range_test(f8r float8range, i int);
 statement: insert into float8range_test values(float8range(-100.00007, '1.111113e9'), 42);
 statement: select * from float8range_test;
 statement: drop table float8range_test;
 statement: create domain mydomain as int4;
 statement: create type mydomainrange as range(subtype=mydomain);
 statement: select '[4,50)'::mydomainrange @> 7::mydomain;
 statement: drop domain mydomain;
 statement: drop domain mydomain cascade;
 statement: create domain restrictedrange as int4range check (upper(value) < 10);
 statement: select '[4,5)'::restrictedrange @> 7;
 statement: select '[4,50)'::restrictedrange @> 7;
 statement: drop domain restrictedrange;
 statement: create type textrange1 as range(subtype=text, collation="C");
 statement: create type textrange2 as range(subtype=text, collation="C");
 statement: select textrange1('a','Z') @> 'b'::text;
 statement: select textrange2('a','z') @> 'b'::text;
 statement: drop type textrange1;
 statement: drop type textrange2;
 statement: create function anyarray_anyrange_func(a anyarray, r anyrange)                                 +
   returns anyelement as 'select $1[1] + lower($2);' language sql;
 statement: select anyarray_anyrange_func(ARRAY[1,2], int4range(10,20));
 statement: select anyarray_anyrange_func(ARRAY[1,2], numrange(10,20));
 statement: drop function anyarray_anyrange_func(anyarray, anyrange);
 statement: create function bogus_func(anyelement)                                                         +
   returns anyrange as 'select int4range(1,10)' language sql;
 statement: create function bogus_func(int)                                                                +
   returns anyrange as 'select int4range(1,10)' language sql;
 statement: create function range_add_bounds(anyrange)                                                     +
   returns anyelement as 'select lower($1) + upper($1)' language sql;
 statement: select range_add_bounds(int4range(1, 17));
 statement: select range_add_bounds(numrange(1.0001, 123.123));
 statement: create function rangetypes_sql(q anyrange, b anyarray, out c anyelement)                       +
   as $$ select upper($1) + $2[1] $$                                                                       +
   language sql;
 statement: select rangetypes_sql(int4range(1,10), ARRAY[2,20]);
 statement: select rangetypes_sql(numrange(1,10), ARRAY[2,20]);
 statement: select ARRAY[numrange(1.1, 1.2), numrange(12.3, 155.5)];
 statement: create table i8r_array (f1 int, f2 int8range[]);
 statement: insert into i8r_array values (42, array[int8range(1,10), int8range(2,20)]);
 statement: select * from i8r_array;
 statement: drop table i8r_array;
 statement: create type arrayrange as range (subtype=int4[]);
 statement: select arrayrange(ARRAY[1,2], ARRAY[2,1]);
 statement: select arrayrange(ARRAY[2,1], ARRAY[1,2]);
 statement: select array[1,1] <@ arrayrange(array[1,2], array[2,1]);
 statement: select array[1,3] <@ arrayrange(array[1,2], array[2,1]);
 statement: create type cashrange as range (subtype = money);
 statement: set enable_sort = off;
 statement: select '(2,5)'::cashrange except select '(5,6)'::cashrange;
 statement: reset enable_sort;
 statement: create function outparam_succeed(i anyrange, out r anyrange, out t text)                       +
   as $$ select $1, 'foo'::text $$ language sql;
 statement: select * from outparam_succeed(int4range(1,2));
 statement: create function inoutparam_succeed(out i anyelement, inout r anyrange)                         +
   as $$ select upper($1), $1 $$ language sql;
 statement: select * from inoutparam_succeed(int4range(1,2));
 statement: create function table_succeed(i anyelement, r anyrange) returns table(i anyelement, r anyrange)+
   as $$ select $1, $2 $$ language sql;
 statement: select * from table_succeed(123, int4range(1,11));
 statement: create function outparam_fail(i anyelement, out r anyrange, out t text)                        +
   as $$ select '[1,10]', 'foo' $$ language sql;
 statement: create function inoutparam_fail(inout i anyelement, out r anyrange)                            +
   as $$ select $1, '[1,10]' $$ language sql;
 statement: create function table_fail(i anyelement) returns table(i anyelement, r anyrange)               +
   as $$ select $1, '[1,10]' $$ language sql;

