LOG:  statement: select message from postgres_log where query is null;
 statement: DROP TABLE test_exists;
 statement: DROP TABLE IF EXISTS test_exists;
 statement: CREATE TABLE test_exists (a int, b text);
 statement: DROP VIEW test_view_exists;
 statement: DROP VIEW IF EXISTS test_view_exists;
 statement: CREATE VIEW test_view_exists AS select * from test_exists;
 statement: DROP VIEW IF EXISTS test_view_exists;
 statement: DROP VIEW test_view_exists;
 statement: DROP INDEX test_index_exists;
 statement: DROP INDEX IF EXISTS test_index_exists;
 statement: CREATE INDEX test_index_exists on test_exists(a);
 statement: DROP INDEX IF EXISTS test_index_exists;
 statement: DROP INDEX test_index_exists;
 statement: DROP SEQUENCE test_sequence_exists;
 statement: DROP SEQUENCE IF EXISTS test_sequence_exists;
 statement: CREATE SEQUENCE test_sequence_exists;
 statement: DROP SEQUENCE IF EXISTS test_sequence_exists;
 statement: DROP SEQUENCE test_sequence_exists;
 statement: DROP SCHEMA test_schema_exists;
 statement: DROP SCHEMA IF EXISTS test_schema_exists;
 statement: CREATE SCHEMA test_schema_exists;
 statement: DROP SCHEMA IF EXISTS test_schema_exists;
 statement: DROP SCHEMA test_schema_exists;
 statement: DROP TYPE test_type_exists;
 statement: DROP TYPE IF EXISTS test_type_exists;
 statement: CREATE type test_type_exists as (a int, b text);
 statement: DROP TYPE IF EXISTS test_type_exists;
 statement: DROP TYPE test_type_exists;
 statement: DROP DOMAIN test_domain_exists;
 statement: DROP DOMAIN IF EXISTS test_domain_exists;
 statement: CREATE domain test_domain_exists as int not null check (value > 0);
 statement: DROP DOMAIN IF EXISTS test_domain_exists;
 statement: DROP DOMAIN test_domain_exists;
 statement: CREATE USER tu1;
 statement: CREATE ROLE tr1;
 statement: CREATE GROUP tg1;
 statement: DROP USER tu2;
 statement: DROP USER IF EXISTS tu1, tu2;
 statement: DROP USER tu1;
 statement: DROP ROLE tr2;
 statement: DROP ROLE IF EXISTS tr1, tr2;
 statement: DROP ROLE tr1;
 statement: DROP GROUP tg2;
 statement: DROP GROUP IF EXISTS tg1, tg2;
 statement: DROP GROUP tg1;
 statement: DROP COLLATION IF EXISTS test_collation_exists;
 statement: DROP CONVERSION test_conversion_exists;
 statement: DROP CONVERSION IF EXISTS test_conversion_exists;
 statement: CREATE CONVERSION test_conversion_exists                                             +
     FOR 'LATIN1' TO 'UTF8' FROM iso8859_1_to_utf8;
 statement: DROP CONVERSION test_conversion_exists;
 statement: DROP TEXT SEARCH PARSER test_tsparser_exists;
 statement: DROP TEXT SEARCH PARSER IF EXISTS test_tsparser_exists;
 statement: DROP TEXT SEARCH DICTIONARY test_tsdict_exists;
 statement: DROP TEXT SEARCH DICTIONARY IF EXISTS test_tsdict_exists;
 statement: CREATE TEXT SEARCH DICTIONARY test_tsdict_exists (                                   +
         Template=ispell,                                                                        +
         DictFile=ispell_sample,                                                                 +
         AffFile=ispell_sample                                                                   +
 );
 statement: DROP TEXT SEARCH DICTIONARY test_tsdict_exists;
 statement: DROP TEXT SEARCH TEMPLATE test_tstemplate_exists;
 statement: DROP TEXT SEARCH TEMPLATE IF EXISTS test_tstemplate_exists;
 statement: DROP TEXT SEARCH CONFIGURATION test_tsconfig_exists;
 statement: DROP TEXT SEARCH CONFIGURATION IF EXISTS test_tsconfig_exists;
 statement: CREATE TEXT SEARCH CONFIGURATION test_tsconfig_exists (COPY=english);
 statement: DROP TEXT SEARCH CONFIGURATION test_tsconfig_exists;
 statement: DROP EXTENSION test_extension_exists;
 statement: DROP EXTENSION IF EXISTS test_extension_exists;
 statement: DROP FUNCTION test_function_exists();
 statement: DROP FUNCTION IF EXISTS test_function_exists();
 statement: DROP FUNCTION test_function_exists(int, text, int[]);
 statement: DROP FUNCTION IF EXISTS test_function_exists(int, text, int[]);
 statement: DROP AGGREGATE test_aggregate_exists(*);
 statement: DROP AGGREGATE IF EXISTS test_aggregate_exists(*);
 statement: DROP AGGREGATE test_aggregate_exists(int);
 statement: DROP AGGREGATE IF EXISTS test_aggregate_exists(int);
 statement: DROP OPERATOR @#@ (int, int);
 statement: DROP OPERATOR IF EXISTS @#@ (int, int);
 statement: CREATE OPERATOR @#@                                                                  +
         (leftarg = int8, rightarg = int8, procedure = int8xor);
 statement: DROP OPERATOR @#@ (int8, int8);
 statement: DROP LANGUAGE test_language_exists;
 statement: DROP LANGUAGE IF EXISTS test_language_exists;
 statement: DROP CAST (text AS text);
 statement: DROP CAST IF EXISTS (text AS text);
 statement: DROP TRIGGER test_trigger_exists ON test_exists;
 statement: DROP TRIGGER IF EXISTS test_trigger_exists ON test_exists;
 statement: DROP TRIGGER test_trigger_exists ON no_such_table;
 statement: DROP TRIGGER IF EXISTS test_trigger_exists ON no_such_table;
 statement: DROP TRIGGER test_trigger_exists ON no_such_schema.no_such_table;
 statement: DROP TRIGGER IF EXISTS test_trigger_exists ON no_such_schema.no_such_table;
 statement: CREATE TRIGGER test_trigger_exists                                                   +
     BEFORE UPDATE ON test_exists                                                                +
     FOR EACH ROW EXECUTE PROCEDURE suppress_redundant_updates_trigger();
 statement: DROP TRIGGER test_trigger_exists ON test_exists;
 statement: DROP RULE test_rule_exists ON test_exists;
 statement: DROP RULE IF EXISTS test_rule_exists ON test_exists;
 statement: DROP RULE test_rule_exists ON no_such_table;
 statement: DROP RULE IF EXISTS test_rule_exists ON no_such_table;
 statement: DROP RULE test_rule_exists ON no_such_schema.no_such_table;
 statement: DROP RULE IF EXISTS test_rule_exists ON no_such_schema.no_such_table;
 statement: CREATE RULE test_rule_exists AS ON INSERT TO test_exists                             +
     DO INSTEAD                                                                                  +
     INSERT INTO test_exists VALUES (NEW.a, NEW.b || NEW.a::text);
 statement: DROP RULE test_rule_exists ON test_exists;
 statement: DROP FOREIGN DATA WRAPPER test_fdw_exists;
 statement: DROP FOREIGN DATA WRAPPER IF EXISTS test_fdw_exists;
 statement: DROP SERVER test_server_exists;
 statement: DROP SERVER IF EXISTS test_server_exists;
 statement: DROP OPERATOR CLASS test_operator_class USING btree;
 statement: DROP OPERATOR CLASS IF EXISTS test_operator_class USING btree;
 statement: DROP OPERATOR CLASS test_operator_class USING no_such_am;
 statement: DROP OPERATOR CLASS IF EXISTS test_operator_class USING no_such_am;
 statement: DROP OPERATOR FAMILY test_operator_family USING btree;
 statement: DROP OPERATOR FAMILY IF EXISTS test_operator_family USING btree;
 statement: DROP OPERATOR FAMILY test_operator_family USING no_such_am;
 statement: DROP OPERATOR FAMILY IF EXISTS test_operator_family USING no_such_am;
 statement: DROP TABLE IF EXISTS test_exists;
 statement: DROP TABLE test_exists;
 statement: DROP AGGREGATE IF EXISTS no_such_schema.foo(int);
 statement: DROP AGGREGATE IF EXISTS foo(no_such_type);
 statement: DROP AGGREGATE IF EXISTS foo(no_such_schema.no_such_type);
 statement: DROP CAST IF EXISTS (INTEGER AS no_such_type2);
 statement: DROP CAST IF EXISTS (no_such_type1 AS INTEGER);
 statement: DROP CAST IF EXISTS (INTEGER AS no_such_schema.bar);
 statement: DROP CAST IF EXISTS (no_such_schema.foo AS INTEGER);
 statement: DROP COLLATION IF EXISTS no_such_schema.foo;
 statement: DROP CONVERSION IF EXISTS no_such_schema.foo;
 statement: DROP DOMAIN IF EXISTS no_such_schema.foo;
 statement: DROP FOREIGN TABLE IF EXISTS no_such_schema.foo;
 statement: DROP FUNCTION IF EXISTS no_such_schema.foo();
 statement: DROP FUNCTION IF EXISTS foo(no_such_type);
 statement: DROP FUNCTION IF EXISTS foo(no_such_schema.no_such_type);
 statement: DROP INDEX IF EXISTS no_such_schema.foo;
 statement: DROP MATERIALIZED VIEW IF EXISTS no_such_schema.foo;
 statement: DROP OPERATOR IF EXISTS no_such_schema.+ (int, int);
 statement: DROP OPERATOR IF EXISTS + (no_such_type, no_such_type);
 statement: DROP OPERATOR IF EXISTS + (no_such_schema.no_such_type, no_such_schema.no_such_type);
 statement: DROP OPERATOR IF EXISTS # (NONE, no_such_schema.no_such_type);
 statement: DROP OPERATOR CLASS IF EXISTS no_such_schema.widget_ops USING btree;
 statement: DROP OPERATOR FAMILY IF EXISTS no_such_schema.float_ops USING btree;
 statement: DROP RULE IF EXISTS foo ON no_such_schema.bar;
 statement: DROP SEQUENCE IF EXISTS no_such_schema.foo;
 statement: DROP TABLE IF EXISTS no_such_schema.foo;
 statement: DROP TEXT SEARCH CONFIGURATION IF EXISTS no_such_schema.foo;
 statement: DROP TEXT SEARCH DICTIONARY IF EXISTS no_such_schema.foo;
 statement: DROP TEXT SEARCH PARSER IF EXISTS no_such_schema.foo;
 statement: DROP TEXT SEARCH TEMPLATE IF EXISTS no_such_schema.foo;
 statement: DROP TRIGGER IF EXISTS foo ON no_such_schema.bar;
 statement: DROP TYPE IF EXISTS no_such_schema.foo;
 statement: DROP VIEW IF EXISTS no_such_schema.foo;

