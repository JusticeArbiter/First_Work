LOG:  statement: select message from postgres_log where query is null;
 statement: BEGIN;
 statement: SELECT *                                                                                   +
    INTO TABLE xacttest                                                                                +
    FROM aggtest;
 statement: INSERT INTO xacttest (a, b) VALUES (777, 777.777);
 statement: END;
 statement: SELECT a FROM xacttest WHERE a > 100;
 statement: BEGIN;
 statement: CREATE TABLE disappear (a int4);
 statement: DELETE FROM aggtest;
 statement: SELECT * FROM aggtest;
 statement: ABORT;
 statement: SELECT oid FROM pg_class WHERE relname = 'disappear';
 statement: SELECT * FROM aggtest;
 statement: CREATE TABLE writetest (a int);
 statement: CREATE TEMPORARY TABLE temptest (a int);
 statement: BEGIN;
 statement: SET TRANSACTION ISOLATION LEVEL SERIALIZABLE, READ ONLY, DEFERRABLE;
 statement: SELECT * FROM writetest;
 statement: SET TRANSACTION READ WRITE;
 statement: COMMIT;
 statement: BEGIN;
 statement: SET TRANSACTION READ ONLY;
 statement: SET TRANSACTION READ WRITE;
 statement: SET TRANSACTION READ ONLY;
 statement: SELECT * FROM writetest;
 statement: SAVEPOINT x;
 statement: SET TRANSACTION READ ONLY;
 statement: SELECT * FROM writetest;
 statement: SET TRANSACTION READ ONLY;
 statement: SET TRANSACTION READ WRITE;
 statement: COMMIT;
 statement: BEGIN;
 statement: SET TRANSACTION READ WRITE;
 statement: SAVEPOINT x;
 statement: SET TRANSACTION READ WRITE;
 statement: SET TRANSACTION READ ONLY;
 statement: SELECT * FROM writetest;
 statement: SET TRANSACTION READ ONLY;
 statement: SET TRANSACTION READ WRITE;
 statement: COMMIT;
 statement: BEGIN;
 statement: SET TRANSACTION READ WRITE;
 statement: SAVEPOINT x;
 statement: SET TRANSACTION READ ONLY;
 statement: SELECT * FROM writetest;
 statement: ROLLBACK TO SAVEPOINT x;
 statement: SHOW transaction_read_only;
 statement: SAVEPOINT y;
 statement: SET TRANSACTION READ ONLY;
 statement: SELECT * FROM writetest;
 statement: RELEASE SAVEPOINT y;
 statement: SHOW transaction_read_only;
 statement: COMMIT;
 statement: SET SESSION CHARACTERISTICS AS TRANSACTION READ ONLY;
 statement: DROP TABLE writetest;
 statement: INSERT INTO writetest VALUES (1);
 statement: SELECT * FROM writetest;
 statement: DELETE FROM temptest;
 statement: UPDATE temptest SET a = 0 FROM writetest WHERE temptest.a = 1 AND writetest.a = temptest.a;
 statement: PREPARE test AS UPDATE writetest SET a = 0;
 statement: EXECUTE test;
 statement: SELECT * FROM writetest, temptest;
 statement: CREATE TABLE test AS SELECT * FROM writetest;
 statement: START TRANSACTION READ WRITE;
 statement: DROP TABLE writetest;
 statement: COMMIT;
 statement: SET SESSION CHARACTERISTICS AS TRANSACTION READ WRITE;
 statement: CREATE TABLE foobar (a int);
 statement: BEGIN;
 statement: CREATE TABLE foo (a int);
 statement: SAVEPOINT one;
 statement: DROP TABLE foo;
 statement: CREATE TABLE bar (a int);
 statement: ROLLBACK TO SAVEPOINT one;
 statement: RELEASE SAVEPOINT one;
 statement: SAVEPOINT two;
 statement: CREATE TABLE baz (a int);
 statement: RELEASE SAVEPOINT two;
 statement: drop TABLE foobar;
 statement: CREATE TABLE barbaz (a int);
 statement: COMMIT;
 statement: SELECT * FROM foo;
 statement: SELECT * FROM bar;
 statement: SELECT * FROM barbaz;
 statement: SELECT * FROM baz;
 statement: BEGIN;
 statement: INSERT INTO foo VALUES (1);
 statement: SAVEPOINT one;
 statement: INSERT into bar VALUES (1);
 statement: ROLLBACK TO one;
 statement: RELEASE SAVEPOINT one;
 statement: SAVEPOINT two;
 statement: INSERT into barbaz VALUES (1);
 statement: RELEASE two;
 statement: SAVEPOINT three;
 statement: SAVEPOINT four;
 statement: INSERT INTO foo VALUES (2);
 statement: RELEASE SAVEPOINT four;
 statement: ROLLBACK TO SAVEPOINT three;
 statement: RELEASE SAVEPOINT three;
 statement: INSERT INTO foo VALUES (3);
 statement: COMMIT;
 statement: SELECT * FROM foo;
 statement: SELECT * FROM barbaz;
 statement: BEGIN;
 statement: SAVEPOINT one;
 statement: SELECT foo;
 statement: ROLLBACK TO SAVEPOINT one;
 statement: RELEASE SAVEPOINT one;
 statement: SAVEPOINT two;
 statement: CREATE TABLE savepoints (a int);
 statement: SAVEPOINT three;
 statement: INSERT INTO savepoints VALUES (1);
 statement: SAVEPOINT four;
 statement: INSERT INTO savepoints VALUES (2);
 statement: SAVEPOINT five;
 statement: INSERT INTO savepoints VALUES (3);
 statement: ROLLBACK TO SAVEPOINT five;
 statement: COMMIT;
 statement: COMMIT;
 statement: SELECT * FROM savepoints;
 statement: BEGIN;
 statement: SAVEPOINT one;
 statement: DELETE FROM savepoints WHERE a=1;
 statement: RELEASE SAVEPOINT one;
 statement: SAVEPOINT two;
 statement: DELETE FROM savepoints WHERE a=1;
 statement: SAVEPOINT three;
 statement: DELETE FROM savepoints WHERE a=2;
 statement: ROLLBACK;
 statement: COMMIT;
 statement: SELECT * FROM savepoints;
 statement: BEGIN;
 statement: INSERT INTO savepoints VALUES (4);
 statement: SAVEPOINT one;
 statement: INSERT INTO savepoints VALUES (5);
 statement: SELECT foo;
 statement: COMMIT;
 statement: SELECT * FROM savepoints;
 statement: BEGIN;
 statement: INSERT INTO savepoints VALUES (6);
 statement: SAVEPOINT one;
 statement: INSERT INTO savepoints VALUES (7);
 statement: RELEASE SAVEPOINT one;
 statement: INSERT INTO savepoints VALUES (8);
 statement: COMMIT;
 statement: SELECT a.xmin = b.xmin FROM savepoints a, savepoints b WHERE a.a=6 AND b.a=8;
 statement: SELECT a.xmin = b.xmin FROM savepoints a, savepoints b WHERE a.a=6 AND b.a=7;
 statement: BEGIN;
 statement: INSERT INTO savepoints VALUES (9);
 statement: SAVEPOINT one;
 statement: INSERT INTO savepoints VALUES (10);
 statement: ROLLBACK TO SAVEPOINT one;
 statement: INSERT INTO savepoints VALUES (11);
 statement: COMMIT;
 statement: SELECT a FROM savepoints WHERE a in (9, 10, 11);
 statement: SELECT a.xmin = b.xmin FROM savepoints a, savepoints b WHERE a.a=9 AND b.a=11;
 statement: BEGIN;
 statement: INSERT INTO savepoints VALUES (12);
 statement: SAVEPOINT one;
 statement: INSERT INTO savepoints VALUES (13);
 statement: SAVEPOINT two;
 statement: INSERT INTO savepoints VALUES (14);
 statement: ROLLBACK TO SAVEPOINT one;
 statement: INSERT INTO savepoints VALUES (15);
 statement: SAVEPOINT two;
 statement: INSERT INTO savepoints VALUES (16);
 statement: SAVEPOINT three;
 statement: INSERT INTO savepoints VALUES (17);
 statement: COMMIT;
 statement: SELECT a FROM savepoints WHERE a BETWEEN 12 AND 17;
 statement: BEGIN;
 statement: INSERT INTO savepoints VALUES (18);
 statement: SAVEPOINT one;
 statement: INSERT INTO savepoints VALUES (19);
 statement: SAVEPOINT two;
 statement: INSERT INTO savepoints VALUES (20);
 statement: ROLLBACK TO SAVEPOINT one;
 statement: INSERT INTO savepoints VALUES (21);
 statement: ROLLBACK TO SAVEPOINT one;
 statement: INSERT INTO savepoints VALUES (22);
 statement: COMMIT;
 statement: SELECT a FROM savepoints WHERE a BETWEEN 18 AND 22;
 statement: DROP TABLE savepoints;
 statement: SAVEPOINT one;
 statement: ROLLBACK TO SAVEPOINT one;
 statement: RELEASE SAVEPOINT one;
 statement: BEGIN;
 statement: SAVEPOINT one;
 statement: SELECT 0/0;
 statement: SAVEPOINT two;
 statement: RELEASE SAVEPOINT one;
 statement: ROLLBACK TO SAVEPOINT one;
 statement: SELECT 1;
 statement: COMMIT;
 statement: SELECT 1;
 statement: BEGIN;
 statement: DECLARE c CURSOR FOR SELECT unique2 FROM tenk1 ORDER BY unique2;
 statement: SAVEPOINT one;
 statement: FETCH 10 FROM c;
 statement: ROLLBACK TO SAVEPOINT one;
 statement: FETCH 10 FROM c;
 statement: RELEASE SAVEPOINT one;
 statement: FETCH 10 FROM c;
 statement: CLOSE c;
 statement: DECLARE c CURSOR FOR SELECT unique2/0 FROM tenk1 ORDER BY unique2;
 statement: SAVEPOINT two;
 statement: FETCH 10 FROM c;
 statement: ROLLBACK TO SAVEPOINT two;
 statement: FETCH 10 FROM c;
 statement: ROLLBACK TO SAVEPOINT two;
 statement: RELEASE SAVEPOINT two;
 statement: FETCH 10 FROM c;
 statement: COMMIT;
 statement: select * from xacttest;
 statement: create or replace function max_xacttest() returns smallint language sql as                 +
 'select max(a) from xacttest' stable;
 statement: begin;
 statement: update xacttest set a = max_xacttest() + 10 where a > 0;
 statement: select * from xacttest;
 statement: rollback;
 statement: create or replace function max_xacttest() returns smallint language sql as                 +
 'select max(a) from xacttest' volatile;
 statement: begin;
 statement: update xacttest set a = max_xacttest() + 10 where a > 0;
 statement: select * from xacttest;
 statement: rollback;
 statement: create or replace function max_xacttest() returns smallint language plpgsql as             +
 'begin return max(a) from xacttest; end' stable;
 statement: begin;
 statement: update xacttest set a = max_xacttest() + 10 where a > 0;
 statement: select * from xacttest;
 statement: rollback;
 statement: create or replace function max_xacttest() returns smallint language plpgsql as             +
 'begin return max(a) from xacttest; end' volatile;
 statement: begin;
 statement: update xacttest set a = max_xacttest() + 10 where a > 0;
 statement: select * from xacttest;
 statement: rollback;
 statement: BEGIN;
 statement: savepoint x;
 statement: CREATE TABLE koju (a INT UNIQUE);
 statement: INSERT INTO koju VALUES (1);
 statement: INSERT INTO koju VALUES (1);
 statement: rollback to x;
 statement: CREATE TABLE koju (a INT UNIQUE);
 statement: INSERT INTO koju VALUES (1);
 statement: INSERT INTO koju VALUES (1);
 statement: ROLLBACK;
 statement: DROP TABLE foo;
 statement: DROP TABLE baz;
 statement: DROP TABLE barbaz;
 statement: create function inverse(int) returns float8 as                                             +
 $$                                                                                                    +
 begin                                                                                                 +
   analyze revalidate_bug;                                                                             +
   return 1::float8/$1;                                                                                +
 exception                                                                                             +
   when division_by_zero then return 0;                                                                +
 end$$ language plpgsql volatile;
 statement: create table revalidate_bug (c float8 unique);
 statement: insert into revalidate_bug values (1);
 statement: insert into revalidate_bug values (inverse(0));
 statement: drop table revalidate_bug;
 statement: drop function inverse(int);
 statement: begin;
 statement: savepoint x;
 statement: create table abc (a int);
 statement: insert into abc values (5);
 statement: insert into abc values (10);
 statement: declare foo cursor for select * from abc;
 statement: fetch from foo;
 statement: rollback to x;
 statement: fetch from foo;
 statement: commit;
 statement: begin;
 statement: create table abc (a int);
 statement: insert into abc values (5);
 statement: insert into abc values (10);
 statement: insert into abc values (15);
 statement: declare foo cursor for select * from abc;
 statement: fetch from foo;
 statement: savepoint x;
 statement: fetch from foo;
 statement: rollback to x;
 statement: fetch from foo;
 statement: abort;
 statement: CREATE FUNCTION invert(x float8) RETURNS float8 LANGUAGE plpgsql AS                        +
 $$ begin return 1/x; end $$;
 statement: CREATE FUNCTION create_temp_tab() RETURNS text                                             +
 LANGUAGE plpgsql AS $$                                                                                +
 BEGIN                                                                                                 +
   CREATE TEMP TABLE new_table (f1 float8);                                                            +
   -- case of interest is that we fail while holding an open                                           +
   -- relcache reference to new_table                                                                  +
   INSERT INTO new_table SELECT invert(0.0);                                                           +
   RETURN 'foo';                                                                                       +
 END $$;
 statement: BEGIN;
 statement: DECLARE ok CURSOR FOR SELECT * FROM int8_tbl;
 statement: DECLARE ctt CURSOR FOR SELECT create_temp_tab();
 statement: FETCH ok;
 statement: SAVEPOINT s1;
 statement: FETCH ok;
 statement: FETCH ctt;
 statement: ROLLBACK TO s1;
 statement: FETCH ok;
 statement: FETCH ctt;
 statement: COMMIT;
 statement: DROP FUNCTION create_temp_tab();
 statement: DROP FUNCTION invert(x float8);
 statement: begin;
 statement: select 1/0;
 statement: rollback to X;

