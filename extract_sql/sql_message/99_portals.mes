LOG:  statement: select message from postgres_log where query is null;
 statement: BEGIN;
 statement: DECLARE foo1 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
 statement: DECLARE foo2 SCROLL CURSOR FOR SELECT * FROM tenk2;
 statement: DECLARE foo3 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
 statement: DECLARE foo4 SCROLL CURSOR FOR SELECT * FROM tenk2;
 statement: DECLARE foo5 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
 statement: DECLARE foo6 SCROLL CURSOR FOR SELECT * FROM tenk2;
 statement: DECLARE foo7 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
 statement: DECLARE foo8 SCROLL CURSOR FOR SELECT * FROM tenk2;
 statement: DECLARE foo9 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
 statement: DECLARE foo10 SCROLL CURSOR FOR SELECT * FROM tenk2;
 statement: DECLARE foo11 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
 statement: DECLARE foo12 SCROLL CURSOR FOR SELECT * FROM tenk2;
 statement: DECLARE foo13 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
 statement: DECLARE foo14 SCROLL CURSOR FOR SELECT * FROM tenk2;
 statement: DECLARE foo15 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
 statement: DECLARE foo16 SCROLL CURSOR FOR SELECT * FROM tenk2;
 statement: DECLARE foo17 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
 statement: DECLARE foo18 SCROLL CURSOR FOR SELECT * FROM tenk2;
 statement: DECLARE foo19 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
 statement: DECLARE foo20 SCROLL CURSOR FOR SELECT * FROM tenk2;
 statement: DECLARE foo21 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
 statement: DECLARE foo22 SCROLL CURSOR FOR SELECT * FROM tenk2;
 statement: DECLARE foo23 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
 statement: FETCH 1 in foo1;
 statement: FETCH 2 in foo2;
 statement: FETCH 3 in foo3;
 statement: FETCH 4 in foo4;
 statement: FETCH 5 in foo5;
 statement: FETCH 6 in foo6;
 statement: FETCH 7 in foo7;
 statement: FETCH 8 in foo8;
 statement: FETCH 9 in foo9;
 statement: FETCH 10 in foo10;
 statement: FETCH 11 in foo11;
 statement: FETCH 12 in foo12;
 statement: FETCH 13 in foo13;
 statement: FETCH 14 in foo14;
 statement: FETCH 15 in foo15;
 statement: FETCH 16 in foo16;
 statement: FETCH 17 in foo17;
 statement: FETCH 18 in foo18;
 statement: FETCH 19 in foo19;
 statement: FETCH 20 in foo20;
 statement: FETCH 21 in foo21;
 statement: FETCH 22 in foo22;
 statement: FETCH 23 in foo23;
 statement: FETCH backward 1 in foo23;
 statement: FETCH backward 2 in foo22;
 statement: FETCH backward 3 in foo21;
 statement: FETCH backward 4 in foo20;
 statement: FETCH backward 5 in foo19;
 statement: FETCH backward 6 in foo18;
 statement: FETCH backward 7 in foo17;
 statement: FETCH backward 8 in foo16;
 statement: FETCH backward 9 in foo15;
 statement: FETCH backward 10 in foo14;
 statement: FETCH backward 11 in foo13;
 statement: FETCH backward 12 in foo12;
 statement: FETCH backward 13 in foo11;
 statement: FETCH backward 14 in foo10;
 statement: FETCH backward 15 in foo9;
 statement: FETCH backward 16 in foo8;
 statement: FETCH backward 17 in foo7;
 statement: FETCH backward 18 in foo6;
 statement: FETCH backward 19 in foo5;
 statement: FETCH backward 20 in foo4;
 statement: FETCH backward 21 in foo3;
 statement: FETCH backward 22 in foo2;
 statement: FETCH backward 23 in foo1;
 statement: CLOSE foo1;
 statement: CLOSE foo2;
 statement: CLOSE foo3;
 statement: CLOSE foo4;
 statement: CLOSE foo5;
 statement: CLOSE foo6;
 statement: CLOSE foo7;
 statement: CLOSE foo8;
 statement: CLOSE foo9;
 statement: CLOSE foo10;
 statement: CLOSE foo11;
 statement: CLOSE foo12;
 statement: SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors ORDER BY 1;
 statement: END;
 statement: SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors;
 statement: BEGIN;
 statement: DECLARE foo24 NO SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
 statement: FETCH 1 FROM foo24;
 statement: FETCH BACKWARD 1 FROM foo24;
 statement: END;
 statement: SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors;
 statement: BEGIN;
 statement: DECLARE foo25 SCROLL CURSOR WITH HOLD FOR SELECT * FROM tenk2;
 statement: FETCH FROM foo25;
 statement: FETCH FROM foo25;
 statement: COMMIT;
 statement: FETCH FROM foo25;
 statement: FETCH BACKWARD FROM foo25;
 statement: FETCH ABSOLUTE -1 FROM foo25;
 statement: SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors;
 statement: CLOSE foo25;
 statement: BEGIN;
 statement: DECLARE foo26 CURSOR WITH HOLD FOR SELECT * FROM tenk1 ORDER BY unique2;
 statement: ROLLBACK;
 statement: FETCH FROM foo26;
 statement: BEGIN;
 statement: CREATE FUNCTION declares_cursor(text)                                                       +
    RETURNS void                                                                                        +
    AS 'DECLARE c CURSOR FOR SELECT stringu1 FROM tenk1 WHERE stringu1 LIKE $1;'                        +
    LANGUAGE SQL;
 statement: SELECT declares_cursor('AB%');
 statement: FETCH ALL FROM c;
 statement: ROLLBACK;
 statement: create temp table tt1(f1 int);
 statement: create function count_tt1_v() returns int8 as                                               +
 'select count(*) from tt1' language sql volatile;
 statement: create function count_tt1_s() returns int8 as                                               +
 'select count(*) from tt1' language sql stable;
 statement: begin;
 statement: insert into tt1 values(1);
 statement: declare c1 cursor for select count_tt1_v(), count_tt1_s();
 statement: insert into tt1 values(2);
 statement: fetch all from c1;
 statement: rollback;
 statement: begin;
 statement: insert into tt1 values(1);
 statement: declare c2 cursor with hold for select count_tt1_v(), count_tt1_s();
 statement: insert into tt1 values(2);
 statement: commit;
 statement: delete from tt1;
 statement: fetch all from c2;
 statement: drop function count_tt1_v();
 statement: drop function count_tt1_s();
 statement: BEGIN;
 statement: SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors;
 statement: DECLARE bc BINARY CURSOR FOR SELECT * FROM tenk1;
 statement: SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors ORDER BY 1;
 statement: ROLLBACK;
 statement: PREPARE cprep AS                                                                            +
   SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors;
 statement: EXECUTE cprep;
 statement: SELECT name FROM pg_cursors ORDER BY 1;
 statement: CLOSE ALL;
 statement: SELECT name FROM pg_cursors ORDER BY 1;
 statement: BEGIN;
 statement: DECLARE foo1 CURSOR WITH HOLD FOR SELECT 1;
 statement: DECLARE foo2 CURSOR WITHOUT HOLD FOR SELECT 1;
 statement: SELECT name FROM pg_cursors ORDER BY 1;
 statement: CLOSE ALL;
 statement: SELECT name FROM pg_cursors ORDER BY 1;
 statement: COMMIT;
 statement: CREATE TEMP TABLE uctest(f1 int, f2 text);
 statement: INSERT INTO uctest VALUES (1, 'one'), (2, 'two'), (3, 'three');
 statement: SELECT * FROM uctest;
 statement: BEGIN;
 statement: DECLARE c1 CURSOR FOR SELECT * FROM uctest;
 statement: FETCH 2 FROM c1;
 statement: DELETE FROM uctest WHERE CURRENT OF c1;
 statement: SELECT * FROM uctest;
 statement: FETCH ALL FROM c1;
 statement: MOVE BACKWARD ALL IN c1;
 statement: FETCH ALL FROM c1;
 statement: COMMIT;
 statement: SELECT * FROM uctest;
 statement: BEGIN;
 statement: DECLARE c1 CURSOR FOR SELECT * FROM uctest FOR UPDATE;
 statement: FETCH c1;
 statement: UPDATE uctest SET f1 = 8 WHERE CURRENT OF c1;
 statement: SELECT * FROM uctest;
 statement: COMMIT;
 statement: SELECT * FROM uctest;
 statement: BEGIN;
 statement: DECLARE c1 CURSOR FOR SELECT * FROM uctest;
 statement: FETCH c1;
 statement: UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
 statement: SELECT * FROM uctest;
 statement: UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
 statement: SELECT * FROM uctest;
 statement: FETCH RELATIVE 0 FROM c1;
 statement: DELETE FROM uctest WHERE CURRENT OF c1;
 statement: SELECT * FROM uctest;
 statement: DELETE FROM uctest WHERE CURRENT OF c1;
 statement: SELECT * FROM uctest;
 statement: UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
 statement: SELECT * FROM uctest;
 statement: FETCH RELATIVE 0 FROM c1;
 statement: ROLLBACK;
 statement: SELECT * FROM uctest;
 statement: BEGIN;
 statement: DECLARE c1 CURSOR FOR SELECT * FROM uctest FOR UPDATE;
 statement: FETCH c1;
 statement: UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
 statement: SELECT * FROM uctest;
 statement: UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
 statement: SELECT * FROM uctest;
 statement: DELETE FROM uctest WHERE CURRENT OF c1;
 statement: SELECT * FROM uctest;
 statement: DELETE FROM uctest WHERE CURRENT OF c1;
 statement: SELECT * FROM uctest;
 statement: UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
 statement: SELECT * FROM uctest;
 statement: FETCH RELATIVE 0 FROM c1;
 statement: ROLLBACK;
 statement: SELECT * FROM uctest;
 statement: CREATE TEMP TABLE ucchild () inherits (uctest);
 statement: INSERT INTO ucchild values(100, 'hundred');
 statement: SELECT * FROM uctest;
 statement: BEGIN;
 statement: DECLARE c1 CURSOR FOR SELECT * FROM uctest FOR UPDATE;
 statement: FETCH 1 FROM c1;
 statement: UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
 statement: FETCH 1 FROM c1;
 statement: UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
 statement: FETCH 1 FROM c1;
 statement: UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
 statement: FETCH 1 FROM c1;
 statement: COMMIT;
 statement: SELECT * FROM uctest;
 statement: BEGIN;
 statement: DECLARE c1 CURSOR FOR SELECT * FROM uctest a, uctest b WHERE a.f1 = b.f1 + 5;
 statement: FETCH 1 FROM c1;
 statement: UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
 statement: ROLLBACK;
 statement: BEGIN;
 statement: DECLARE c1 CURSOR FOR SELECT * FROM uctest a, uctest b WHERE a.f1 = b.f1 + 5 FOR UPDATE;
 statement: FETCH 1 FROM c1;
 statement: UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
 statement: ROLLBACK;
 statement: BEGIN;
 statement: DECLARE c1 CURSOR FOR SELECT * FROM uctest a, uctest b WHERE a.f1 = b.f1 + 5 FOR SHARE OF a;
 statement: FETCH 1 FROM c1;
 statement: UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
 statement: SELECT * FROM uctest;
 statement: ROLLBACK;
 statement: DELETE FROM uctest WHERE CURRENT OF c1;
 statement: DECLARE cx CURSOR WITH HOLD FOR SELECT * FROM uctest;
 statement: DELETE FROM uctest WHERE CURRENT OF cx;
 statement: BEGIN;
 statement: DECLARE c CURSOR FOR SELECT * FROM tenk2;
 statement: DELETE FROM uctest WHERE CURRENT OF c;
 statement: ROLLBACK;
 statement: BEGIN;
 statement: DECLARE c CURSOR FOR SELECT * FROM tenk2 FOR SHARE;
 statement: DELETE FROM uctest WHERE CURRENT OF c;
 statement: ROLLBACK;
 statement: BEGIN;
 statement: DECLARE c CURSOR FOR SELECT * FROM tenk1 JOIN tenk2 USING (unique1);
 statement: DELETE FROM tenk1 WHERE CURRENT OF c;
 statement: ROLLBACK;
 statement: BEGIN;
 statement: DECLARE c CURSOR FOR SELECT f1,count(*) FROM uctest GROUP BY f1;
 statement: DELETE FROM uctest WHERE CURRENT OF c;
 statement: ROLLBACK;
 statement: BEGIN;
 statement: DECLARE c1 CURSOR FOR SELECT * FROM uctest;
 statement: DELETE FROM uctest WHERE CURRENT OF c1;
 statement: ROLLBACK;
 statement: BEGIN;
 statement: DECLARE c1 CURSOR FOR SELECT MIN(f1) FROM uctest FOR UPDATE;
 statement: ROLLBACK;
 statement: CREATE TEMP VIEW ucview AS SELECT * FROM uctest;
 statement: CREATE RULE ucrule AS ON DELETE TO ucview DO INSTEAD                                        +
   DELETE FROM uctest WHERE f1 = OLD.f1;
 statement: BEGIN;
 statement: DECLARE c1 CURSOR FOR SELECT * FROM ucview;
 statement: FETCH FROM c1;
 statement: DELETE FROM ucview WHERE CURRENT OF c1;
 statement: ROLLBACK;
 statement: BEGIN;
 statement: SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
 statement: CREATE TABLE cursor (a int);
 statement: INSERT INTO cursor VALUES (1);
 statement: DECLARE c1 NO SCROLL CURSOR FOR SELECT * FROM cursor FOR UPDATE;
 statement: UPDATE cursor SET a = 2;
 statement: FETCH ALL FROM c1;
 statement: COMMIT;
 statement: DROP TABLE cursor;
 statement: begin;
 statement: create function nochange(int) returns int                                                   +
   as 'select $1 limit 1' language sql stable;
 statement: declare c cursor for select * from int8_tbl limit nochange(3);
 statement: fetch all from c;
 statement: move backward all in c;
 statement: fetch all from c;
 statement: rollback;

