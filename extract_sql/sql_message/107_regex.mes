LOG:  statement: select message from postgres_log where query is null;
 statement: set standard_conforming_strings = on;
 statement: select 'bbbbb' ~ '^([bc])\1*$' as t;
 statement: select 'ccc' ~ '^([bc])\1*$' as t;
 statement: select 'xxx' ~ '^([bc])\1*$' as f;
 statement: select 'bbc' ~ '^([bc])\1*$' as f;
 statement: select 'b' ~ '^([bc])\1*$' as t;
 statement: select 'abc abc abc' ~ '^(\w+)( \1)+$' as t;
 statement: select 'abc abd abc' ~ '^(\w+)( \1)+$' as f;
 statement: select 'abc abc abd' ~ '^(\w+)( \1)+$' as f;
 statement: select 'abc abc abc' ~ '^(.+)( \1)+$' as t;
 statement: select 'abc abd abc' ~ '^(.+)( \1)+$' as f;
 statement: select 'abc abc abd' ~ '^(.+)( \1)+$' as f;
 statement: select substring('asd TO foo' from ' TO (([a-z0-9._]+|"([^"]+|"")+")+)');
 statement: select substring('a' from '((a))+');
 statement: select substring('a' from '((a)+)');
 statement: explain (costs off) select * from pg_proc where proname ~ 'abc';
 statement: explain (costs off) select * from pg_proc where proname ~ '^abc';
 statement: explain (costs off) select * from pg_proc where proname ~ '^abc$';
 statement: explain (costs off) select * from pg_proc where proname ~ '^abcd*e';
 statement: explain (costs off) select * from pg_proc where proname ~ '^abc+d';
 statement: explain (costs off) select * from pg_proc where proname ~ '^(abc)(def)';
 statement: explain (costs off) select * from pg_proc where proname ~ '^(abc)$';
 statement: explain (costs off) select * from pg_proc where proname ~ '^(abc)?d';
 statement: explain (costs off) select * from pg_proc where proname ~ '^abcd(x|(?=\w\w)q)';
 statement: select 'a' ~ '($|^)*';
 statement: select 'a' ~ '(^)+^';
 statement: select 'a' ~ '$($$)+';
 statement: select 'a' ~ '($^)+';
 statement: select 'a' ~ '(^$)*';
 statement: select 'aa bb cc' ~ '(^(?!aa))+';
 statement: select 'aa x' ~ '(^(?!aa)(?!bb)(?!cc))+';
 statement: select 'bb x' ~ '(^(?!aa)(?!bb)(?!cc))+';
 statement: select 'cc x' ~ '(^(?!aa)(?!bb)(?!cc))+';
 statement: select 'dd x' ~ '(^(?!aa)(?!bb)(?!cc))+';
 statement: select 'a' ~ '((((((a)*)*)*)*)*)*';
 statement: select 'a' ~ '((((((a+|)+|)+|)+|)+|)+|)';
 statement: select 'x' ~ 'abcd(\m)+xyz';
 statement: select 'a' ~ '^abcd*(((((^(a c(e?d)a+|)+|)+|)+|)+|a)+|)';
 statement: select 'x' ~ 'a^(^)bcd*xy(((((($a+|)+|)+|)+$|)+|)+|)^$';
 statement: select 'x' ~ 'xyz(\Y\Y)+';
 statement: select 'x' ~ 'x|(?:\M)+';
 statement: select 'x' ~ repeat('x*y*z*', 1000);
 statement: select 'Programmer' ~ '(\w).*?\1' as t;
 statement: select regexp_matches('Programmer', '(\w)(.*?\1)', 'g');
 statement: select regexp_matches('foo/bar/baz',                                           +
                       '^([^/]+?)(?:/([^/]+?))(?:/([^/]+?))?$', '');
 statement: select 'a' ~ '$()|^\1';
 statement: select 'a' ~ '.. ()|\1';
 statement: select 'a' ~ '()*\1';
 statement: select 'a' ~ '()+\1';
 statement: select 'xyz' ~ 'x(\w)(?=\1)';
 statement: select 'xyz' ~ 'x(\w)(?=(\1))';
 statement: select 'a' ~ '\x7fffffff';

