LOG:  statement: select message from postgres_log where query is null;
 statement: CREATE OR REPLACE FUNCTION chkrolattr()                                                +
  RETURNS TABLE ("role" name, rolekeyword text, canlogin bool, replication bool)                   +
  AS $$                                                                                            +
 SELECT r.rolname, v.keyword, r.rolcanlogin, r.rolreplication                                      +
  FROM pg_roles r                                                                                  +
  JOIN (VALUES(CURRENT_USER, 'current_user'),                                                      +
              (SESSION_USER, 'session_user'),                                                      +
              ('current_user', '-'),                                                               +
              ('session_user', '-'),                                                               +
              ('Public', '-'),                                                                     +
              ('None', '-'))                                                                       +
       AS v(uname, keyword)                                                                        +
       ON (r.rolname = v.uname)                                                                    +
  ORDER BY 1;                                                                                      +
 $$ LANGUAGE SQL;
 statement: CREATE OR REPLACE FUNCTION chksetconfig()                                              +
  RETURNS TABLE (db name, "role" name, rolkeyword text, setconfig text[])                          +
  AS $$                                                                                            +
 SELECT COALESCE(d.datname, 'ALL'), COALESCE(r.rolname, 'ALL'),                                    +
            COALESCE(v.keyword, '-'), s.setconfig                                                  +
  FROM pg_db_role_setting s                                                                        +
  LEFT JOIN pg_roles r ON (r.oid = s.setrole)                                                      +
  LEFT JOIN pg_database d ON (d.oid = s.setdatabase)                                               +
  LEFT JOIN (VALUES(CURRENT_USER, 'current_user'),                                                 +
              (SESSION_USER, 'session_user'))                                                      +
       AS v(uname, keyword)                                                                        +
       ON (r.rolname = v.uname)                                                                    +
    WHERE (r.rolname) IN ('Public', 'current_user', 'testrol1', 'testrol2')                        +
 ORDER BY 1, 2;                                                                                    +
 $$ LANGUAGE SQL;
 statement: CREATE OR REPLACE FUNCTION chkumapping()                                               +
  RETURNS TABLE (umname name, umserver name, umoptions text[])                                     +
  AS $$                                                                                            +
 SELECT r.rolname, s.srvname, m.umoptions                                                          +
  FROM pg_user_mapping m                                                                           +
  LEFT JOIN pg_roles r ON (r.oid = m.umuser)                                                       +
  JOIN pg_foreign_server s ON (s.oid = m.umserver)                                                 +
  ORDER BY 2;                                                                                      +
 $$ LANGUAGE SQL;
 statement: CREATE ROLE "Public";
 statement: CREATE ROLE "None";
 statement: CREATE ROLE "current_user";
 statement: CREATE ROLE "session_user";
 statement: CREATE ROLE "user";
 statement: CREATE ROLE testrol0 SUPERUSER LOGIN;
 statement: CREATE ROLE testrolx SUPERUSER LOGIN;
 statement: CREATE ROLE testrol2 SUPERUSER;
 statement: CREATE ROLE testrol1 SUPERUSER LOGIN IN ROLE testrol2;
 statement: SET SESSION AUTHORIZATION testrol1;
 statement: SET ROLE testrol2;
 statement: BEGIN;
 statement: SELECT * FROM chkrolattr();
 statement: ALTER ROLE CURRENT_USER WITH REPLICATION;
 statement: SELECT * FROM chkrolattr();
 statement: ALTER ROLE "current_user" WITH REPLICATION;
 statement: SELECT * FROM chkrolattr();
 statement: ALTER ROLE SESSION_USER WITH REPLICATION;
 statement: SELECT * FROM chkrolattr();
 statement: ALTER ROLE "session_user" WITH REPLICATION;
 statement: SELECT * FROM chkrolattr();
 statement: ALTER USER "Public" WITH REPLICATION;
 statement: ALTER USER "None" WITH REPLICATION;
 statement: SELECT * FROM chkrolattr();
 statement: ALTER USER testrol1 WITH NOREPLICATION;
 statement: ALTER USER testrol2 WITH NOREPLICATION;
 statement: SELECT * FROM chkrolattr();
 statement: ROLLBACK;
 statement: ALTER ROLE SESSION_ROLE WITH NOREPLICATION;
 statement: ALTER ROLE PUBLIC WITH NOREPLICATION;
 statement: ALTER ROLE "public" WITH NOREPLICATION;
 statement: ALTER ROLE nonexistent WITH NOREPLICATION;
 statement: BEGIN;
 statement: SELECT * FROM chkrolattr();
 statement: ALTER USER CURRENT_USER WITH REPLICATION;
 statement: SELECT * FROM chkrolattr();
 statement: ALTER USER "current_user" WITH REPLICATION;
 statement: SELECT * FROM chkrolattr();
 statement: ALTER USER SESSION_USER WITH REPLICATION;
 statement: SELECT * FROM chkrolattr();
 statement: ALTER USER "session_user" WITH REPLICATION;
 statement: SELECT * FROM chkrolattr();
 statement: ALTER USER "Public" WITH REPLICATION;
 statement: ALTER USER "None" WITH REPLICATION;
 statement: SELECT * FROM chkrolattr();
 statement: ALTER USER testrol1 WITH NOREPLICATION;
 statement: ALTER USER testrol2 WITH NOREPLICATION;
 statement: SELECT * FROM chkrolattr();
 statement: ROLLBACK;
 statement: ALTER USER SESSION_ROLE WITH NOREPLICATION;
 statement: ALTER USER PUBLIC WITH NOREPLICATION;
 statement: ALTER USER "public" WITH NOREPLICATION;
 statement: ALTER USER nonexistent WITH NOREPLICATION;
 statement: SELECT * FROM chksetconfig();
 statement: ALTER ROLE CURRENT_USER SET application_name to 'FOO';
 statement: ALTER ROLE SESSION_USER SET application_name to 'BAR';
 statement: ALTER ROLE "current_user" SET application_name to 'FOOFOO';
 statement: ALTER ROLE "Public" SET application_name to 'BARBAR';
 statement: ALTER ROLE ALL SET application_name to 'SLAP';
 statement: SELECT * FROM chksetconfig();
 statement: ALTER ROLE testrol1 SET application_name to 'SLAM';
 statement: SELECT * FROM chksetconfig();
 statement: ALTER ROLE CURRENT_USER RESET application_name;
 statement: ALTER ROLE SESSION_USER RESET application_name;
 statement: ALTER ROLE "current_user" RESET application_name;
 statement: ALTER ROLE "Public" RESET application_name;
 statement: ALTER ROLE ALL RESET application_name;
 statement: SELECT * FROM chksetconfig();
 statement: ALTER ROLE PUBLIC SET application_name to 'BOMB';
 statement: ALTER ROLE nonexistent SET application_name to 'BOMB';
 statement: SELECT * FROM chksetconfig();
 statement: ALTER USER CURRENT_USER SET application_name to 'FOO';
 statement: ALTER USER SESSION_USER SET application_name to 'BAR';
 statement: ALTER USER "current_user" SET application_name to 'FOOFOO';
 statement: ALTER USER "Public" SET application_name to 'BARBAR';
 statement: ALTER USER ALL SET application_name to 'SLAP';
 statement: SELECT * FROM chksetconfig();
 statement: ALTER USER testrol1 SET application_name to 'SLAM';
 statement: SELECT * FROM chksetconfig();
 statement: ALTER USER CURRENT_USER RESET application_name;
 statement: ALTER USER SESSION_USER RESET application_name;
 statement: ALTER USER "current_user" RESET application_name;
 statement: ALTER USER "Public" RESET application_name;
 statement: ALTER USER ALL RESET application_name;
 statement: SELECT * FROM chksetconfig();
 statement: ALTER USER CURRENT_USER SET application_name to 'BAZ';
 statement: ALTER USER PUBLIC SET application_name to 'BOMB';
 statement: ALTER USER nonexistent SET application_name to 'BOMB';
 statement: set client_min_messages to error;
 statement: CREATE SCHEMA newschema1 AUTHORIZATION CURRENT_USER;
 statement: CREATE SCHEMA newschema2 AUTHORIZATION "current_user";
 statement: CREATE SCHEMA newschema3 AUTHORIZATION SESSION_USER;
 statement: CREATE SCHEMA newschema4 AUTHORIZATION testrolx;
 statement: CREATE SCHEMA newschema5 AUTHORIZATION "Public";
 statement: CREATE SCHEMA newschema6 AUTHORIZATION PUBLIC;
 statement: CREATE SCHEMA newschema6 AUTHORIZATION "public";
 statement: CREATE SCHEMA newschema6 AUTHORIZATION nonexistent;
 statement: SELECT n.nspname, r.rolname FROM pg_namespace n                                        +
  JOIN pg_roles r ON (r.oid = n.nspowner)                                                          +
  WHERE n.nspname LIKE 'newschema_' ORDER BY 1;
 statement: CREATE SCHEMA IF NOT EXISTS newschema1 AUTHORIZATION CURRENT_USER;
 statement: CREATE SCHEMA IF NOT EXISTS newschema2 AUTHORIZATION "current_user";
 statement: CREATE SCHEMA IF NOT EXISTS newschema3 AUTHORIZATION SESSION_USER;
 statement: CREATE SCHEMA IF NOT EXISTS newschema4 AUTHORIZATION testrolx;
 statement: CREATE SCHEMA IF NOT EXISTS newschema5 AUTHORIZATION "Public";
 statement: CREATE SCHEMA IF NOT EXISTS newschema6 AUTHORIZATION PUBLIC;
 statement: CREATE SCHEMA IF NOT EXISTS newschema6 AUTHORIZATION "public";
 statement: CREATE SCHEMA IF NOT EXISTS newschema6 AUTHORIZATION nonexistent;
 statement: SELECT n.nspname, r.rolname FROM pg_namespace n                                        +
  JOIN pg_roles r ON (r.oid = n.nspowner)                                                          +
  WHERE n.nspname LIKE 'newschema_' ORDER BY 1;
 statement: SET SESSION AUTHORIZATION testrol0;
 statement: set client_min_messages to error;
 statement: CREATE TABLE testtab1 (a int);
 statement: CREATE TABLE testtab2 (a int);
 statement: CREATE TABLE testtab3 (a int);
 statement: CREATE TABLE testtab4 (a int);
 statement: CREATE TABLE testtab5 (a int);
 statement: CREATE TABLE testtab6 (a int);
 statement: SET SESSION AUTHORIZATION testrol1;
 statement: SET ROLE testrol2;
 statement: ALTER TABLE testtab1 OWNER TO CURRENT_USER;
 statement: ALTER TABLE testtab2 OWNER TO "current_user";
 statement: ALTER TABLE testtab3 OWNER TO SESSION_USER;
 statement: ALTER TABLE testtab4 OWNER TO testrolx;
 statement: ALTER TABLE testtab5 OWNER TO "Public";
 statement: ALTER TABLE testtab6 OWNER TO PUBLIC;
 statement: ALTER TABLE testtab6 OWNER TO "public";
 statement: ALTER TABLE testtab6 OWNER TO nonexistent;
 statement: SELECT c.relname, r.rolname                                                            +
  FROM pg_class c JOIN pg_roles r ON (r.oid = c.relowner)                                          +
  WHERE relname LIKE 'testtab_'                                                                    +
  ORDER BY 1;
 statement: SET SESSION AUTHORIZATION testrol0;
 statement: CREATE AGGREGATE testagg1(int2) (SFUNC = int2_sum, STYPE = int8);
 statement: CREATE AGGREGATE testagg2(int2) (SFUNC = int2_sum, STYPE = int8);
 statement: CREATE AGGREGATE testagg3(int2) (SFUNC = int2_sum, STYPE = int8);
 statement: CREATE AGGREGATE testagg4(int2) (SFUNC = int2_sum, STYPE = int8);
 statement: CREATE AGGREGATE testagg5(int2) (SFUNC = int2_sum, STYPE = int8);
 statement: CREATE AGGREGATE testagg5(int2) (SFUNC = int2_sum, STYPE = int8);
 statement: CREATE AGGREGATE testagg6(int2) (SFUNC = int2_sum, STYPE = int8);
 statement: CREATE AGGREGATE testagg7(int2) (SFUNC = int2_sum, STYPE = int8);
 statement: CREATE AGGREGATE testagg8(int2) (SFUNC = int2_sum, STYPE = int8);
 statement: CREATE AGGREGATE testagg9(int2) (SFUNC = int2_sum, STYPE = int8);
 statement: SET SESSION AUTHORIZATION testrol1;
 statement: SET ROLE testrol2;
 statement: ALTER AGGREGATE testagg1(int2) OWNER TO CURRENT_USER;
 statement: ALTER AGGREGATE testagg2(int2) OWNER TO "current_user";
 statement: ALTER AGGREGATE testagg3(int2) OWNER TO SESSION_USER;
 statement: ALTER AGGREGATE testagg4(int2) OWNER TO testrolx;
 statement: ALTER AGGREGATE testagg5(int2) OWNER TO "Public";
 statement: ALTER AGGREGATE testagg5(int2) OWNER TO PUBLIC;
 statement: ALTER AGGREGATE testagg5(int2) OWNER TO "public";
 statement: ALTER AGGREGATE testagg5(int2) OWNER TO nonexistent;
 statement: SELECT p.proname, r.rolname                                                            +
  FROM pg_proc p JOIN pg_roles r ON (r.oid = p.proowner)                                           +
  WHERE proname LIKE 'testagg_'                                                                    +
  ORDER BY 1;
 statement: CREATE FOREIGN DATA WRAPPER test_wrapper;
 statement: CREATE SERVER sv1 FOREIGN DATA WRAPPER test_wrapper;
 statement: CREATE SERVER sv2 FOREIGN DATA WRAPPER test_wrapper;
 statement: CREATE SERVER sv3 FOREIGN DATA WRAPPER test_wrapper;
 statement: CREATE SERVER sv4 FOREIGN DATA WRAPPER test_wrapper;
 statement: CREATE SERVER sv5 FOREIGN DATA WRAPPER test_wrapper;
 statement: CREATE SERVER sv6 FOREIGN DATA WRAPPER test_wrapper;
 statement: CREATE SERVER sv7 FOREIGN DATA WRAPPER test_wrapper;
 statement: CREATE SERVER sv8 FOREIGN DATA WRAPPER test_wrapper;
 statement: CREATE SERVER sv9 FOREIGN DATA WRAPPER test_wrapper;
 statement: CREATE USER MAPPING FOR CURRENT_USER SERVER sv1 OPTIONS (user 'CURRENT_USER');
 statement: CREATE USER MAPPING FOR "current_user" SERVER sv2 OPTIONS (user '"current_user"');
 statement: CREATE USER MAPPING FOR USER SERVER sv3 OPTIONS (user 'USER');
 statement: CREATE USER MAPPING FOR "user" SERVER sv4 OPTIONS (user '"USER"');
 statement: CREATE USER MAPPING FOR SESSION_USER SERVER sv5 OPTIONS (user 'SESSION_USER');
 statement: CREATE USER MAPPING FOR PUBLIC SERVER sv6 OPTIONS (user 'PUBLIC');
 statement: CREATE USER MAPPING FOR "Public" SERVER sv7 OPTIONS (user '"Public"');
 statement: CREATE USER MAPPING FOR testrolx SERVER sv8 OPTIONS (user 'testrolx');
 statement: CREATE USER MAPPING FOR nonexistent SERVER sv9                                         +
             OPTIONS (user 'nonexistent');
 statement: SELECT * FROM chkumapping();
 statement: ALTER USER MAPPING FOR CURRENT_USER SERVER sv1                                         +
  OPTIONS (SET user 'CURRENT_USER_alt');
 statement: ALTER USER MAPPING FOR "current_user" SERVER sv2                                       +
  OPTIONS (SET user '"current_user"_alt');
 statement: ALTER USER MAPPING FOR USER SERVER sv3                                                 +
  OPTIONS (SET user 'USER_alt');
 statement: ALTER USER MAPPING FOR "user" SERVER sv4                                               +
  OPTIONS (SET user '"user"_alt');
 statement: ALTER USER MAPPING FOR SESSION_USER SERVER sv5                                         +
  OPTIONS (SET user 'SESSION_USER_alt');
 statement: ALTER USER MAPPING FOR PUBLIC SERVER sv6                                               +
  OPTIONS (SET user 'public_alt');
 statement: ALTER USER MAPPING FOR "Public" SERVER sv7                                             +
  OPTIONS (SET user '"Public"_alt');
 statement: ALTER USER MAPPING FOR testrolx SERVER sv8                                             +
  OPTIONS (SET user 'testrolx_alt');
 statement: ALTER USER MAPPING FOR nonexistent SERVER sv9                                          +
  OPTIONS (SET user 'nonexistent_alt');
 statement: SELECT * FROM chkumapping();
 statement: DROP USER MAPPING FOR CURRENT_USER SERVER sv1;
 statement: DROP USER MAPPING FOR "current_user" SERVER sv2;
 statement: DROP USER MAPPING FOR USER SERVER sv3;
 statement: DROP USER MAPPING FOR "user" SERVER sv4;
 statement: DROP USER MAPPING FOR SESSION_USER SERVER sv5;
 statement: DROP USER MAPPING FOR PUBLIC SERVER sv6;
 statement: DROP USER MAPPING FOR "Public" SERVER sv7;
 statement: DROP USER MAPPING FOR testrolx SERVER sv8;
 statement: DROP USER MAPPING FOR nonexistent SERVER sv;
 statement: SELECT * FROM chkumapping();
 statement: CREATE USER MAPPING FOR CURRENT_USER SERVER sv1 OPTIONS (user 'CURRENT_USER');
 statement: CREATE USER MAPPING FOR "current_user" SERVER sv2 OPTIONS (user '"current_user"');
 statement: CREATE USER MAPPING FOR USER SERVER sv3 OPTIONS (user 'USER');
 statement: CREATE USER MAPPING FOR "user" SERVER sv4 OPTIONS (user '"USER"');
 statement: CREATE USER MAPPING FOR SESSION_USER SERVER sv5 OPTIONS (user 'SESSION_USER');
 statement: CREATE USER MAPPING FOR PUBLIC SERVER sv6 OPTIONS (user 'PUBLIC');
 statement: CREATE USER MAPPING FOR "Public" SERVER sv7 OPTIONS (user '"Public"');
 statement: CREATE USER MAPPING FOR testrolx SERVER sv8 OPTIONS (user 'testrolx');
 statement: SELECT * FROM chkumapping();
 statement: DROP USER MAPPING IF EXISTS FOR CURRENT_USER SERVER sv1;
 statement: SELECT * FROM chkumapping();
 statement: DROP USER MAPPING IF EXISTS FOR "current_user" SERVER sv2;
 statement: SELECT * FROM chkumapping();
 statement: DROP USER MAPPING IF EXISTS FOR USER SERVER sv3;
 statement: SELECT * FROM chkumapping();
 statement: DROP USER MAPPING IF EXISTS FOR "user" SERVER sv4;
 statement: SELECT * FROM chkumapping();
 statement: DROP USER MAPPING IF EXISTS FOR SESSION_USER SERVER sv5;
 statement: SELECT * FROM chkumapping();
 statement: DROP USER MAPPING IF EXISTS FOR PUBLIC SERVER sv6;
 statement: SELECT * FROM chkumapping();
 statement: DROP USER MAPPING IF EXISTS FOR "Public" SERVER sv7;
 statement: SELECT * FROM chkumapping();
 statement: DROP USER MAPPING IF EXISTS FOR testrolx SERVER sv8;
 statement: SELECT * FROM chkumapping();
 statement: DROP USER MAPPING IF EXISTS FOR nonexistent SERVER sv9;
 statement: UPDATE pg_proc SET proacl = null WHERE proname LIKE 'testagg_';
 statement: SELECT proname, proacl FROM pg_proc WHERE proname LIKE 'testagg_';
 statement: REVOKE ALL PRIVILEGES ON FUNCTION testagg1(int2) FROM PUBLIC;
 statement: REVOKE ALL PRIVILEGES ON FUNCTION testagg2(int2) FROM PUBLIC;
 statement: REVOKE ALL PRIVILEGES ON FUNCTION testagg3(int2) FROM PUBLIC;
 statement: REVOKE ALL PRIVILEGES ON FUNCTION testagg4(int2) FROM PUBLIC;
 statement: REVOKE ALL PRIVILEGES ON FUNCTION testagg5(int2) FROM PUBLIC;
 statement: REVOKE ALL PRIVILEGES ON FUNCTION testagg6(int2) FROM PUBLIC;
 statement: REVOKE ALL PRIVILEGES ON FUNCTION testagg7(int2) FROM PUBLIC;
 statement: REVOKE ALL PRIVILEGES ON FUNCTION testagg8(int2) FROM PUBLIC;
 statement: GRANT ALL PRIVILEGES ON FUNCTION testagg1(int2) TO PUBLIC;
 statement: GRANT ALL PRIVILEGES ON FUNCTION testagg2(int2) TO CURRENT_USER;
 statement: GRANT ALL PRIVILEGES ON FUNCTION testagg3(int2) TO "current_user";
 statement: GRANT ALL PRIVILEGES ON FUNCTION testagg4(int2) TO SESSION_USER;
 statement: GRANT ALL PRIVILEGES ON FUNCTION testagg5(int2) TO "Public";
 statement: GRANT ALL PRIVILEGES ON FUNCTION testagg6(int2) TO testrolx;
 statement: GRANT ALL PRIVILEGES ON FUNCTION testagg7(int2) TO "public";
 statement: GRANT ALL PRIVILEGES ON FUNCTION testagg8(int2)                                        +
            TO current_user, public, testrolx;
 statement: SELECT proname, proacl FROM pg_proc WHERE proname LIKE 'testagg_';
 statement: SELECT proname, proacl FROM pg_proc WHERE proname LIKE 'testagg_';
 statement: REVOKE ALL PRIVILEGES ON FUNCTION testagg1(int2) FROM PUBLIC;
 statement: REVOKE ALL PRIVILEGES ON FUNCTION testagg2(int2) FROM CURRENT_USER;
 statement: REVOKE ALL PRIVILEGES ON FUNCTION testagg3(int2) FROM "current_user";
 statement: REVOKE ALL PRIVILEGES ON FUNCTION testagg4(int2) FROM SESSION_USER;
 statement: REVOKE ALL PRIVILEGES ON FUNCTION testagg5(int2) FROM "Public";
 statement: REVOKE ALL PRIVILEGES ON FUNCTION testagg6(int2) FROM testrolx;
 statement: REVOKE ALL PRIVILEGES ON FUNCTION testagg7(int2) FROM "public";
 statement: REVOKE ALL PRIVILEGES ON FUNCTION testagg8(int2)                                       +
            FROM current_user, public, testrolx;
 statement: SELECT proname, proacl FROM pg_proc WHERE proname LIKE 'testagg_';
 statement: SELECT proname, proacl FROM pg_proc WHERE proname LIKE 'testagg_';
 statement: DROP OWNED BY testrol0, "Public", "current_user", testrol1, testrol2, testrolx CASCADE;
 statement: DROP ROLE testrol0, testrol1, testrol2, testrolx;
 statement: DROP ROLE "Public", "None", "current_user", "session_user", "user";

