LOG:  statement: select message from postgres_log where query is null;
 statement: select count(*) as should_be_1 from hs1;
 statement: select count(*) as should_be_2 from hs2;
 statement: select count(*) as should_be_3 from hs3;
 statement: COPY hs1 TO '/tmp/copy_test';
 statement: select min_value as sequence_min_value from hsseq;
 statement: begin;
 statement: select count(*)  as should_be_1 from hs1;
 statement: end;
 statement: begin transaction read only;
 statement: select count(*)  as should_be_1 from hs1;
 statement: end;
 statement: begin transaction isolation level repeatable read;
 statement: select count(*) as should_be_1 from hs1;
 statement: select count(*) as should_be_1 from hs1;
 statement: select count(*) as should_be_1 from hs1;
 statement: commit;
 statement: begin;
 statement: select count(*) as should_be_1 from hs1;
 statement: commit;
 statement: begin;
 statement: select count(*) as should_be_1 from hs1;
 statement: abort;
 statement: start transaction;
 statement: select count(*) as should_be_1 from hs1;
 statement: commit;
 statement: begin;
 statement: select count(*) as should_be_1 from hs1;
 statement: rollback;
 statement: begin;
 statement: select count(*) as should_be_1 from hs1;
 statement: savepoint s;
 statement: select count(*) as should_be_2 from hs2;
 statement: commit;
 statement: begin;
 statement: select count(*) as should_be_1 from hs1;
 statement: savepoint s;
 statement: select count(*) as should_be_2 from hs2;
 statement: release savepoint s;
 statement: select count(*) as should_be_2 from hs2;
 statement: savepoint s;
 statement: select count(*) as should_be_3 from hs3;
 statement: rollback to savepoint s;
 statement: select count(*) as should_be_2 from hs2;
 statement: commit;
 statement: set synchronous_commit = on;
 statement: show synchronous_commit;
 statement: reset synchronous_commit;
 statement: discard temp;
 statement: discard all;
 statement: BEGIN;
 statement: DECLARE hsc CURSOR FOR select * from hs3;
 statement: FETCH next from hsc;
 statement: fetch first from hsc;
 statement: fetch last from hsc;
 statement: fetch 1 from hsc;
 statement: CLOSE hsc;
 statement: COMMIT;
 statement: PREPARE hsp AS select count(*) from hs1;
 statement: PREPARE hsp_noexec (integer) AS insert into hs1 values ($1);
 statement: EXECUTE hsp;
 statement: DEALLOCATE hsp;
 statement: BEGIN;
 statement: LOCK hs1 IN ACCESS SHARE MODE;
 statement: LOCK hs1 IN ROW SHARE MODE;
 statement: LOCK hs1 IN ROW EXCLUSIVE MODE;
 statement: COMMIT;
 statement: CHECKPOINT;
 statement: discard all;

