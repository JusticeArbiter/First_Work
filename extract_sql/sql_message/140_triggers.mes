LOG:  statement: select message from postgres_log where query is null;
 statement: create table pkeys (pkey1 int4 not null, pkey2 text not null);
 statement: create table fkeys (fkey1 int4, fkey2 text, fkey3 int);
 statement: create table fkeys2 (fkey21 int4, fkey22 text, pkey23 int not null);
 statement: create index fkeys_i on fkeys (fkey1, fkey2);
 statement: create index fkeys2_i on fkeys2 (fkey21, fkey22);
 statement: create index fkeys2p_i on fkeys2 (pkey23);
 statement: insert into pkeys values (10, '1');
 statement: insert into pkeys values (20, '2');
 statement: insert into pkeys values (30, '3');
 statement: insert into pkeys values (40, '4');
 statement: insert into pkeys values (50, '5');
 statement: insert into pkeys values (60, '6');
 statement: create unique index pkeys_i on pkeys (pkey1, pkey2);
 statement: create trigger check_fkeys_pkey_exist                                                                                                                                                                                                                                                   +
         before insert or update on fkeys                                                                                                                                                                                                                                                           +
         for each row                                                                                                                                                                                                                                                                               +
         execute procedure                                                                                                                                                                                                                                                                          +
         check_primary_key ('fkey1', 'fkey2', 'pkeys', 'pkey1', 'pkey2');
 statement: create trigger check_fkeys_pkey2_exist                                                                                                                                                                                                                                                  +
         before insert or update on fkeys                                                                                                                                                                                                                                                           +
         for each row                                                                                                                                                                                                                                                                               +
         execute procedure check_primary_key ('fkey3', 'fkeys2', 'pkey23');
 statement: create trigger check_fkeys2_pkey_exist                                                                                                                                                                                                                                                  +
         before insert or update on fkeys2                                                                                                                                                                                                                                                          +
         for each row                                                                                                                                                                                                                                                                               +
         execute procedure                                                                                                                                                                                                                                                                          +
         check_primary_key ('fkey21', 'fkey22', 'pkeys', 'pkey1', 'pkey2');
 statement: COMMENT ON TRIGGER check_fkeys2_pkey_bad ON fkeys2 IS 'wrong';
 statement: COMMENT ON TRIGGER check_fkeys2_pkey_exist ON fkeys2 IS 'right';
 statement: COMMENT ON TRIGGER check_fkeys2_pkey_exist ON fkeys2 IS NULL;
 statement: create trigger check_pkeys_fkey_cascade                                                                                                                                                                                                                                                 +
         before delete or update on pkeys                                                                                                                                                                                                                                                           +
         for each row                                                                                                                                                                                                                                                                               +
         execute procedure                                                                                                                                                                                                                                                                          +
         check_foreign_key (2, 'cascade', 'pkey1', 'pkey2',                                                                                                                                                                                                                                         +
         'fkeys', 'fkey1', 'fkey2', 'fkeys2', 'fkey21', 'fkey22');
 statement: create trigger check_fkeys2_fkey_restrict                                                                                                                                                                                                                                               +
         before delete or update on fkeys2                                                                                                                                                                                                                                                          +
         for each row                                                                                                                                                                                                                                                                               +
         execute procedure check_foreign_key (1, 'restrict', 'pkey23', 'fkeys', 'fkey3');
 statement: insert into fkeys2 values (10, '1', 1);
 statement: insert into fkeys2 values (30, '3', 2);
 statement: insert into fkeys2 values (40, '4', 5);
 statement: insert into fkeys2 values (50, '5', 3);
 statement: insert into fkeys2 values (70, '5', 3);
 statement: insert into fkeys values (10, '1', 2);
 statement: insert into fkeys values (30, '3', 3);
 statement: insert into fkeys values (40, '4', 2);
 statement: insert into fkeys values (50, '5', 2);
 statement: insert into fkeys values (70, '5', 1);
 statement: insert into fkeys values (60, '6', 4);
 statement: delete from pkeys where pkey1 = 30 and pkey2 = '3';
 statement: delete from pkeys where pkey1 = 40 and pkey2 = '4';
 statement: update pkeys set pkey1 = 7, pkey2 = '70' where pkey1 = 50 and pkey2 = '5';
 statement: update pkeys set pkey1 = 7, pkey2 = '70' where pkey1 = 10 and pkey2 = '1';
 statement: DROP TABLE pkeys;
 statement: DROP TABLE fkeys;
 statement: DROP TABLE fkeys2;
 statement: create sequence ttdummy_seq increment 10 start 0 minvalue 0;
 statement: create table tttest (                                                                                                                                                                                                                                                                   +
         price_id        int4,                                                                                                                                                                                                                                                                      +
         price_val       int4,                                                                                                                                                                                                                                                                      +
         price_on        int4,                                                                                                                                                                                                                                                                      +
         price_off       int4 default 999999                                                                                                                                                                                                                                                        +
 );
 statement: create trigger ttdummy                                                                                                                                                                                                                                                                  +
         before delete or update on tttest                                                                                                                                                                                                                                                          +
         for each row                                                                                                                                                                                                                                                                               +
         execute procedure                                                                                                                                                                                                                                                                          +
         ttdummy (price_on, price_off);
 statement: create trigger ttserial                                                                                                                                                                                                                                                                 +
         before insert or update on tttest                                                                                                                                                                                                                                                          +
         for each row                                                                                                                                                                                                                                                                               +
         execute procedure                                                                                                                                                                                                                                                                          +
         autoinc (price_on, ttdummy_seq);
 statement: insert into tttest values (1, 1, null);
 statement: insert into tttest values (2, 2, null);
 statement: insert into tttest values (3, 3, 0);
 statement: select * from tttest;
 statement: delete from tttest where price_id = 2;
 statement: select * from tttest;
 statement: select * from tttest where price_off = 999999;
 statement: update tttest set price_val = 30 where price_id = 3;
 statement: select * from tttest;
 statement: update tttest set price_id = 5 where price_id = 3;
 statement: select * from tttest;
 statement: select set_ttdummy(0);
 statement: delete from tttest where price_id = 5;
 statement: update tttest set price_off = 999999 where price_val = 30;
 statement: select * from tttest;
 statement: update tttest set price_id = 5 where price_id = 3;
 statement: select * from tttest;
 statement: select set_ttdummy(1);
 statement: update tttest set price_on = -1 where price_id = 1;
 statement: select set_ttdummy(0);
 statement: update tttest set price_on = -1 where price_id = 1;
 statement: select * from tttest;
 statement: select * from tttest where price_on <= 35 and price_off > 35 and price_id = 5;
 statement: drop table tttest;
 statement: drop sequence ttdummy_seq;
 statement: CREATE TABLE log_table (tstamp timestamp default timeofday()::timestamp);
 statement: CREATE TABLE main_table (a int unique, b int);
 statement: COPY main_table (a,b) FROM stdin;
 statement: CREATE FUNCTION trigger_func() RETURNS trigger LANGUAGE plpgsql AS '                                                                                                                                                                                                                    +
 BEGIN                                                                                                                                                                                                                                                                                              +
         RAISE NOTICE ''trigger_func(%) called: action = %, when = %, level = %'', TG_ARGV[0], TG_OP, TG_WHEN, TG_LEVEL;                                                                                                                                                                            +
         RETURN NULL;                                                                                                                                                                                                                                                                               +
 END;';
 statement: CREATE TRIGGER before_ins_stmt_trig BEFORE INSERT ON main_table                                                                                                                                                                                                                         +
 FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func('before_ins_stmt');
 statement: CREATE TRIGGER after_ins_stmt_trig AFTER INSERT ON main_table                                                                                                                                                                                                                           +
 FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func('after_ins_stmt');
 statement: CREATE TRIGGER after_upd_stmt_trig AFTER UPDATE ON main_table                                                                                                                                                                                                                           +
 EXECUTE PROCEDURE trigger_func('after_upd_stmt');
 statement: INSERT INTO main_table (a, b) VALUES (5, 10) ON CONFLICT (a)                                                                                                                                                                                                                            +
   DO UPDATE SET b = EXCLUDED.b;
 statement: CREATE TRIGGER after_upd_row_trig AFTER UPDATE ON main_table                                                                                                                                                                                                                            +
 FOR EACH ROW EXECUTE PROCEDURE trigger_func('after_upd_row');
 statement: INSERT INTO main_table DEFAULT VALUES;
 statement: UPDATE main_table SET a = a + 1 WHERE b < 30;
 statement: UPDATE main_table SET a = a + 2 WHERE b > 100;
 statement: ALTER TABLE main_table DROP CONSTRAINT main_table_a_key;
 statement: COPY main_table (a, b) FROM stdin;
 statement: SELECT * FROM main_table ORDER BY a, b;
 statement: CREATE TRIGGER modified_a BEFORE UPDATE OF a ON main_table                                                                                                                                                                                                                              +
 FOR EACH ROW WHEN (OLD.a <> NEW.a) EXECUTE PROCEDURE trigger_func('modified_a');
 statement: CREATE TRIGGER modified_any BEFORE UPDATE OF a ON main_table                                                                                                                                                                                                                            +
 FOR EACH ROW WHEN (OLD.* IS DISTINCT FROM NEW.*) EXECUTE PROCEDURE trigger_func('modified_any');
 statement: CREATE TRIGGER insert_a AFTER INSERT ON main_table                                                                                                                                                                                                                                      +
 FOR EACH ROW WHEN (NEW.a = 123) EXECUTE PROCEDURE trigger_func('insert_a');
 statement: CREATE TRIGGER delete_a AFTER DELETE ON main_table                                                                                                                                                                                                                                      +
 FOR EACH ROW WHEN (OLD.a = 123) EXECUTE PROCEDURE trigger_func('delete_a');
 statement: CREATE TRIGGER insert_when BEFORE INSERT ON main_table                                                                                                                                                                                                                                  +
 FOR EACH STATEMENT WHEN (true) EXECUTE PROCEDURE trigger_func('insert_when');
 statement: CREATE TRIGGER delete_when AFTER DELETE ON main_table                                                                                                                                                                                                                                   +
 FOR EACH STATEMENT WHEN (true) EXECUTE PROCEDURE trigger_func('delete_when');
 statement: INSERT INTO main_table (a) VALUES (123), (456);
 statement: COPY main_table FROM stdin;
 statement: DELETE FROM main_table WHERE a IN (123, 456);
 statement: UPDATE main_table SET a = 50, b = 60;
 statement: SELECT * FROM main_table ORDER BY a, b;
 statement: SELECT pg_get_triggerdef(oid, true) FROM pg_trigger WHERE tgrelid = 'main_table'::regclass AND tgname = 'modified_a';
 statement: SELECT pg_get_triggerdef(oid, false) FROM pg_trigger WHERE tgrelid = 'main_table'::regclass AND tgname = 'modified_a';
 statement: SELECT pg_get_triggerdef(oid, true) FROM pg_trigger WHERE tgrelid = 'main_table'::regclass AND tgname = 'modified_any';
 statement: DROP TRIGGER modified_a ON main_table;
 statement: DROP TRIGGER modified_any ON main_table;
 statement: DROP TRIGGER insert_a ON main_table;
 statement: DROP TRIGGER delete_a ON main_table;
 statement: DROP TRIGGER insert_when ON main_table;
 statement: DROP TRIGGER delete_when ON main_table;
 statement: DROP TRIGGER after_upd_row_trig ON main_table;
 statement: CREATE TRIGGER before_upd_a_row_trig BEFORE UPDATE OF a ON main_table                                                                                                                                                                                                                   +
 FOR EACH ROW EXECUTE PROCEDURE trigger_func('before_upd_a_row');
 statement: CREATE TRIGGER after_upd_b_row_trig AFTER UPDATE OF b ON main_table                                                                                                                                                                                                                     +
 FOR EACH ROW EXECUTE PROCEDURE trigger_func('after_upd_b_row');
 statement: CREATE TRIGGER after_upd_a_b_row_trig AFTER UPDATE OF a, b ON main_table                                                                                                                                                                                                                +
 FOR EACH ROW EXECUTE PROCEDURE trigger_func('after_upd_a_b_row');
 statement: CREATE TRIGGER before_upd_a_stmt_trig BEFORE UPDATE OF a ON main_table                                                                                                                                                                                                                  +
 FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func('before_upd_a_stmt');
 statement: CREATE TRIGGER after_upd_b_stmt_trig AFTER UPDATE OF b ON main_table                                                                                                                                                                                                                    +
 FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func('after_upd_b_stmt');
 statement: SELECT pg_get_triggerdef(oid) FROM pg_trigger WHERE tgrelid = 'main_table'::regclass AND tgname = 'after_upd_a_b_row_trig';
 statement: UPDATE main_table SET a = 50;
 statement: UPDATE main_table SET b = 10;
 statement: CREATE TABLE some_t (some_col boolean NOT NULL);
 statement: CREATE FUNCTION dummy_update_func() RETURNS trigger AS $$                                                                                                                                                                                                                               +
 BEGIN                                                                                                                                                                                                                                                                                              +
   RAISE NOTICE 'dummy_update_func(%) called: action = %, old = %, new = %',                                                                                                                                                                                                                        +
     TG_ARGV[0], TG_OP, OLD, NEW;                                                                                                                                                                                                                                                                   +
   RETURN NEW;                                                                                                                                                                                                                                                                                      +
 END;                                                                                                                                                                                                                                                                                               +
 $$ LANGUAGE plpgsql;
 statement: CREATE TRIGGER some_trig_before BEFORE UPDATE ON some_t FOR EACH ROW                                                                                                                                                                                                                    +
   EXECUTE PROCEDURE dummy_update_func('before');
 statement: CREATE TRIGGER some_trig_aftera AFTER UPDATE ON some_t FOR EACH ROW                                                                                                                                                                                                                     +
   WHEN (NOT OLD.some_col AND NEW.some_col)                                                                                                                                                                                                                                                         +
   EXECUTE PROCEDURE dummy_update_func('aftera');
 statement: CREATE TRIGGER some_trig_afterb AFTER UPDATE ON some_t FOR EACH ROW                                                                                                                                                                                                                     +
   WHEN (NOT NEW.some_col)                                                                                                                                                                                                                                                                          +
   EXECUTE PROCEDURE dummy_update_func('afterb');
 statement: INSERT INTO some_t VALUES (TRUE);
 statement: UPDATE some_t SET some_col = TRUE;
 statement: UPDATE some_t SET some_col = FALSE;
 statement: UPDATE some_t SET some_col = TRUE;
 statement: DROP TABLE some_t;
 statement: CREATE TRIGGER error_upd_a_a BEFORE UPDATE OF a, a ON main_table                                                                                                                                                                                                                        +
 FOR EACH ROW EXECUTE PROCEDURE trigger_func('error_upd_a_a');
 statement: CREATE TRIGGER error_ins_when BEFORE INSERT OR UPDATE ON main_table                                                                                                                                                                                                                     +
 FOR EACH ROW WHEN (OLD.a <> NEW.a)                                                                                                                                                                                                                                                                 +
 EXECUTE PROCEDURE trigger_func('error_ins_old');
 statement: CREATE TRIGGER error_del_when BEFORE DELETE OR UPDATE ON main_table                                                                                                                                                                                                                     +
 FOR EACH ROW WHEN (OLD.a <> NEW.a)                                                                                                                                                                                                                                                                 +
 EXECUTE PROCEDURE trigger_func('error_del_new');
 statement: CREATE TRIGGER error_del_when BEFORE INSERT OR UPDATE ON main_table                                                                                                                                                                                                                     +
 FOR EACH ROW WHEN (NEW.tableoid <> 0)                                                                                                                                                                                                                                                              +
 EXECUTE PROCEDURE trigger_func('error_when_sys_column');
 statement: CREATE TRIGGER error_stmt_when BEFORE UPDATE OF a ON main_table                                                                                                                                                                                                                         +
 FOR EACH STATEMENT WHEN (OLD.* IS DISTINCT FROM NEW.*)                                                                                                                                                                                                                                             +
 EXECUTE PROCEDURE trigger_func('error_stmt_when');
 statement: ALTER TABLE main_table DROP COLUMN b;
 statement: begin;
 statement: DROP TRIGGER after_upd_a_b_row_trig ON main_table;
 statement: DROP TRIGGER after_upd_b_row_trig ON main_table;
 statement: DROP TRIGGER after_upd_b_stmt_trig ON main_table;
 statement: ALTER TABLE main_table DROP COLUMN b;
 statement: rollback;
 statement: create table trigtest (i serial primary key);
 statement: create table trigtest2 (i int references trigtest(i) on delete cascade);
 statement: create function trigtest() returns trigger as $$                                                                                                                                                                                                                                        +
 begin                                                                                                                                                                                                                                                                                              +
         raise notice '% % % %', TG_RELNAME, TG_OP, TG_WHEN, TG_LEVEL;                                                                                                                                                                                                                              +
         return new;                                                                                                                                                                                                                                                                                +
 end;$$ language plpgsql;
 statement: create trigger trigtest_b_row_tg before insert or update or delete on trigtest                                                                                                                                                                                                          +
 for each row execute procedure trigtest();
 statement: create trigger trigtest_a_row_tg after insert or update or delete on trigtest                                                                                                                                                                                                           +
 for each row execute procedure trigtest();
 statement: create trigger trigtest_b_stmt_tg before insert or update or delete on trigtest                                                                                                                                                                                                         +
 for each statement execute procedure trigtest();
 statement: create trigger trigtest_a_stmt_tg after insert or update or delete on trigtest                                                                                                                                                                                                          +
 for each statement execute procedure trigtest();
 statement: insert into trigtest default values;
 statement: alter table trigtest disable trigger trigtest_b_row_tg;
 statement: insert into trigtest default values;
 statement: alter table trigtest disable trigger user;
 statement: insert into trigtest default values;
 statement: alter table trigtest enable trigger trigtest_a_stmt_tg;
 statement: insert into trigtest default values;
 statement: insert into trigtest2 values(1);
 statement: insert into trigtest2 values(2);
 statement: delete from trigtest where i=2;
 statement: select * from trigtest2;
 statement: alter table trigtest disable trigger all;
 statement: delete from trigtest where i=1;
 statement: select * from trigtest2;
 statement: insert into trigtest default values;
 statement: select *  from trigtest;
 statement: drop table trigtest2;
 statement: drop table trigtest;
 statement: CREATE TABLE trigger_test (                                                                                                                                                                                                                                                             +
         i int,                                                                                                                                                                                                                                                                                     +
         v varchar                                                                                                                                                                                                                                                                                  +
 );
 statement: CREATE OR REPLACE FUNCTION trigger_data()  RETURNS trigger                                                                                                                                                                                                                              +
 LANGUAGE plpgsql AS $$                                                                                                                                                                                                                                                                             +
                                                                                                                                                                                                                                                                                                    +
 declare                                                                                                                                                                                                                                                                                            +
                                                                                                                                                                                                                                                                                                    +
         argstr text;                                                                                                                                                                                                                                                                               +
         relid text;                                                                                                                                                                                                                                                                                +
                                                                                                                                                                                                                                                                                                    +
 begin                                                                                                                                                                                                                                                                                              +
                                                                                                                                                                                                                                                                                                    +
         relid := TG_relid::regclass;                                                                                                                                                                                                                                                               +
                                                                                                                                                                                                                                                                                                    +
         -- plpgsql can't discover its trigger data in a hash like perl and python                                                                                                                                                                                                                  +
         -- can, or by a sort of reflection like tcl can,                                                                                                                                                                                                                                           +
         -- so we have to hard code the names.                                                                                                                                                                                                                                                      +
         raise NOTICE 'TG_NAME: %', TG_name;                                                                                                                                                                                                                                                        +
         raise NOTICE 'TG_WHEN: %', TG_when;                                                                                                                                                                                                                                                        +
         raise NOTICE 'TG_LEVEL: %', TG_level;                                                                                                                                                                                                                                                      +
         raise NOTICE 'TG_OP: %', TG_op;                                                                                                                                                                                                                                                            +
         raise NOTICE 'TG_RELID::regclass: %', relid;                                                                                                                                                                                                                                               +
         raise NOTICE 'TG_RELNAME: %', TG_relname;                                                                                                                                                                                                                                                  +
         raise NOTICE 'TG_TABLE_NAME: %', TG_table_name;                                                                                                                                                                                                                                            +
         raise NOTICE 'TG_TABLE_SCHEMA: %', TG_table_schema;                                                                                                                                                                                                                                        +
         raise NOTICE 'TG_NARGS: %', TG_nargs;                                                                                                                                                                                                                                                      +
                                                                                                                                                                                                                                                                                                    +
         argstr := '[';                                                                                                                                                                                                                                                                             +
         for i in 0 .. TG_nargs - 1 loop                                                                                                                                                                                                                                                            +
                 if i > 0 then                                                                                                                                                                                                                                                                      +
                         argstr := argstr || ', ';                                                                                                                                                                                                                                                  +
                 end if;                                                                                                                                                                                                                                                                            +
                 argstr := argstr || TG_argv[i];                                                                                                                                                                                                                                                    +
         end loop;                                                                                                                                                                                                                                                                                  +
         argstr := argstr || ']';                                                                                                                                                                                                                                                                   +
         raise NOTICE 'TG_ARGV: %', argstr;                                                                                                                                                                                                                                                         +
                                                                                                                                                                                                                                                                                                    +
         if TG_OP != 'INSERT' then                                                                                                                                                                                                                                                                  +
                 raise NOTICE 'OLD: %', OLD;                                                                                                                                                                                                                                                        +
         end if;                                                                                                                                                                                                                                                                                    +
                                                                                                                                                                                                                                                                                                    +
         if TG_OP != 'DELETE' then                                                                                                                                                                                                                                                                  +
                 raise NOTICE 'NEW: %', NEW;                                                                                                                                                                                                                                                        +
         end if;                                                                                                                                                                                                                                                                                    +
                                                                                                                                                                                                                                                                                                    +
         if TG_OP = 'DELETE' then                                                                                                                                                                                                                                                                   +
                 return OLD;                                                                                                                                                                                                                                                                        +
         else                                                                                                                                                                                                                                                                                       +
                 return NEW;                                                                                                                                                                                                                                                                        +
         end if;                                                                                                                                                                                                                                                                                    +
                                                                                                                                                                                                                                                                                                    +
 end;                                                                                                                                                                                                                                                                                               +
 $$;
 statement: CREATE TRIGGER show_trigger_data_trig                                                                                                                                                                                                                                                   +
 BEFORE INSERT OR UPDATE OR DELETE ON trigger_test                                                                                                                                                                                                                                                  +
 FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
 statement: insert into trigger_test values(1,'insert');
 statement: update trigger_test set v = 'update' where i = 1;
 statement: delete from trigger_test;
 statement: DROP TRIGGER show_trigger_data_trig on trigger_test;
 statement: DROP FUNCTION trigger_data();
 statement: DROP TABLE trigger_test;
 statement: CREATE TABLE trigger_test (f1 int, f2 text, f3 text);
 statement: CREATE FUNCTION mytrigger() RETURNS trigger LANGUAGE plpgsql as $$                                                                                                                                                                                                                      +
 begin                                                                                                                                                                                                                                                                                              +
         if row(old.*) = row(new.*) then                                                                                                                                                                                                                                                            +
                 raise notice 'row % not changed', new.f1;                                                                                                                                                                                                                                          +
         else                                                                                                                                                                                                                                                                                       +
                 raise notice 'row % changed', new.f1;                                                                                                                                                                                                                                              +
         end if;                                                                                                                                                                                                                                                                                    +
         return new;                                                                                                                                                                                                                                                                                +
 end$$;
 statement: CREATE TRIGGER t                                                                                                                                                                                                                                                                        +
 BEFORE UPDATE ON trigger_test                                                                                                                                                                                                                                                                      +
 FOR EACH ROW EXECUTE PROCEDURE mytrigger();
 statement: INSERT INTO trigger_test VALUES(1, 'foo', 'bar');
 statement: INSERT INTO trigger_test VALUES(2, 'baz', 'quux');
 statement: UPDATE trigger_test SET f3 = 'bar';
 statement: UPDATE trigger_test SET f3 = NULL;
 statement: UPDATE trigger_test SET f3 = NULL;
 statement: CREATE OR REPLACE FUNCTION mytrigger() RETURNS trigger LANGUAGE plpgsql as $$                                                                                                                                                                                                           +
 begin                                                                                                                                                                                                                                                                                              +
         if row(old.*) is distinct from row(new.*) then                                                                                                                                                                                                                                             +
                 raise notice 'row % changed', new.f1;                                                                                                                                                                                                                                              +
         else                                                                                                                                                                                                                                                                                       +
                 raise notice 'row % not changed', new.f1;                                                                                                                                                                                                                                          +
         end if;                                                                                                                                                                                                                                                                                    +
         return new;                                                                                                                                                                                                                                                                                +
 end$$;
 statement: UPDATE trigger_test SET f3 = 'bar';
 statement: UPDATE trigger_test SET f3 = NULL;
 statement: UPDATE trigger_test SET f3 = NULL;
 statement: DROP TABLE trigger_test;
 statement: DROP FUNCTION mytrigger();
 statement: CREATE FUNCTION serializable_update_trig() RETURNS trigger LANGUAGE plpgsql AS                                                                                                                                                                                                          +
 $$                                                                                                                                                                                                                                                                                                 +
 declare                                                                                                                                                                                                                                                                                            +
         rec record;                                                                                                                                                                                                                                                                                +
 begin                                                                                                                                                                                                                                                                                              +
         new.description = 'updated in trigger';                                                                                                                                                                                                                                                    +
         return new;                                                                                                                                                                                                                                                                                +
 end;                                                                                                                                                                                                                                                                                               +
 $$;
 statement: CREATE TABLE serializable_update_tab (                                                                                                                                                                                                                                                  +
         id int,                                                                                                                                                                                                                                                                                    +
         filler  text,                                                                                                                                                                                                                                                                              +
         description text                                                                                                                                                                                                                                                                           +
 );
 statement: CREATE TRIGGER serializable_update_trig BEFORE UPDATE ON serializable_update_tab                                                                                                                                                                                                        +
         FOR EACH ROW EXECUTE PROCEDURE serializable_update_trig();
 statement: INSERT INTO serializable_update_tab SELECT a, repeat('xyzxz', 100), 'new'                                                                                                                                                                                                               +
         FROM generate_series(1, 50) a;
 statement: BEGIN;
 statement: SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
 statement: UPDATE serializable_update_tab SET description = 'no no', id = 1 WHERE id = 1;
 statement: COMMIT;
 statement: SELECT description FROM serializable_update_tab WHERE id = 1;
 statement: DROP TABLE serializable_update_tab;
 statement: CREATE TABLE min_updates_test (                                                                                                                                                                                                                                                         +
         f1      text,                                                                                                                                                                                                                                                                              +
         f2 int,                                                                                                                                                                                                                                                                                    +
         f3 int);
 statement: CREATE TABLE min_updates_test_oids (                                                                                                                                                                                                                                                    +
         f1      text,                                                                                                                                                                                                                                                                              +
         f2 int,                                                                                                                                                                                                                                                                                    +
         f3 int) WITH OIDS;
 statement: INSERT INTO min_updates_test VALUES ('a',1,2),('b','2',null);
 statement: INSERT INTO min_updates_test_oids VALUES ('a',1,2),('b','2',null);
 statement: CREATE TRIGGER z_min_update                                                                                                                                                                                                                                                             +
 BEFORE UPDATE ON min_updates_test                                                                                                                                                                                                                                                                  +
 FOR EACH ROW EXECUTE PROCEDURE suppress_redundant_updates_trigger();
 statement: CREATE TRIGGER z_min_update                                                                                                                                                                                                                                                             +
 BEFORE UPDATE ON min_updates_test_oids                                                                                                                                                                                                                                                             +
 FOR EACH ROW EXECUTE PROCEDURE suppress_redundant_updates_trigger();
 statement: UPDATE min_updates_test SET f1 = f1;
 statement: UPDATE min_updates_test SET f2 = f2 + 1;
 statement: UPDATE min_updates_test SET f3 = 2 WHERE f3 is null;
 statement: UPDATE min_updates_test_oids SET f1 = f1;
 statement: UPDATE min_updates_test_oids SET f2 = f2 + 1;
 statement: UPDATE min_updates_test_oids SET f3 = 2 WHERE f3 is null;
 statement: SELECT * FROM min_updates_test;
 statement: SELECT * FROM min_updates_test_oids;
 statement: DROP TABLE min_updates_test;
 statement: DROP TABLE min_updates_test_oids;
 statement: CREATE VIEW main_view AS SELECT a, b FROM main_table;
 statement: CREATE OR REPLACE FUNCTION view_trigger() RETURNS trigger                                                                                                                                                                                                                               +
 LANGUAGE plpgsql AS $$                                                                                                                                                                                                                                                                             +
 declare                                                                                                                                                                                                                                                                                            +
     argstr text := '';                                                                                                                                                                                                                                                                             +
 begin                                                                                                                                                                                                                                                                                              +
     for i in 0 .. TG_nargs - 1 loop                                                                                                                                                                                                                                                                +
         if i > 0 then                                                                                                                                                                                                                                                                              +
             argstr := argstr || ', ';                                                                                                                                                                                                                                                              +
         end if;                                                                                                                                                                                                                                                                                    +
         argstr := argstr || TG_argv[i];                                                                                                                                                                                                                                                            +
     end loop;                                                                                                                                                                                                                                                                                      +
                                                                                                                                                                                                                                                                                                    +
     raise notice '% % % % (%)', TG_RELNAME, TG_WHEN, TG_OP, TG_LEVEL, argstr;                                                                                                                                                                                                                      +
                                                                                                                                                                                                                                                                                                    +
     if TG_LEVEL = 'ROW' then                                                                                                                                                                                                                                                                       +
         if TG_OP = 'INSERT' then                                                                                                                                                                                                                                                                   +
             raise NOTICE 'NEW: %', NEW;                                                                                                                                                                                                                                                            +
             INSERT INTO main_table VALUES (NEW.a, NEW.b);                                                                                                                                                                                                                                          +
             RETURN NEW;                                                                                                                                                                                                                                                                            +
         end if;                                                                                                                                                                                                                                                                                    +
                                                                                                                                                                                                                                                                                                    +
         if TG_OP = 'UPDATE' then                                                                                                                                                                                                                                                                   +
             raise NOTICE 'OLD: %, NEW: %', OLD, NEW;                                                                                                                                                                                                                                               +
             UPDATE main_table SET a = NEW.a, b = NEW.b WHERE a = OLD.a AND b = OLD.b;                                                                                                                                                                                                              +
             if NOT FOUND then RETURN NULL; end if;                                                                                                                                                                                                                                                 +
             RETURN NEW;                                                                                                                                                                                                                                                                            +
         end if;                                                                                                                                                                                                                                                                                    +
                                                                                                                                                                                                                                                                                                    +
         if TG_OP = 'DELETE' then                                                                                                                                                                                                                                                                   +
             raise NOTICE 'OLD: %', OLD;                                                                                                                                                                                                                                                            +
             DELETE FROM main_table WHERE a = OLD.a AND b = OLD.b;                                                                                                                                                                                                                                  +
             if NOT FOUND then RETURN NULL; end if;                                                                                                                                                                                                                                                 +
             RETURN OLD;                                                                                                                                                                                                                                                                            +
         end if;                                                                                                                                                                                                                                                                                    +
     end if;                                                                                                                                                                                                                                                                                        +
                                                                                                                                                                                                                                                                                                    +
     RETURN NULL;                                                                                                                                                                                                                                                                                   +
 end;                                                                                                                                                                                                                                                                                               +
 $$;
 statement: CREATE TRIGGER invalid_trig BEFORE INSERT ON main_view                                                                                                                                                                                                                                  +
 FOR EACH ROW EXECUTE PROCEDURE trigger_func('before_ins_row');
 statement: CREATE TRIGGER invalid_trig BEFORE UPDATE ON main_view                                                                                                                                                                                                                                  +
 FOR EACH ROW EXECUTE PROCEDURE trigger_func('before_upd_row');
 statement: CREATE TRIGGER invalid_trig BEFORE DELETE ON main_view                                                                                                                                                                                                                                  +
 FOR EACH ROW EXECUTE PROCEDURE trigger_func('before_del_row');
 statement: CREATE TRIGGER invalid_trig AFTER INSERT ON main_view                                                                                                                                                                                                                                   +
 FOR EACH ROW EXECUTE PROCEDURE trigger_func('before_ins_row');
 statement: CREATE TRIGGER invalid_trig AFTER UPDATE ON main_view                                                                                                                                                                                                                                   +
 FOR EACH ROW EXECUTE PROCEDURE trigger_func('before_upd_row');
 statement: CREATE TRIGGER invalid_trig AFTER DELETE ON main_view                                                                                                                                                                                                                                   +
 FOR EACH ROW EXECUTE PROCEDURE trigger_func('before_del_row');
 statement: CREATE TRIGGER invalid_trig BEFORE TRUNCATE ON main_view                                                                                                                                                                                                                                +
 EXECUTE PROCEDURE trigger_func('before_tru_row');
 statement: CREATE TRIGGER invalid_trig AFTER TRUNCATE ON main_view                                                                                                                                                                                                                                 +
 EXECUTE PROCEDURE trigger_func('before_tru_row');
 statement: CREATE TRIGGER invalid_trig INSTEAD OF INSERT ON main_table                                                                                                                                                                                                                             +
 FOR EACH ROW EXECUTE PROCEDURE view_trigger('instead_of_ins');
 statement: CREATE TRIGGER invalid_trig INSTEAD OF UPDATE ON main_table                                                                                                                                                                                                                             +
 FOR EACH ROW EXECUTE PROCEDURE view_trigger('instead_of_upd');
 statement: CREATE TRIGGER invalid_trig INSTEAD OF DELETE ON main_table                                                                                                                                                                                                                             +
 FOR EACH ROW EXECUTE PROCEDURE view_trigger('instead_of_del');
 statement: CREATE TRIGGER invalid_trig INSTEAD OF UPDATE ON main_view                                                                                                                                                                                                                              +
 FOR EACH ROW WHEN (OLD.a <> NEW.a) EXECUTE PROCEDURE view_trigger('instead_of_upd');
 statement: CREATE TRIGGER invalid_trig INSTEAD OF UPDATE OF a ON main_view                                                                                                                                                                                                                         +
 FOR EACH ROW EXECUTE PROCEDURE view_trigger('instead_of_upd');
 statement: CREATE TRIGGER invalid_trig INSTEAD OF UPDATE ON main_view                                                                                                                                                                                                                              +
 EXECUTE PROCEDURE view_trigger('instead_of_upd');
 statement: CREATE TRIGGER instead_of_insert_trig INSTEAD OF INSERT ON main_view                                                                                                                                                                                                                    +
 FOR EACH ROW EXECUTE PROCEDURE view_trigger('instead_of_ins');
 statement: CREATE TRIGGER instead_of_update_trig INSTEAD OF UPDATE ON main_view                                                                                                                                                                                                                    +
 FOR EACH ROW EXECUTE PROCEDURE view_trigger('instead_of_upd');
 statement: CREATE TRIGGER instead_of_delete_trig INSTEAD OF DELETE ON main_view                                                                                                                                                                                                                    +
 FOR EACH ROW EXECUTE PROCEDURE view_trigger('instead_of_del');
 statement: CREATE TRIGGER before_ins_stmt_trig BEFORE INSERT ON main_view                                                                                                                                                                                                                          +
 FOR EACH STATEMENT EXECUTE PROCEDURE view_trigger('before_view_ins_stmt');
 statement: CREATE TRIGGER before_upd_stmt_trig BEFORE UPDATE ON main_view                                                                                                                                                                                                                          +
 FOR EACH STATEMENT EXECUTE PROCEDURE view_trigger('before_view_upd_stmt');
 statement: CREATE TRIGGER before_del_stmt_trig BEFORE DELETE ON main_view                                                                                                                                                                                                                          +
 FOR EACH STATEMENT EXECUTE PROCEDURE view_trigger('before_view_del_stmt');
 statement: CREATE TRIGGER after_ins_stmt_trig AFTER INSERT ON main_view                                                                                                                                                                                                                            +
 FOR EACH STATEMENT EXECUTE PROCEDURE view_trigger('after_view_ins_stmt');
 statement: CREATE TRIGGER after_upd_stmt_trig AFTER UPDATE ON main_view                                                                                                                                                                                                                            +
 FOR EACH STATEMENT EXECUTE PROCEDURE view_trigger('after_view_upd_stmt');
 statement: CREATE TRIGGER after_del_stmt_trig AFTER DELETE ON main_view                                                                                                                                                                                                                            +
 FOR EACH STATEMENT EXECUTE PROCEDURE view_trigger('after_view_del_stmt');
 statement: INSERT INTO main_view VALUES (20, 30);
 statement: INSERT INTO main_view VALUES (21, 31) RETURNING a, b;
 statement: UPDATE main_view SET b = 31 WHERE a = 20;
 statement: UPDATE main_view SET b = 32 WHERE a = 21 AND b = 31 RETURNING a, b;
 statement: DROP TRIGGER before_upd_a_row_trig ON main_table;
 statement: UPDATE main_view SET b = 31 WHERE a = 20;
 statement: UPDATE main_view SET b = 32 WHERE a = 21 AND b = 31 RETURNING a, b;
 statement: UPDATE main_view SET b = 0 WHERE false;
 statement: DELETE FROM main_view WHERE a IN (20,21);
 statement: DELETE FROM main_view WHERE a = 31 RETURNING a, b;
 statement: SELECT c.oid,                                                                                                                                                                                                                                                                           +
   n.nspname,                                                                                                                                                                                                                                                                                       +
   c.relname                                                                                                                                                                                                                                                                                        +
 FROM pg_catalog.pg_class c                                                                                                                                                                                                                                                                         +
      LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace                                                                                                                                                                                                                                 +
 WHERE c.relname ~ '^(main_view)$'                                                                                                                                                                                                                                                                  +
   AND pg_catalog.pg_table_is_visible(c.oid)                                                                                                                                                                                                                                                        +
 ORDER BY 2, 3;
 statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, c.relhasoids, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident+
 FROM pg_catalog.pg_class c                                                                                                                                                                                                                                                                         +
  LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)                                                                                                                                                                                                                                    +
 WHERE c.oid = '28044';
 statement: SELECT a.attname,                                                                                                                                                                                                                                                                       +
   pg_catalog.format_type(a.atttypid, a.atttypmod),                                                                                                                                                                                                                                                 +
   (SELECT substring(pg_catalog.pg_get_expr(d.adbin, d.adrelid) for 128)                                                                                                                                                                                                                            +
    FROM pg_catalog.pg_attrdef d                                                                                                                                                                                                                                                                    +
    WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),                                                                                                                                                                                                                           +
   a.attnotnull, a.attnum,                                                                                                                                                                                                                                                                          +
   (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t                                                                                                                                                                                                                          +
    WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,                                                                                                                                                                                      +
   NULL AS indexdef,                                                                                                                                                                                                                                                                                +
   NULL AS attfdwoptions                                                                                                                                                                                                                                                                            +
 FROM pg_catalog.pg_attribute a                                                                                                                                                                                                                                                                     +
 WHERE a.attrelid = '28044' AND a.attnum > 0 AND NOT a.attisdropped                                                                                                                                                                                                                                 +
 ORDER BY a.attnum;
 statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal                                                                                                                                                                                                 +
 FROM pg_catalog.pg_trigger t                                                                                                                                                                                                                                                                       +
 WHERE t.tgrelid = '28044' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D'))                                                                                                                                                                                                       +
 ORDER BY 1;
 statement: DROP TRIGGER instead_of_insert_trig ON main_view;
 statement: DROP TRIGGER instead_of_delete_trig ON main_view;
 statement: SELECT c.oid,                                                                                                                                                                                                                                                                           +
   n.nspname,                                                                                                                                                                                                                                                                                       +
   c.relname                                                                                                                                                                                                                                                                                        +
 FROM pg_catalog.pg_class c                                                                                                                                                                                                                                                                         +
      LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace                                                                                                                                                                                                                                 +
 WHERE c.relname ~ '^(main_view)$'                                                                                                                                                                                                                                                                  +
   AND pg_catalog.pg_table_is_visible(c.oid)                                                                                                                                                                                                                                                        +
 ORDER BY 2, 3;
 statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, c.relhasoids, pg_catalog.array_to_string(c.reloptions || array(select 'toast.' || x from pg_catalog.unnest(tc.reloptions) x), ', ')                             +
 , c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident                                                                                                                                                   +
 FROM pg_catalog.pg_class c                                                                                                                                                                                                                                                                         +
  LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)                                                                                                                                                                                                                                    +
 WHERE c.oid = '28044';
 statement: SELECT a.attname,                                                                                                                                                                                                                                                                       +
   pg_catalog.format_type(a.atttypid, a.atttypmod),                                                                                                                                                                                                                                                 +
   (SELECT substring(pg_catalog.pg_get_expr(d.adbin, d.adrelid) for 128)                                                                                                                                                                                                                            +
    FROM pg_catalog.pg_attrdef d                                                                                                                                                                                                                                                                    +
    WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),                                                                                                                                                                                                                           +
   a.attnotnull, a.attnum,                                                                                                                                                                                                                                                                          +
   (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t                                                                                                                                                                                                                          +
    WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,                                                                                                                                                                                      +
   NULL AS indexdef,                                                                                                                                                                                                                                                                                +
   NULL AS attfdwoptions,                                                                                                                                                                                                                                                                           +
   a.attstorage,                                                                                                                                                                                                                                                                                    +
   CASE WHEN a.attstattarget=-1 THEN NULL ELSE a.attstattarget END AS attstattarget, pg_catalog.col_description(a.attrelid, a.attnum)                                                                                                                                                               +
 FROM pg_catalog.pg_attribute a                                                                                                                                                                                                                                                                     +
 WHERE a.attrelid = '28044' AND a.attnum > 0 AND NOT a.attisdropped                                                                                                                                                                                                                                 +
 ORDER BY a.attnum;
 statement: SELECT pg_catalog.pg_get_viewdef('28044'::pg_catalog.oid, true);
 statement: SELECT r.rulename, trim(trailing ';' from pg_catalog.pg_get_ruledef(r.oid, true))                                                                                                                                                                                                       +
 FROM pg_catalog.pg_rewrite r                                                                                                                                                                                                                                                                       +
 WHERE r.ev_class = '28044' AND r.rulename != '_RETURN' ORDER BY 1;
 statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal                                                                                                                                                                                                 +
 FROM pg_catalog.pg_trigger t                                                                                                                                                                                                                                                                       +
 WHERE t.tgrelid = '28044' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D'))                                                                                                                                                                                                       +
 ORDER BY 1;
 statement: DROP VIEW main_view;
 statement: CREATE TABLE country_table (                                                                                                                                                                                                                                                            +
     country_id        serial primary key,                                                                                                                                                                                                                                                          +
     country_name    text unique not null,                                                                                                                                                                                                                                                          +
     continent        text not null                                                                                                                                                                                                                                                                 +
 );
 statement: INSERT INTO country_table (country_name, continent)                                                                                                                                                                                                                                     +
     VALUES ('Japan', 'Asia'),                                                                                                                                                                                                                                                                      +
            ('UK', 'Europe'),                                                                                                                                                                                                                                                                       +
            ('USA', 'North America')                                                                                                                                                                                                                                                                +
     RETURNING *;
 statement: CREATE TABLE city_table (                                                                                                                                                                                                                                                               +
     city_id        serial primary key,                                                                                                                                                                                                                                                             +
     city_name    text not null,                                                                                                                                                                                                                                                                    +
     population    bigint,                                                                                                                                                                                                                                                                          +
     country_id    int references country_table                                                                                                                                                                                                                                                     +
 );
 statement: CREATE VIEW city_view AS                                                                                                                                                                                                                                                                +
     SELECT city_id, city_name, population, country_name, continent                                                                                                                                                                                                                                 +
     FROM city_table ci                                                                                                                                                                                                                                                                             +
     LEFT JOIN country_table co ON co.country_id = ci.country_id;
 statement: CREATE FUNCTION city_insert() RETURNS trigger LANGUAGE plpgsql AS $$                                                                                                                                                                                                                    +
 declare                                                                                                                                                                                                                                                                                            +
     ctry_id int;                                                                                                                                                                                                                                                                                   +
 begin                                                                                                                                                                                                                                                                                              +
     if NEW.country_name IS NOT NULL then                                                                                                                                                                                                                                                           +
         SELECT country_id, continent INTO ctry_id, NEW.continent                                                                                                                                                                                                                                   +
             FROM country_table WHERE country_name = NEW.country_name;                                                                                                                                                                                                                              +
         if NOT FOUND then                                                                                                                                                                                                                                                                          +
             raise exception 'No such country: "%"', NEW.country_name;                                                                                                                                                                                                                              +
         end if;                                                                                                                                                                                                                                                                                    +
     else                                                                                                                                                                                                                                                                                           +
         NEW.continent := NULL;                                                                                                                                                                                                                                                                     +
     end if;                                                                                                                                                                                                                                                                                        +
                                                                                                                                                                                                                                                                                                    +
     if NEW.city_id IS NOT NULL then                                                                                                                                                                                                                                                                +
         INSERT INTO city_table                                                                                                                                                                                                                                                                     +
             VALUES(NEW.city_id, NEW.city_name, NEW.population, ctry_id);                                                                                                                                                                                                                           +
     else                                                                                                                                                                                                                                                                                           +
         INSERT INTO city_table(city_name, population, country_id)                                                                                                                                                                                                                                  +
             VALUES(NEW.city_name, NEW.population, ctry_id)                                                                                                                                                                                                                                         +
             RETURNING city_id INTO NEW.city_id;                                                                                                                                                                                                                                                    +
     end if;                                                                                                                                                                                                                                                                                        +
                                                                                                                                                                                                                                                                                                    +
     RETURN NEW;                                                                                                                                                                                                                                                                                    +
 end;                                                                                                                                                                                                                                                                                               +
 $$;
 statement: CREATE TRIGGER city_insert_trig INSTEAD OF INSERT ON city_view                                                                                                                                                                                                                          +
 FOR EACH ROW EXECUTE PROCEDURE city_insert();
 statement: CREATE FUNCTION city_delete() RETURNS trigger LANGUAGE plpgsql AS $$                                                                                                                                                                                                                    +
 begin                                                                                                                                                                                                                                                                                              +
     DELETE FROM city_table WHERE city_id = OLD.city_id;                                                                                                                                                                                                                                            +
     if NOT FOUND then RETURN NULL; end if;                                                                                                                                                                                                                                                         +
     RETURN OLD;                                                                                                                                                                                                                                                                                    +
 end;                                                                                                                                                                                                                                                                                               +
 $$;
 statement: CREATE TRIGGER city_delete_trig INSTEAD OF DELETE ON city_view                                                                                                                                                                                                                          +
 FOR EACH ROW EXECUTE PROCEDURE city_delete();
 statement: CREATE FUNCTION city_update() RETURNS trigger LANGUAGE plpgsql AS $$                                                                                                                                                                                                                    +
 declare                                                                                                                                                                                                                                                                                            +
     ctry_id int;                                                                                                                                                                                                                                                                                   +
 begin                                                                                                                                                                                                                                                                                              +
     if NEW.country_name IS DISTINCT FROM OLD.country_name then                                                                                                                                                                                                                                     +
         SELECT country_id, continent INTO ctry_id, NEW.continent                                                                                                                                                                                                                                   +
             FROM country_table WHERE country_name = NEW.country_name;                                                                                                                                                                                                                              +
         if NOT FOUND then                                                                                                                                                                                                                                                                          +
             raise exception 'No such country: "%"', NEW.country_name;                                                                                                                                                                                                                              +
         end if;                                                                                                                                                                                                                                                                                    +
                                                                                                                                                                                                                                                                                                    +
         UPDATE city_table SET city_name = NEW.city_name,                                                                                                                                                                                                                                           +
                               population = NEW.population,                                                                                                                                                                                                                                         +
                               country_id = ctry_id                                                                                                                                                                                                                                                 +
             WHERE city_id = OLD.city_id;                                                                                                                                                                                                                                                           +
     else                                                                                                                                                                                                                                                                                           +
         UPDATE city_table SET city_name = NEW.city_name,                                                                                                                                                                                                                                           +
                               population = NEW.population                                                                                                                                                                                                                                          +
             WHERE city_id = OLD.city_id;                                                                                                                                                                                                                                                           +
         NEW.continent := OLD.continent;                                                                                                                                                                                                                                                            +
     end if;                                                                                                                                                                                                                                                                                        +
                                                                                                                                                                                                                                                                                                    +
     if NOT FOUND then RETURN NULL; end if;                                                                                                                                                                                                                                                         +
     RETURN NEW;                                                                                                                                                                                                                                                                                    +
 end;                                                                                                                                                                                                                                                                                               +
 $$;
 statement: CREATE TRIGGER city_update_trig INSTEAD OF UPDATE ON city_view                                                                                                                                                                                                                          +
 FOR EACH ROW EXECUTE PROCEDURE city_update();
 statement: INSERT INTO city_view(city_name) VALUES('Tokyo') RETURNING *;
 statement: INSERT INTO city_view(city_name, population) VALUES('London', 7556900) RETURNING *;
 statement: INSERT INTO city_view(city_name, country_name) VALUES('Washington DC', 'USA') RETURNING *;
 statement: INSERT INTO city_view(city_id, city_name) VALUES(123456, 'New York') RETURNING *;
 statement: INSERT INTO city_view VALUES(234567, 'Birmingham', 1016800, 'UK', 'EU') RETURNING *;
 statement: UPDATE city_view SET country_name = 'Japon' WHERE city_name = 'Tokyo';
 statement: UPDATE city_view SET country_name = 'Japan' WHERE city_name = 'Takyo';
 statement: UPDATE city_view SET country_name = 'Japan' WHERE city_name = 'Tokyo' RETURNING *;
 statement: UPDATE city_view SET population = 13010279 WHERE city_name = 'Tokyo' RETURNING *;
 statement: UPDATE city_view SET country_name = 'UK' WHERE city_name = 'New York' RETURNING *;
 statement: UPDATE city_view SET country_name = 'USA', population = 8391881 WHERE city_name = 'New York' RETURNING *;
 statement: UPDATE city_view SET continent = 'EU' WHERE continent = 'Europe' RETURNING *;
 statement: UPDATE city_view v1 SET country_name = v2.country_name FROM city_view v2                                                                                                                                                                                                                +
     WHERE v2.city_name = 'Birmingham' AND v1.city_name = 'London' RETURNING *;
 statement: DELETE FROM city_view WHERE city_name = 'Birmingham' RETURNING *;
 statement: CREATE VIEW european_city_view AS                                                                                                                                                                                                                                                       +
     SELECT * FROM city_view WHERE continent = 'Europe';
 statement: SELECT count(*) FROM european_city_view;
 statement: CREATE FUNCTION no_op_trig_fn() RETURNS trigger LANGUAGE plpgsql                                                                                                                                                                                                                        +
 AS 'begin RETURN NULL; end';
 statement: CREATE TRIGGER no_op_trig INSTEAD OF INSERT OR UPDATE OR DELETE                                                                                                                                                                                                                         +
 ON european_city_view FOR EACH ROW EXECUTE PROCEDURE no_op_trig_fn();
 statement: INSERT INTO european_city_view VALUES (0, 'x', 10000, 'y', 'z');
 statement: UPDATE european_city_view SET population = 10000;
 statement: DELETE FROM european_city_view;
 statement: CREATE RULE european_city_insert_rule AS ON INSERT TO european_city_view                                                                                                                                                                                                                +
 DO INSTEAD INSERT INTO city_view                                                                                                                                                                                                                                                                   +
 VALUES (NEW.city_id, NEW.city_name, NEW.population, NEW.country_name, NEW.continent)                                                                                                                                                                                                               +
 RETURNING *;
 statement: CREATE RULE european_city_update_rule AS ON UPDATE TO european_city_view                                                                                                                                                                                                                +
 DO INSTEAD UPDATE city_view SET                                                                                                                                                                                                                                                                    +
     city_name = NEW.city_name,                                                                                                                                                                                                                                                                     +
     population = NEW.population,                                                                                                                                                                                                                                                                   +
     country_name = NEW.country_name                                                                                                                                                                                                                                                                +
 WHERE city_id = OLD.city_id                                                                                                                                                                                                                                                                        +
 RETURNING NEW.*;
 statement: CREATE RULE european_city_delete_rule AS ON DELETE TO european_city_view                                                                                                                                                                                                                +
 DO INSTEAD DELETE FROM city_view WHERE city_id = OLD.city_id RETURNING *;
 statement: INSERT INTO european_city_view(city_name, country_name)                                                                                                                                                                                                                                 +
     VALUES ('Cambridge', 'USA') RETURNING *;
 statement: UPDATE european_city_view SET country_name = 'UK'                                                                                                                                                                                                                                       +
     WHERE city_name = 'Cambridge';
 statement: DELETE FROM european_city_view WHERE city_name = 'Cambridge';
 statement: UPDATE city_view SET country_name = 'UK'                                                                                                                                                                                                                                                +
     WHERE city_name = 'Cambridge' RETURNING *;
 statement: UPDATE european_city_view SET population = 122800                                                                                                                                                                                                                                       +
     WHERE city_name = 'Cambridge' RETURNING *;
 statement: DELETE FROM european_city_view WHERE city_name = 'Cambridge' RETURNING *;
 statement: UPDATE city_view v SET population = 599657                                                                                                                                                                                                                                              +
     FROM city_table ci, country_table co                                                                                                                                                                                                                                                           +
     WHERE ci.city_name = 'Washington DC' and co.country_name = 'USA'                                                                                                                                                                                                                               +
     AND v.city_id = ci.city_id AND v.country_name = co.country_name                                                                                                                                                                                                                                +
     RETURNING co.country_id, v.country_name,                                                                                                                                                                                                                                                       +
               v.city_id, v.city_name, v.population;
 statement: SELECT * FROM city_view;
 statement: DROP TABLE city_table CASCADE;
 statement: DROP TABLE country_table;
 statement: create table depth_a (id int not null primary key);
 statement: create table depth_b (id int not null primary key);
 statement: create table depth_c (id int not null primary key);
 statement: create function depth_a_tf() returns trigger                                                                                                                                                                                                                                            +
   language plpgsql as $$                                                                                                                                                                                                                                                                           +
 begin                                                                                                                                                                                                                                                                                              +
   raise notice '%: depth = %', tg_name, pg_trigger_depth();                                                                                                                                                                                                                                        +
   insert into depth_b values (new.id);                                                                                                                                                                                                                                                             +
   raise notice '%: depth = %', tg_name, pg_trigger_depth();                                                                                                                                                                                                                                        +
   return new;                                                                                                                                                                                                                                                                                      +
 end;                                                                                                                                                                                                                                                                                               +
 $$;
 statement: create trigger depth_a_tr before insert on depth_a                                                                                                                                                                                                                                      +
   for each row execute procedure depth_a_tf();
 statement: create function depth_b_tf() returns trigger                                                                                                                                                                                                                                            +
   language plpgsql as $$                                                                                                                                                                                                                                                                           +
 begin                                                                                                                                                                                                                                                                                              +
   raise notice '%: depth = %', tg_name, pg_trigger_depth();                                                                                                                                                                                                                                        +
   begin                                                                                                                                                                                                                                                                                            +
     execute 'insert into depth_c values (' || new.id::text || ')';                                                                                                                                                                                                                                 +
   exception                                                                                                                                                                                                                                                                                        +
     when sqlstate 'U9999' then                                                                                                                                                                                                                                                                     +
       raise notice 'SQLSTATE = U9999: depth = %', pg_trigger_depth();                                                                                                                                                                                                                              +
   end;                                                                                                                                                                                                                                                                                             +
   raise notice '%: depth = %', tg_name, pg_trigger_depth();                                                                                                                                                                                                                                        +
   if new.id = 1 then                                                                                                                                                                                                                                                                               +
     execute 'insert into depth_c values (' || new.id::text || ')';                                                                                                                                                                                                                                 +
   end if;                                                                                                                                                                                                                                                                                          +
   return new;                                                                                                                                                                                                                                                                                      +
 end;                                                                                                                                                                                                                                                                                               +
 $$;
 statement: create trigger depth_b_tr before insert on depth_b                                                                                                                                                                                                                                      +
   for each row execute procedure depth_b_tf();
 statement: create function depth_c_tf() returns trigger                                                                                                                                                                                                                                            +
   language plpgsql as $$                                                                                                                                                                                                                                                                           +
 begin                                                                                                                                                                                                                                                                                              +
   raise notice '%: depth = %', tg_name, pg_trigger_depth();                                                                                                                                                                                                                                        +
   if new.id = 1 then                                                                                                                                                                                                                                                                               +
     raise exception sqlstate 'U9999';                                                                                                                                                                                                                                                              +
   end if;                                                                                                                                                                                                                                                                                          +
   raise notice '%: depth = %', tg_name, pg_trigger_depth();                                                                                                                                                                                                                                        +
   return new;                                                                                                                                                                                                                                                                                      +
 end;                                                                                                                                                                                                                                                                                               +
 $$;
 statement: create trigger depth_c_tr before insert on depth_c                                                                                                                                                                                                                                      +
   for each row execute procedure depth_c_tf();
 statement: select pg_trigger_depth();
 statement: insert into depth_a values (1);
 statement: select pg_trigger_depth();
 statement: insert into depth_a values (2);
 statement: select pg_trigger_depth();
 statement: drop table depth_a, depth_b, depth_c;
 statement: drop function depth_a_tf();
 statement: drop function depth_b_tf();
 statement: drop function depth_c_tf();
 statement: create temp table parent (                                                                                                                                                                                                                                                              +
     aid int not null primary key,                                                                                                                                                                                                                                                                  +
     val1 text,                                                                                                                                                                                                                                                                                     +
     val2 text,                                                                                                                                                                                                                                                                                     +
     val3 text,                                                                                                                                                                                                                                                                                     +
     val4 text,                                                                                                                                                                                                                                                                                     +
     bcnt int not null default 0);
 statement: create temp table child (                                                                                                                                                                                                                                                               +
     bid int not null primary key,                                                                                                                                                                                                                                                                  +
     aid int not null,                                                                                                                                                                                                                                                                              +
     val1 text);
 statement: create function parent_upd_func()                                                                                                                                                                                                                                                       +
   returns trigger language plpgsql as                                                                                                                                                                                                                                                              +
 $$                                                                                                                                                                                                                                                                                                 +
 begin                                                                                                                                                                                                                                                                                              +
   if old.val1 <> new.val1 then                                                                                                                                                                                                                                                                     +
     new.val2 = new.val1;                                                                                                                                                                                                                                                                           +
     delete from child where child.aid = new.aid and child.val1 = new.val1;                                                                                                                                                                                                                         +
   end if;                                                                                                                                                                                                                                                                                          +
   return new;                                                                                                                                                                                                                                                                                      +
 end;                                                                                                                                                                                                                                                                                               +
 $$;
 statement: create trigger parent_upd_trig before update on parent                                                                                                                                                                                                                                  +
   for each row execute procedure parent_upd_func();
 statement: create function parent_del_func()                                                                                                                                                                                                                                                       +
   returns trigger language plpgsql as                                                                                                                                                                                                                                                              +
 $$                                                                                                                                                                                                                                                                                                 +
 begin                                                                                                                                                                                                                                                                                              +
   delete from child where aid = old.aid;                                                                                                                                                                                                                                                           +
   return old;                                                                                                                                                                                                                                                                                      +
 end;                                                                                                                                                                                                                                                                                               +
 $$;
 statement: create trigger parent_del_trig before delete on parent                                                                                                                                                                                                                                  +
   for each row execute procedure parent_del_func();
 statement: create function child_ins_func()                                                                                                                                                                                                                                                        +
   returns trigger language plpgsql as                                                                                                                                                                                                                                                              +
 $$                                                                                                                                                                                                                                                                                                 +
 begin                                                                                                                                                                                                                                                                                              +
   update parent set bcnt = bcnt + 1 where aid = new.aid;                                                                                                                                                                                                                                           +
   return new;                                                                                                                                                                                                                                                                                      +
 end;                                                                                                                                                                                                                                                                                               +
 $$;
 statement: create trigger child_ins_trig after insert on child                                                                                                                                                                                                                                     +
   for each row execute procedure child_ins_func();
 statement: create function child_del_func()                                                                                                                                                                                                                                                        +
   returns trigger language plpgsql as                                                                                                                                                                                                                                                              +
 $$                                                                                                                                                                                                                                                                                                 +
 begin                                                                                                                                                                                                                                                                                              +
   update parent set bcnt = bcnt - 1 where aid = old.aid;                                                                                                                                                                                                                                           +
   return old;                                                                                                                                                                                                                                                                                      +
 end;                                                                                                                                                                                                                                                                                               +
 $$;
 statement: create trigger child_del_trig after delete on child                                                                                                                                                                                                                                     +
   for each row execute procedure child_del_func();
 statement: insert into parent values (1, 'a', 'a', 'a', 'a', 0);
 statement: insert into child values (10, 1, 'b');
 statement: select * from parent;
 statement: select * from child;
 statement: update parent set val1 = 'b' where aid = 1;
 statement: select * from parent;
 statement: select * from child;
 statement: delete from parent where aid = 1;
 statement: select * from parent;
 statement: select * from child;
 statement: create or replace function parent_del_func()                                                                                                                                                                                                                                            +
   returns trigger language plpgsql as                                                                                                                                                                                                                                                              +
 $$                                                                                                                                                                                                                                                                                                 +
 begin                                                                                                                                                                                                                                                                                              +
   delete from child where aid = old.aid;                                                                                                                                                                                                                                                           +
   if found then                                                                                                                                                                                                                                                                                    +
     delete from parent where aid = old.aid;                                                                                                                                                                                                                                                        +
     return null; -- cancel outer deletion                                                                                                                                                                                                                                                          +
   end if;                                                                                                                                                                                                                                                                                          +
   return old;                                                                                                                                                                                                                                                                                      +
 end;                                                                                                                                                                                                                                                                                               +
 $$;
 statement: delete from parent where aid = 1;
 statement: select * from parent;
 statement: select * from child;
 statement: drop table parent, child;
 statement: drop function parent_upd_func();
 statement: drop function parent_del_func();
 statement: drop function child_ins_func();
 statement: drop function child_del_func();
 statement: create temp table self_ref_trigger (                                                                                                                                                                                                                                                    +
     id int primary key,                                                                                                                                                                                                                                                                            +
     parent int references self_ref_trigger,                                                                                                                                                                                                                                                        +
     data text,                                                                                                                                                                                                                                                                                     +
     nchildren int not null default 0                                                                                                                                                                                                                                                               +
 );
 statement: create function self_ref_trigger_ins_func()                                                                                                                                                                                                                                             +
   returns trigger language plpgsql as                                                                                                                                                                                                                                                              +
 $$                                                                                                                                                                                                                                                                                                 +
 begin                                                                                                                                                                                                                                                                                              +
   if new.parent is not null then                                                                                                                                                                                                                                                                   +
     update self_ref_trigger set nchildren = nchildren + 1                                                                                                                                                                                                                                          +
       where id = new.parent;                                                                                                                                                                                                                                                                       +
   end if;                                                                                                                                                                                                                                                                                          +
   return new;                                                                                                                                                                                                                                                                                      +
 end;                                                                                                                                                                                                                                                                                               +
 $$;
 statement: create trigger self_ref_trigger_ins_trig before insert on self_ref_trigger                                                                                                                                                                                                              +
   for each row execute procedure self_ref_trigger_ins_func();
 statement: create function self_ref_trigger_del_func()                                                                                                                                                                                                                                             +
   returns trigger language plpgsql as                                                                                                                                                                                                                                                              +
 $$                                                                                                                                                                                                                                                                                                 +
 begin                                                                                                                                                                                                                                                                                              +
   if old.parent is not null then                                                                                                                                                                                                                                                                   +
     update self_ref_trigger set nchildren = nchildren - 1                                                                                                                                                                                                                                          +
       where id = old.parent;                                                                                                                                                                                                                                                                       +
   end if;                                                                                                                                                                                                                                                                                          +
   return old;                                                                                                                                                                                                                                                                                      +
 end;                                                                                                                                                                                                                                                                                               +
 $$;
 statement: create trigger self_ref_trigger_del_trig before delete on self_ref_trigger                                                                                                                                                                                                              +
   for each row execute procedure self_ref_trigger_del_func();
 statement: insert into self_ref_trigger values (1, null, 'root');
 statement: insert into self_ref_trigger values (2, 1, 'root child A');
 statement: insert into self_ref_trigger values (3, 1, 'root child B');
 statement: insert into self_ref_trigger values (4, 2, 'grandchild 1');
 statement: insert into self_ref_trigger values (5, 3, 'grandchild 2');
 statement: update self_ref_trigger set data = 'root!' where id = 1;
 statement: select * from self_ref_trigger;
 statement: delete from self_ref_trigger;
 statement: select * from self_ref_trigger;
 statement: drop table self_ref_trigger;
 statement: drop function self_ref_trigger_ins_func();
 statement: drop function self_ref_trigger_del_func();
 statement: create table upsert (key int4 primary key, color text);
 statement: create function upsert_before_func()                                                                                                                                                                                                                                                    +
   returns trigger language plpgsql as                                                                                                                                                                                                                                                              +
 $$                                                                                                                                                                                                                                                                                                 +
 begin                                                                                                                                                                                                                                                                                              +
   if (TG_OP = 'UPDATE') then                                                                                                                                                                                                                                                                       +
     raise warning 'before update (old): %', old.*::text;                                                                                                                                                                                                                                           +
     raise warning 'before update (new): %', new.*::text;                                                                                                                                                                                                                                           +
   elsif (TG_OP = 'INSERT') then                                                                                                                                                                                                                                                                    +
     raise warning 'before insert (new): %', new.*::text;                                                                                                                                                                                                                                           +
     if new.key % 2 = 0 then                                                                                                                                                                                                                                                                        +
       new.key := new.key + 1;                                                                                                                                                                                                                                                                      +
       new.color := new.color || ' trig modified';                                                                                                                                                                                                                                                  +
       raise warning 'before insert (new, modified): %', new.*::text;                                                                                                                                                                                                                               +
     end if;                                                                                                                                                                                                                                                                                        +
   end if;                                                                                                                                                                                                                                                                                          +
   return new;                                                                                                                                                                                                                                                                                      +
 end;                                                                                                                                                                                                                                                                                               +
 $$;
 statement: create trigger upsert_before_trig before insert or update on upsert                                                                                                                                                                                                                     +
   for each row execute procedure upsert_before_func();
 statement: create function upsert_after_func()                                                                                                                                                                                                                                                     +
   returns trigger language plpgsql as                                                                                                                                                                                                                                                              +
 $$                                                                                                                                                                                                                                                                                                 +
 begin                                                                                                                                                                                                                                                                                              +
   if (TG_OP = 'UPDATE') then                                                                                                                                                                                                                                                                       +
     raise warning 'after update (old): %', old.*::text;                                                                                                                                                                                                                                            +
     raise warning 'after update (new): %', new.*::text;                                                                                                                                                                                                                                            +
   elsif (TG_OP = 'INSERT') then                                                                                                                                                                                                                                                                    +
     raise warning 'after insert (new): %', new.*::text;                                                                                                                                                                                                                                            +
   end if;                                                                                                                                                                                                                                                                                          +
   return null;                                                                                                                                                                                                                                                                                     +
 end;                                                                                                                                                                                                                                                                                               +
 $$;
 statement: create trigger upsert_after_trig after insert or update on upsert                                                                                                                                                                                                                       +
   for each row execute procedure upsert_after_func();
 statement: insert into upsert values(1, 'black') on conflict (key) do update set color = 'updated ' || upsert.color;
 statement: insert into upsert values(2, 'red') on conflict (key) do update set color = 'updated ' || upsert.color;
 statement: insert into upsert values(3, 'orange') on conflict (key) do update set color = 'updated ' || upsert.color;
 statement: insert into upsert values(4, 'green') on conflict (key) do update set color = 'updated ' || upsert.color;
 statement: insert into upsert values(5, 'purple') on conflict (key) do update set color = 'updated ' || upsert.color;
 statement: insert into upsert values(6, 'white') on conflict (key) do update set color = 'updated ' || upsert.color;
 statement: insert into upsert values(7, 'pink') on conflict (key) do update set color = 'updated ' || upsert.color;
 statement: insert into upsert values(8, 'yellow') on conflict (key) do update set color = 'updated ' || upsert.color;
 statement: select * from upsert;
 statement: drop table upsert;
 statement: drop function upsert_before_func();
 statement: drop function upsert_after_func();

