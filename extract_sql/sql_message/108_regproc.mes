LOG:  statement: select message from postgres_log where query is null;
 statement: /* If objects exist, return oids */                     +
 CREATE ROLE regtestrole;
 statement: SELECT regoper('||/');
 statement: SELECT regoperator('+(int4,int4)');
 statement: SELECT regproc('now');
 statement: SELECT regprocedure('abs(numeric)');
 statement: SELECT regclass('pg_class');
 statement: SELECT regtype('int4');
 statement: SELECT to_regoper('||/');
 statement: SELECT to_regoperator('+(int4,int4)');
 statement: SELECT to_regproc('now');
 statement: SELECT to_regprocedure('abs(numeric)');
 statement: SELECT to_regclass('pg_class');
 statement: SELECT to_regtype('int4');
 statement: SELECT regoper('pg_catalog.||/');
 statement: SELECT regoperator('pg_catalog.+(int4,int4)');
 statement: SELECT regproc('pg_catalog.now');
 statement: SELECT regprocedure('pg_catalog.abs(numeric)');
 statement: SELECT regclass('pg_catalog.pg_class');
 statement: SELECT regtype('pg_catalog.int4');
 statement: SELECT to_regoper('pg_catalog.||/');
 statement: SELECT to_regproc('pg_catalog.now');
 statement: SELECT to_regprocedure('pg_catalog.abs(numeric)');
 statement: SELECT to_regclass('pg_catalog.pg_class');
 statement: SELECT to_regtype('pg_catalog.int4');
 statement: SELECT regrole('regtestrole');
 statement: SELECT regrole('"regtestrole"');
 statement: SELECT regnamespace('pg_catalog');
 statement: SELECT regnamespace('"pg_catalog"');
 statement: SELECT to_regrole('regtestrole');
 statement: SELECT to_regrole('"regtestrole"');
 statement: SELECT to_regnamespace('pg_catalog');
 statement: SELECT to_regnamespace('"pg_catalog"');
 statement: /* If objects don't exist, raise errors. */             +
 DROP ROLE regtestrole;
 statement: SELECT regoper('||//');
 statement: SELECT regoperator('++(int4,int4)');
 statement: SELECT regproc('know');
 statement: SELECT regprocedure('absinthe(numeric)');
 statement: SELECT regclass('pg_classes');
 statement: SELECT regtype('int3');
 statement: SELECT regoper('ng_catalog.||/');
 statement: SELECT regoperator('ng_catalog.+(int4,int4)');
 statement: SELECT regproc('ng_catalog.now');
 statement: SELECT regprocedure('ng_catalog.abs(numeric)');
 statement: SELECT regclass('ng_catalog.pg_class');
 statement: SELECT regtype('ng_catalog.int4');
 statement: SELECT regrole('regtestrole');
 statement: SELECT regrole('"regtestrole"');
 statement: SELECT regrole('Nonexistent');
 statement: SELECT regrole('"Nonexistent"');
 statement: SELECT regrole('foo.bar');
 statement: SELECT regnamespace('Nonexistent');
 statement: SELECT regnamespace('"Nonexistent"');
 statement: SELECT regnamespace('foo.bar');
 statement: /* If objects don't exist, return NULL with no error. */+
                                                                    +
 SELECT to_regoper('||//');
 statement: SELECT to_regoperator('++(int4,int4)');
 statement: SELECT to_regproc('know');
 statement: SELECT to_regprocedure('absinthe(numeric)');
 statement: SELECT to_regclass('pg_classes');
 statement: SELECT to_regtype('int3');
 statement: SELECT to_regoper('ng_catalog.||/');
 statement: SELECT to_regoperator('ng_catalog.+(int4,int4)');
 statement: SELECT to_regproc('ng_catalog.now');
 statement: SELECT to_regprocedure('ng_catalog.abs(numeric)');
 statement: SELECT to_regclass('ng_catalog.pg_class');
 statement: SELECT to_regtype('ng_catalog.int4');
 statement: SELECT to_regrole('regtestrole');
 statement: SELECT to_regrole('"regtestrole"');
 statement: SELECT to_regrole('foo.bar');
 statement: SELECT to_regrole('Nonexistent');
 statement: SELECT to_regrole('"Nonexistent"');
 statement: SELECT to_regrole('foo.bar');
 statement: SELECT to_regnamespace('Nonexistent');
 statement: SELECT to_regnamespace('"Nonexistent"');
 statement: SELECT to_regnamespace('foo.bar');

