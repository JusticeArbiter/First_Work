LOG:  statement: select message from postgres_log where query is null;
 statement: CREATE TEMP TABLE x (                                                                                                                                                                                                                                      +
         a serial,                                                                                                                                                                                                                                                     +
         b int,                                                                                                                                                                                                                                                        +
         c text not null default 'stuff',                                                                                                                                                                                                                              +
         d text,                                                                                                                                                                                                                                                       +
         e text                                                                                                                                                                                                                                                        +
 ) WITH OIDS;
 statement: CREATE FUNCTION fn_x_before () RETURNS TRIGGER AS '                                                                                                                                                                                                        +
   BEGIN                                                                                                                                                                                                                                                               +
                 NEW.e := ''before trigger fired''::text;                                                                                                                                                                                                              +
                 return NEW;                                                                                                                                                                                                                                           +
         END;                                                                                                                                                                                                                                                          +
 ' LANGUAGE plpgsql;
 statement: CREATE FUNCTION fn_x_after () RETURNS TRIGGER AS '                                                                                                                                                                                                         +
   BEGIN                                                                                                                                                                                                                                                               +
                 UPDATE x set e=''after trigger fired'' where c=''stuff'';                                                                                                                                                                                             +
                 return NULL;                                                                                                                                                                                                                                          +
         END;                                                                                                                                                                                                                                                          +
 ' LANGUAGE plpgsql;
 statement: CREATE TRIGGER trg_x_after AFTER INSERT ON x                                                                                                                                                                                                               +
 FOR EACH ROW EXECUTE PROCEDURE fn_x_after();
 statement: CREATE TRIGGER trg_x_before BEFORE INSERT ON x                                                                                                                                                                                                             +
 FOR EACH ROW EXECUTE PROCEDURE fn_x_before();
 statement: COPY x (a, b, c, d, e) from stdin;
 statement: COPY x (b, d) from stdin;
 statement: COPY x (b, d) from stdin;
 statement: COPY x (a, b, c, d, e) from stdin;
 statement: COPY x (xyz) from stdin;
 statement: COPY x (a, b, c, d, e, d, c) from stdin;
 statement: COPY x from stdin;
 statement: COPY x from stdin;
 statement: COPY x from stdin;
 statement: COPY x from stdin;
 statement: COPY x (b, c, d, e) from stdin with oids delimiter ',' null 'x';
 statement: COPY x from stdin WITH DELIMITER AS ';' NULL AS '';
 statement: COPY x from stdin WITH DELIMITER AS ':' NULL AS E'\\X' ENCODING 'sql_ascii';
 statement: SELECT * FROM x;
 statement: CREATE TABLE no_oids (                                                                                                                                                                                                                                     +
         a       int,                                                                                                                                                                                                                                                  +
         b       int                                                                                                                                                                                                                                                   +
 ) WITHOUT OIDS;
 statement: INSERT INTO no_oids (a, b) VALUES (5, 10);
 statement: INSERT INTO no_oids (a, b) VALUES (20, 30);
 statement: COPY no_oids FROM stdin WITH OIDS;
 statement: COPY no_oids TO stdout WITH OIDS;
 statement: COPY x TO stdout;
 statement: COPY x (c, e) TO stdout;
 statement: COPY x (b, e) TO stdout WITH NULL 'I''m null';
 statement: CREATE TEMP TABLE y (                                                                                                                                                                                                                                      +
         col1 text,                                                                                                                                                                                                                                                    +
         col2 text                                                                                                                                                                                                                                                     +
 );
 statement: INSERT INTO y VALUES ('Jackson, Sam', E'\\h');
 statement: INSERT INTO y VALUES ('It is "perfect".',E'\t');
 statement: INSERT INTO y VALUES ('', NULL);
 statement: COPY y TO stdout WITH CSV;
 statement: COPY y TO stdout WITH CSV QUOTE '''' DELIMITER '|';
 statement: COPY y TO stdout WITH CSV FORCE QUOTE col2 ESCAPE E'\\' ENCODING 'sql_ascii';
 statement: COPY y TO stdout WITH CSV FORCE QUOTE *;
 statement: COPY y TO stdout (FORMAT CSV);
 statement: COPY y TO stdout (FORMAT CSV, QUOTE '''', DELIMITER '|');
 statement: COPY y TO stdout (FORMAT CSV, FORCE_QUOTE (col2), ESCAPE E'\\');
 statement: COPY y TO stdout (FORMAT CSV, FORCE_QUOTE *);
 statement: COPY  y TO STDOUT (FORMAT CSV)
 statement: COPY  y TO STDOUT (FORMAT CSV, QUOTE '''', DELIMITER '|')
 statement: COPY  y TO STDOUT (FORMAT CSV, FORCE_QUOTE (col2), ESCAPE E'\\')
 statement: COPY  y TO STDOUT (FORMAT CSV, FORCE_QUOTE *)
 statement: CREATE TEMP TABLE testnl (a int, b text, c int);
 statement: COPY testnl FROM stdin CSV;
 statement: CREATE TEMP TABLE testeoc (a text);
 statement: COPY testeoc FROM stdin CSV;
 statement: COPY testeoc TO stdout CSV;
 statement: CREATE TEMP TABLE testnull(a int, b text);
 statement: INSERT INTO testnull VALUES (1, E'\\0'), (NULL, NULL);
 statement: COPY testnull TO stdout WITH NULL AS E'\\0';
 statement: COPY testnull FROM stdin WITH NULL AS E'\\0';
 statement: SELECT * FROM testnull;
 statement: BEGIN;
 statement: CREATE TABLE vistest (LIKE testeoc);
 statement: COPY vistest FROM stdin CSV;
 statement: COMMIT;
 statement: SELECT * FROM vistest;
 statement: BEGIN;
 statement: TRUNCATE vistest;
 statement: COPY vistest FROM stdin CSV;
 statement: SELECT * FROM vistest;
 statement: SAVEPOINT s1;
 statement: TRUNCATE vistest;
 statement: COPY vistest FROM stdin CSV;
 statement: SELECT * FROM vistest;
 statement: COMMIT;
 statement: SELECT * FROM vistest;
 statement: BEGIN;
 statement: TRUNCATE vistest;
 statement: COPY vistest FROM stdin CSV FREEZE;
 statement: SELECT * FROM vistest;
 statement: SAVEPOINT s1;
 statement: TRUNCATE vistest;
 statement: COPY vistest FROM stdin CSV FREEZE;
 statement: SELECT * FROM vistest;
 statement: COMMIT;
 statement: SELECT * FROM vistest;
 statement: BEGIN;
 statement: TRUNCATE vistest;
 statement: COPY vistest FROM stdin CSV FREEZE;
 statement: SELECT * FROM vistest;
 statement: COMMIT;
 statement: TRUNCATE vistest;
 statement: COPY vistest FROM stdin CSV FREEZE;
 statement: BEGIN;
 statement: TRUNCATE vistest;
 statement: SAVEPOINT s1;
 statement: COPY vistest FROM stdin CSV FREEZE;
 statement: COMMIT;
 statement: BEGIN;
 statement: INSERT INTO vistest VALUES ('z');
 statement: SAVEPOINT s1;
 statement: TRUNCATE vistest;
 statement: ROLLBACK TO SAVEPOINT s1;
 statement: COPY vistest FROM stdin CSV FREEZE;
 statement: COMMIT;
 statement: CREATE FUNCTION truncate_in_subxact() RETURNS VOID AS                                                                                                                                                                                                      +
 $$                                                                                                                                                                                                                                                                    +
 BEGIN                                                                                                                                                                                                                                                                 +
         TRUNCATE vistest;                                                                                                                                                                                                                                             +
 EXCEPTION                                                                                                                                                                                                                                                             +
   WHEN OTHERS THEN                                                                                                                                                                                                                                                    +
         INSERT INTO vistest VALUES ('subxact failure');                                                                                                                                                                                                               +
 END;                                                                                                                                                                                                                                                                  +
 $$ language plpgsql;
 statement: BEGIN;
 statement: INSERT INTO vistest VALUES ('z');
 statement: SELECT truncate_in_subxact();
 statement: COPY vistest FROM stdin CSV FREEZE;
 statement: SELECT * FROM vistest;
 statement: COMMIT;
 statement: SELECT * FROM vistest;
 statement: CREATE TEMP TABLE forcetest (                                                                                                                                                                                                                              +
     a INT NOT NULL,                                                                                                                                                                                                                                                   +
     b TEXT NOT NULL,                                                                                                                                                                                                                                                  +
     c TEXT,                                                                                                                                                                                                                                                           +
     d TEXT,                                                                                                                                                                                                                                                           +
     e TEXT                                                                                                                                                                                                                                                            +
 );
 statement: BEGIN;
 statement: COPY forcetest (a, b, c) FROM STDIN WITH (FORMAT csv, FORCE_NOT_NULL(b), FORCE_NULL(c));
 statement: COMMIT;
 statement: SELECT b, c FROM forcetest WHERE a = 1;
 statement: BEGIN;
 statement: COPY forcetest (a, b, c, d) FROM STDIN WITH (FORMAT csv, FORCE_NOT_NULL(c,d), FORCE_NULL(c,d));
 statement: COMMIT;
 statement: SELECT c, d FROM forcetest WHERE a = 2;
 statement: BEGIN;
 statement: COPY forcetest (a, b, c) FROM STDIN WITH (FORMAT csv, FORCE_NULL(b), FORCE_NOT_NULL(c));
 statement: ROLLBACK;
 statement: BEGIN;
 statement: COPY forcetest (d, e) FROM STDIN WITH (FORMAT csv, FORCE_NOT_NULL(b));
 statement: ROLLBACK;
 statement: BEGIN;
 statement: COPY forcetest (d, e) FROM STDIN WITH (FORMAT csv, FORCE_NULL(b));
 statement: ROLLBACK;
 statement: create table check_con_tbl (f1 int);
 statement: create function check_con_function(check_con_tbl) returns bool as $$                                                                                                                                                                                       +
 begin                                                                                                                                                                                                                                                                 +
   raise notice 'input = %', row_to_json($1);                                                                                                                                                                                                                          +
   return $1.f1 > 0;                                                                                                                                                                                                                                                   +
 end $$ language plpgsql immutable;
 statement: alter table check_con_tbl add check (check_con_function(check_con_tbl.*));
 statement: SELECT c.oid,                                                                                                                                                                                                                                              +
   n.nspname,                                                                                                                                                                                                                                                          +
   c.relname                                                                                                                                                                                                                                                           +
 FROM pg_catalog.pg_class c                                                                                                                                                                                                                                            +
      LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace                                                                                                                                                                                                    +
 WHERE c.relname ~ '^(check_con_tbl)$'                                                                                                                                                                                                                                 +
   AND pg_catalog.pg_table_is_visible(c.oid)                                                                                                                                                                                                                           +
 ORDER BY 2, 3;
 statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, c.relhasoids, pg_catalog.array_to_string(c.reloptions || array(select 'toast.' || x from pg_catalog.unnest(tc.reloptions) x), ', ')+
 , c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident                                                                                                                      +
 FROM pg_catalog.pg_class c                                                                                                                                                                                                                                            +
  LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)                                                                                                                                                                                                       +
 WHERE c.oid = '19739';
 statement: SELECT a.attname,                                                                                                                                                                                                                                          +
   pg_catalog.format_type(a.atttypid, a.atttypmod),                                                                                                                                                                                                                    +
   (SELECT substring(pg_catalog.pg_get_expr(d.adbin, d.adrelid) for 128)                                                                                                                                                                                               +
    FROM pg_catalog.pg_attrdef d                                                                                                                                                                                                                                       +
    WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),                                                                                                                                                                                              +
   a.attnotnull, a.attnum,                                                                                                                                                                                                                                             +
   (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t                                                                                                                                                                                             +
    WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,                                                                                                                                                         +
   NULL AS indexdef,                                                                                                                                                                                                                                                   +
   NULL AS attfdwoptions,                                                                                                                                                                                                                                              +
   a.attstorage,                                                                                                                                                                                                                                                       +
   CASE WHEN a.attstattarget=-1 THEN NULL ELSE a.attstattarget END AS attstattarget, pg_catalog.col_description(a.attrelid, a.attnum)                                                                                                                                  +
 FROM pg_catalog.pg_attribute a                                                                                                                                                                                                                                        +
 WHERE a.attrelid = '19739' AND a.attnum > 0 AND NOT a.attisdropped                                                                                                                                                                                                    +
 ORDER BY a.attnum;
 statement: SELECT r.conname, pg_catalog.pg_get_constraintdef(r.oid, true)                                                                                                                                                                                             +
 FROM pg_catalog.pg_constraint r                                                                                                                                                                                                                                       +
 WHERE r.conrelid = '19739' AND r.contype = 'c'                                                                                                                                                                                                                        +
 ORDER BY 1;
 statement: SELECT pol.polname,                                                                                                                                                                                                                                        +
 CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,                                                                                           +
 pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),                                                                                                                                                                                                                    +
 pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),                                                                                                                                                                                                               +
 CASE pol.polcmd                                                                                                                                                                                                                                                       +
 WHEN 'r' THEN 'SELECT'                                                                                                                                                                                                                                                +
 WHEN 'a' THEN 'INSERT'                                                                                                                                                                                                                                                +
 WHEN 'w' THEN 'UPDATE'                                                                                                                                                                                                                                                +
 WHEN 'd' THEN 'DELETE'                                                                                                                                                                                                                                                +
 WHEN '*' THEN 'ALL'                                                                                                                                                                                                                                                   +
 END AS cmd                                                                                                                                                                                                                                                            +
 FROM pg_catalog.pg_policy pol                                                                                                                                                                                                                                         +
 WHERE pol.polrelid = '19739' ORDER BY 1;
 statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '19739' ORDER BY inhseqno;
 statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '19739' ORDER BY c.oid::pg_catalog.regclass::pg_catalog.text;
 statement: copy check_con_tbl from stdin;
 statement: copy check_con_tbl from stdin;
 statement: select * from check_con_tbl;
 statement: CREATE ROLE regress_rls_copy_user;
 statement: CREATE ROLE regress_rls_copy_user_colperms;
 statement: CREATE TABLE rls_t1 (a int, b int, c int);
 statement: COPY rls_t1 (a, b, c) from stdin;
 statement: CREATE POLICY p1 ON rls_t1 FOR SELECT USING (a % 2 = 0);
 statement: ALTER TABLE rls_t1 ENABLE ROW LEVEL SECURITY;
 statement: ALTER TABLE rls_t1 FORCE ROW LEVEL SECURITY;
 statement: GRANT SELECT ON TABLE rls_t1 TO regress_rls_copy_user;
 statement: GRANT SELECT (a, b) ON TABLE rls_t1 TO regress_rls_copy_user_colperms;
 statement: COPY rls_t1 TO stdout;
 statement: COPY rls_t1 (a, b, c) TO stdout;
 statement: COPY rls_t1 (a) TO stdout;
 statement: COPY rls_t1 (a, b) TO stdout;
 statement: COPY rls_t1 (b, a) TO stdout;
 statement: SET SESSION AUTHORIZATION regress_rls_copy_user;
 statement: COPY rls_t1 TO stdout;
 statement: COPY rls_t1 (a, b, c) TO stdout;
 statement: COPY rls_t1 (a) TO stdout;
 statement: COPY rls_t1 (a, b) TO stdout;
 statement: COPY rls_t1 (b, a) TO stdout;
 statement: RESET SESSION AUTHORIZATION;
 statement: SET SESSION AUTHORIZATION regress_rls_copy_user_colperms;
 statement: COPY rls_t1 TO stdout;
 statement: COPY rls_t1 (a, b, c) TO stdout;
 statement: COPY rls_t1 (c) TO stdout;
 statement: COPY rls_t1 (a) TO stdout;
 statement: COPY rls_t1 (a, b) TO stdout;
 statement: RESET SESSION AUTHORIZATION;
 statement: DROP TABLE forcetest;
 statement: DROP TABLE vistest;
 statement: DROP FUNCTION truncate_in_subxact();
 statement: DROP TABLE x, y;
 statement: DROP TABLE rls_t1 CASCADE;
 statement: DROP ROLE regress_rls_copy_user;
 statement: DROP ROLE regress_rls_copy_user_colperms;
 statement: DROP FUNCTION fn_x_before();
 statement: DROP FUNCTION fn_x_after();

