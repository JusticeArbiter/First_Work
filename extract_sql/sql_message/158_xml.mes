LOG:  statement: select message from postgres_log where query is null;
 statement: CREATE TABLE xmltest (                                                                                                                                                                                                                                       +
     id int,                                                                                                                                                                                                                                                             +
     data xml                                                                                                                                                                                                                                                            +
 );
 statement: INSERT INTO xmltest VALUES (1, '<value>one</value>');
 statement: INSERT INTO xmltest VALUES (2, '<value>two</value>');
 statement: INSERT INTO xmltest VALUES (3, '<wrong');
 statement: SELECT * FROM xmltest;
 statement: SELECT xmlcomment('test');
 statement: SELECT xmlcomment('-test');
 statement: SELECT xmlcomment('test-');
 statement: SELECT xmlcomment('--test');
 statement: SELECT xmlcomment('te st');
 statement: SELECT xmlconcat(xmlcomment('hello'),                                                                                                                                                                                                                        +
                  xmlelement(NAME qux, 'foo'),                                                                                                                                                                                                                           +
                  xmlcomment('world'));
 statement: SELECT xmlconcat('hello', 'you');
 statement: SELECT xmlconcat(1, 2);
 statement: SELECT xmlconcat('bad', '<syntax');
 statement: SELECT xmlconcat('<foo/>', NULL, '<?xml version="1.1" standalone="no"?><bar/>');
 statement: SELECT xmlconcat('<?xml version="1.1"?><foo/>', NULL, '<?xml version="1.1" standalone="no"?><bar/>');
 statement: SELECT xmlconcat(NULL);
 statement: SELECT xmlconcat(NULL, NULL);
 statement: SELECT xmlelement(name element,                                                                                                                                                                                                                              +
                   xmlattributes (1 as one, 'deuce' as two),                                                                                                                                                                                                             +
                   'content');
 statement: SELECT xmlelement(name element,                                                                                                                                                                                                                              +
                   xmlattributes ('unnamed and wrong'));
 statement: SELECT xmlelement(name element, xmlelement(name nested, 'stuff'));
 statement: SELECT xmlelement(name employee, xmlforest(name, age, salary as pay)) FROM emp;
 statement: SELECT xmlelement(name duplicate, xmlattributes(1 as a, 2 as b, 3 as a));
 statement: SELECT xmlelement(name num, 37);
 statement: SELECT xmlelement(name foo, text 'bar');
 statement: SELECT xmlelement(name foo, xml 'bar');
 statement: SELECT xmlelement(name foo, text 'b<a/>r');
 statement: SELECT xmlelement(name foo, xml 'b<a/>r');
 statement: SELECT xmlelement(name foo, array[1, 2, 3]);
 statement: SET xmlbinary TO base64;
 statement: SELECT xmlelement(name foo, bytea 'bar');
 statement: SET xmlbinary TO hex;
 statement: SELECT xmlelement(name foo, bytea 'bar');
 statement: SELECT xmlelement(name foo, xmlattributes(true as bar));
 statement: SELECT xmlelement(name foo, xmlattributes('2009-04-09 00:24:37'::timestamp as bar));
 statement: SELECT xmlelement(name foo, xmlattributes('infinity'::timestamp as bar));
 statement: SELECT xmlelement(name foo, xmlattributes('<>&"''' as funny, xml 'b<a/>r' as funnier));
 statement: SELECT xmlparse(content '');
 statement: SELECT xmlparse(content '  ');
 statement: SELECT xmlparse(content 'abc');
 statement: SELECT xmlparse(content '<abc>x</abc>');
 statement: SELECT xmlparse(content '<invalidentity>&</invalidentity>');
 statement: SELECT xmlparse(content '<undefinedentity>&idontexist;</undefinedentity>');
 statement: SELECT xmlparse(content '<invalidns xmlns=''&lt;''/>');
 statement: SELECT xmlparse(content '<relativens xmlns=''relative''/>');
 statement: SELECT xmlparse(content '<twoerrors>&idontexist;</unbalanced>');
 statement: SELECT xmlparse(content '<nosuchprefix:tag/>');
 statement: SELECT xmlparse(document '   ');
 statement: SELECT xmlparse(document 'abc');
 statement: SELECT xmlparse(document '<abc>x</abc>');
 statement: SELECT xmlparse(document '<invalidentity>&</abc>');
 statement: SELECT xmlparse(document '<undefinedentity>&idontexist;</abc>');
 statement: SELECT xmlparse(document '<invalidns xmlns=''&lt;''/>');
 statement: SELECT xmlparse(document '<relativens xmlns=''relative''/>');
 statement: SELECT xmlparse(document '<twoerrors>&idontexist;</unbalanced>');
 statement: SELECT xmlparse(document '<nosuchprefix:tag/>');
 statement: SELECT xmlpi(name foo);
 statement: SELECT xmlpi(name xml);
 statement: SELECT xmlpi(name xmlstuff);
 statement: SELECT xmlpi(name foo, 'bar');
 statement: SELECT xmlpi(name foo, 'in?>valid');
 statement: SELECT xmlpi(name foo, null);
 statement: SELECT xmlpi(name xml, null);
 statement: SELECT xmlpi(name xmlstuff, null);
 statement: SELECT xmlpi(name "xml-stylesheet", 'href="mystyle.css" type="text/css"');
 statement: SELECT xmlpi(name foo, '   bar');
 statement: SELECT xmlroot(xml '<foo/>', version no value, standalone no value);
 statement: SELECT xmlroot(xml '<foo/>', version '2.0');
 statement: SELECT xmlroot(xml '<foo/>', version no value, standalone yes);
 statement: SELECT xmlroot(xml '<?xml version="1.1"?><foo/>', version no value, standalone yes);
 statement: SELECT xmlroot(xmlroot(xml '<foo/>', version '1.0'), version '1.1', standalone no);
 statement: SELECT xmlroot('<?xml version="1.1" standalone="yes"?><foo/>', version no value, standalone no);
 statement: SELECT xmlroot('<?xml version="1.1" standalone="yes"?><foo/>', version no value, standalone no value);
 statement: SELECT xmlroot('<?xml version="1.1" standalone="yes"?><foo/>', version no value);
 statement: SELECT xmlroot (                                                                                                                                                                                                                                             +
   xmlelement (                                                                                                                                                                                                                                                          +
     name gazonk,                                                                                                                                                                                                                                                        +
     xmlattributes (                                                                                                                                                                                                                                                     +
       'val' AS name,                                                                                                                                                                                                                                                    +
       1 + 1 AS num                                                                                                                                                                                                                                                      +
     ),                                                                                                                                                                                                                                                                  +
     xmlelement (                                                                                                                                                                                                                                                        +
       NAME qux,                                                                                                                                                                                                                                                         +
       'foo'                                                                                                                                                                                                                                                             +
     )                                                                                                                                                                                                                                                                   +
   ),                                                                                                                                                                                                                                                                    +
   version '1.0',                                                                                                                                                                                                                                                        +
   standalone yes                                                                                                                                                                                                                                                        +
 );
 statement: SELECT xmlserialize(content data as character varying(20)) FROM xmltest;
 statement: SELECT xmlserialize(content 'good' as char(10));
 statement: SELECT xmlserialize(document 'bad' as text);
 statement: SELECT xml '<foo>bar</foo>' IS DOCUMENT;
 statement: SELECT xml '<foo>bar</foo><bar>foo</bar>' IS DOCUMENT;
 statement: SELECT xml '<abc/>' IS NOT DOCUMENT;
 statement: SELECT xml 'abc' IS NOT DOCUMENT;
 statement: SELECT '<>' IS NOT DOCUMENT;
 statement: SELECT xmlagg(data) FROM xmltest;
 statement: SELECT xmlagg(data) FROM xmltest WHERE id > 10;
 statement: SELECT xmlelement(name employees, xmlagg(xmlelement(name name, name))) FROM emp;
 statement: SELECT xmlpi(name ":::_xml_abc135.%-&_");
 statement: SELECT xmlpi(name "123");
 statement: PREPARE foo (xml) AS SELECT xmlconcat('<foo/>', $1);
 statement: SET XML OPTION DOCUMENT;
 statement: EXECUTE foo ('<bar/>');
 statement: EXECUTE foo ('bad');
 statement: SET XML OPTION CONTENT;
 statement: EXECUTE foo ('<bar/>');
 statement: EXECUTE foo ('good');
 statement: CREATE VIEW xmlview1 AS SELECT xmlcomment('test');
 statement: CREATE VIEW xmlview2 AS SELECT xmlconcat('hello', 'you');
 statement: CREATE VIEW xmlview3 AS SELECT xmlelement(name element, xmlattributes (1 as ":one:", 'deuce' as two), 'content&');
 statement: CREATE VIEW xmlview4 AS SELECT xmlelement(name employee, xmlforest(name, age, salary as pay)) FROM emp;
 statement: CREATE VIEW xmlview5 AS SELECT xmlparse(content '<abc>x</abc>');
 statement: CREATE VIEW xmlview6 AS SELECT xmlpi(name foo, 'bar');
 statement: CREATE VIEW xmlview7 AS SELECT xmlroot(xml '<foo/>', version no value, standalone yes);
 statement: CREATE VIEW xmlview8 AS SELECT xmlserialize(content 'good' as char(10));
 statement: CREATE VIEW xmlview9 AS SELECT xmlserialize(content 'good' as text);
 statement: SELECT table_name, view_definition FROM information_schema.views                                                                                                                                                                                             +
   WHERE table_name LIKE 'xmlview%' ORDER BY 1;
 statement: SELECT xpath('/value', data) FROM xmltest;
 statement: SELECT xpath(NULL, NULL) IS NULL FROM xmltest;
 statement: SELECT xpath('', '<!-- error -->');
 statement: SELECT xpath('//text()', '<local:data xmlns:local="http://127.0.0.1"><local:piece id="1">number one</local:piece><local:piece id="2" /></local:data>');
 statement: SELECT xpath('//loc:piece/@id', '<local:data xmlns:local="http://127.0.0.1"><local:piece id="1">number one</local:piece><local:piece id="2" /></local:data>', ARRAY[ARRAY['loc', 'http://127.0.0.1']]);
 statement: SELECT xpath('//loc:piece', '<local:data xmlns:local="http://127.0.0.1"><local:piece id="1">number one</local:piece><local:piece id="2" /></local:data>', ARRAY[ARRAY['loc', 'http://127.0.0.1']]);
 statement: SELECT xpath('//loc:piece', '<local:data xmlns:local="http://127.0.0.1" xmlns="http://127.0.0.2"><local:piece id="1"><internal>number one</internal><internal2/></local:piece><local:piece id="2" /></local:data>', ARRAY[ARRAY['loc', 'http://127.0.0.1']]);
 statement: SELECT xpath('//b', '<a>one <b>two</b> three <b>etc</b></a>');
 statement: SELECT xpath('//text()', '<root>&lt;</root>');
 statement: SELECT xpath('//@value', '<root value="&lt;"/>');
 statement: SELECT xpath('''<<invalid>>''', '<root/>');
 statement: SELECT xpath('count(//*)', '<root><sub/><sub/></root>');
 statement: SELECT xpath('count(//*)=0', '<root><sub/><sub/></root>');
 statement: SELECT xpath('count(//*)=3', '<root><sub/><sub/></root>');
 statement: SELECT xpath('name(/*)', '<root><sub/><sub/></root>');
 statement: SELECT xpath('/nosuchtag', '<root/>');
 statement: SELECT xmlexists('//town[text() = ''Toronto'']' PASSING BY REF '<towns><town>Bidford-on-Avon</town><town>Cwmbran</town><town>Bristol</town></towns>');
 statement: SELECT xmlexists('//town[text() = ''Cwmbran'']' PASSING BY REF '<towns><town>Bidford-on-Avon</town><town>Cwmbran</town><town>Bristol</town></towns>');
 statement: SELECT xmlexists('count(/nosuchtag)' PASSING BY REF '<root/>');
 statement: SELECT xpath_exists('//town[text() = ''Toronto'']','<towns><town>Bidford-on-Avon</town><town>Cwmbran</town><town>Bristol</town></towns>'::xml);
 statement: SELECT xpath_exists('//town[text() = ''Cwmbran'']','<towns><town>Bidford-on-Avon</town><town>Cwmbran</town><town>Bristol</town></towns>'::xml);
 statement: SELECT xpath_exists('count(/nosuchtag)', '<root/>'::xml);
 statement: INSERT INTO xmltest VALUES (4, '<menu><beers><name>Budvar</name><cost>free</cost><name>Carling</name><cost>lots</cost></beers></menu>'::xml);
 statement: INSERT INTO xmltest VALUES (5, '<menu><beers><name>Molson</name><cost>free</cost><name>Carling</name><cost>lots</cost></beers></menu>'::xml);
 statement: INSERT INTO xmltest VALUES (6, '<myns:menu xmlns:myns="http://myns.com"><myns:beers><myns:name>Budvar</myns:name><myns:cost>free</myns:cost><myns:name>Carling</myns:name><myns:cost>lots</myns:cost></myns:beers></myns:menu>'::xml);
 statement: INSERT INTO xmltest VALUES (7, '<myns:menu xmlns:myns="http://myns.com"><myns:beers><myns:name>Molson</myns:name><myns:cost>free</myns:cost><myns:name>Carling</myns:name><myns:cost>lots</myns:cost></myns:beers></myns:menu>'::xml);
 statement: SELECT COUNT(id) FROM xmltest WHERE xmlexists('/menu/beer' PASSING data);
 statement: SELECT COUNT(id) FROM xmltest WHERE xmlexists('/menu/beer' PASSING BY REF data BY REF);
 statement: SELECT COUNT(id) FROM xmltest WHERE xmlexists('/menu/beers' PASSING BY REF data);
 statement: SELECT COUNT(id) FROM xmltest WHERE xmlexists('/menu/beers/name[text() = ''Molson'']' PASSING BY REF data);
 statement: SELECT COUNT(id) FROM xmltest WHERE xpath_exists('/menu/beer',data);
 statement: SELECT COUNT(id) FROM xmltest WHERE xpath_exists('/menu/beers',data);
 statement: SELECT COUNT(id) FROM xmltest WHERE xpath_exists('/menu/beers/name[text() = ''Molson'']',data);
 statement: SELECT COUNT(id) FROM xmltest WHERE xpath_exists('/myns:menu/myns:beer',data,ARRAY[ARRAY['myns','http://myns.com']]);
 statement: SELECT COUNT(id) FROM xmltest WHERE xpath_exists('/myns:menu/myns:beers',data,ARRAY[ARRAY['myns','http://myns.com']]);
 statement: SELECT COUNT(id) FROM xmltest WHERE xpath_exists('/myns:menu/myns:beers/myns:name[text() = ''Molson'']',data,ARRAY[ARRAY['myns','http://myns.com']]);
 statement: CREATE TABLE query ( expr TEXT );
 statement: INSERT INTO query VALUES ('/menu/beers/cost[text() = ''lots'']');
 statement: SELECT COUNT(id) FROM xmltest, query WHERE xmlexists(expr PASSING BY REF data);
 statement: SELECT xml_is_well_formed_document('<foo>bar</foo>');
 statement: SELECT xml_is_well_formed_document('abc');
 statement: SELECT xml_is_well_formed_content('<foo>bar</foo>');
 statement: SELECT xml_is_well_formed_content('abc');
 statement: SET xmloption TO DOCUMENT;
 statement: SELECT xml_is_well_formed('abc');
 statement: SELECT xml_is_well_formed('<>');
 statement: SELECT xml_is_well_formed('<abc/>');
 statement: SELECT xml_is_well_formed('<foo>bar</foo>');
 statement: SELECT xml_is_well_formed('<foo>bar</foo');
 statement: SELECT xml_is_well_formed('<foo><bar>baz</foo>');
 statement: SELECT xml_is_well_formed('<local:data xmlns:local="http://127.0.0.1"><local:piece id="1">number one</local:piece><local:piece id="2" /></local:data>');
 statement: SELECT xml_is_well_formed('<pg:foo xmlns:pg="http://postgresql.org/stuff">bar</my:foo>');
 statement: SELECT xml_is_well_formed('<pg:foo xmlns:pg="http://postgresql.org/stuff">bar</pg:foo>');
 statement: SELECT xml_is_well_formed('<invalidentity>&</abc>');
 statement: SELECT xml_is_well_formed('<undefinedentity>&idontexist;</abc>');
 statement: SELECT xml_is_well_formed('<invalidns xmlns=''&lt;''/>');
 statement: SELECT xml_is_well_formed('<relativens xmlns=''relative''/>');
 statement: SELECT xml_is_well_formed('<twoerrors>&idontexist;</unbalanced>');
 statement: SET xmloption TO CONTENT;
 statement: SELECT xml_is_well_formed('abc');
 statement: SELECT xpath('/*', '<invalidns xmlns=''&lt;''/>');
 statement: SELECT xpath('/*', '<nosuchprefix:tag/>');
 statement: SELECT xpath('/*', '<relativens xmlns=''relative''/>');
 statement: SELECT XMLPARSE(DOCUMENT '<!DOCTYPE foo [<!ENTITY c SYSTEM "/etc/passwd">]><foo>&c;</foo>');
 statement: SELECT XMLPARSE(DOCUMENT '<!DOCTYPE foo [<!ENTITY c SYSTEM "/etc/no.such.file">]><foo>&c;</foo>');
 statement: SELECT XMLPARSE(DOCUMENT '<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd"><chapter>&nbsp;</chapter>');

