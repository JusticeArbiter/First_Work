LOG:  statement: select message from postgres_log where query is null;
 statement: drop table if exists hs_extreme;
 statement: create table hs_extreme (col1 integer);
 statement: CREATE OR REPLACE FUNCTION hs_subxids (n integer)     +
 RETURNS void                                                     +
 LANGUAGE plpgsql                                                 +
 AS $$                                                            +
     BEGIN                                                        +
       IF n <= 0 THEN RETURN; END IF;                             +
       INSERT INTO hs_extreme VALUES (n);                         +
       PERFORM hs_subxids(n - 1);                                 +
       RETURN;                                                    +
     EXCEPTION WHEN raise_exception THEN NULL; END;               +
 $$;
 statement: BEGIN;
 statement: SELECT hs_subxids(257);
 statement: ROLLBACK;
 statement: BEGIN;
 statement: SELECT hs_subxids(257);
 statement: COMMIT;
 statement: set client_min_messages = 'warning';
 statement: CREATE OR REPLACE FUNCTION hs_locks_create (n integer)+
 RETURNS void                                                     +
 LANGUAGE plpgsql                                                 +
 AS $$                                                            +
     BEGIN                                                        +
       IF n <= 0 THEN                                             +
                 CHECKPOINT;                                      +
                 RETURN;                                          +
           END IF;                                                +
       EXECUTE 'CREATE TABLE hs_locks_' || n::text || ' ()';      +
       PERFORM hs_locks_create(n - 1);                            +
       RETURN;                                                    +
     EXCEPTION WHEN raise_exception THEN NULL; END;               +
 $$;
 statement: CREATE OR REPLACE FUNCTION hs_locks_drop (n integer)  +
 RETURNS void                                                     +
 LANGUAGE plpgsql                                                 +
 AS $$                                                            +
     BEGIN                                                        +
       IF n <= 0 THEN                                             +
                 CHECKPOINT;                                      +
                 RETURN;                                          +
           END IF;                                                +
           EXECUTE 'DROP TABLE IF EXISTS hs_locks_' || n::text;   +
       PERFORM hs_locks_drop(n - 1);                              +
       RETURN;                                                    +
     EXCEPTION WHEN raise_exception THEN NULL; END;               +
 $$;
 statement: BEGIN;
 statement: SELECT hs_locks_drop(257);
 statement: SELECT hs_locks_create(257);
 statement: SELECT count(*) > 257 FROM pg_locks;
 statement: ROLLBACK;
 statement: BEGIN;
 statement: SELECT hs_locks_drop(257);
 statement: SELECT hs_locks_create(257);
 statement: SELECT count(*) > 257 FROM pg_locks;
 statement: COMMIT;
 statement: SELECT hs_locks_drop(257);
 statement: SELECT pg_switch_xlog();
 statement: select message from postgres_log where query is null;

