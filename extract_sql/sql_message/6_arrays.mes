LOG:  statement: select message from postgres_log where query is null;
 statement: CREATE TABLE arrtest (                                                                                                                                            +
         a                       int2[],                                                                                                                                      +
         b                       int4[][][],                                                                                                                                  +
         c                       name[],                                                                                                                                      +
         d                       text[][],                                                                                                                                    +
         e                       float8[],                                                                                                                                    +
         f                       char(5)[],                                                                                                                                   +
         g                       varchar(5)[]                                                                                                                                 +
 );
 statement: INSERT INTO arrtest (a[1:5], b[1:1][1:2][1:2], c, d, f, g)                                                                                                        +
    VALUES ('{1,2,3,4,5}', '{{{0,0},{1,2}}}', '{}', '{}', '{}', '{}');
 statement: UPDATE arrtest SET e[0] = '1.1';
 statement: UPDATE arrtest SET e[1] = '2.2';
 statement: INSERT INTO arrtest (f)                                                                                                                                           +
    VALUES ('{"too long"}');
 statement: INSERT INTO arrtest (a, b[1:2][1:2], c, d, e, f, g)                                                                                                               +
    VALUES ('{11,12,23}', '{{3,4},{4,5}}', '{"foobar"}',                                                                                                                      +
            '{{"elt1", "elt2"}}', '{"3.4", "6.7"}',                                                                                                                           +
            '{"abc","abcde"}', '{"abc","abcde"}');
 statement: INSERT INTO arrtest (a, b[1:2], c, d[1:2])                                                                                                                        +
    VALUES ('{}', '{3,4}', '{foo,bar}', '{bar,foo}');
 statement: SELECT * FROM arrtest;
 statement: SELECT arrtest.a[1],                                                                                                                                              +
           arrtest.b[1][1][1],                                                                                                                                                +
           arrtest.c[1],                                                                                                                                                      +
           arrtest.d[1][1],                                                                                                                                                   +
           arrtest.e[0]                                                                                                                                                       +
    FROM arrtest;
 statement: SELECT a[1], b[1][1][1], c[1], d[1][1], e[0]                                                                                                                      +
    FROM arrtest;
 statement: SELECT a[1:3],                                                                                                                                                    +
           b[1:1][1:2][1:2],                                                                                                                                                  +
           c[1:2],                                                                                                                                                            +
           d[1:1][1:2]                                                                                                                                                        +
    FROM arrtest;
 statement: SELECT array_ndims(a) AS a,array_ndims(b) AS b,array_ndims(c) AS c                                                                                                +
    FROM arrtest;
 statement: SELECT array_dims(a) AS a,array_dims(b) AS b,array_dims(c) AS c                                                                                                   +
    FROM arrtest;
 statement: SELECT *                                                                                                                                                          +
    FROM arrtest                                                                                                                                                              +
    WHERE a[1] < 5 and                                                                                                                                                        +
          c = '{"foobar"}'::_name;
 statement: UPDATE arrtest                                                                                                                                                    +
   SET a[1:2] = '{16,25}'                                                                                                                                                     +
   WHERE NOT a = '{}'::_int2;
 statement: UPDATE arrtest                                                                                                                                                    +
   SET b[1:1][1:1][1:2] = '{113, 117}',                                                                                                                                       +
       b[1:1][1:2][2:2] = '{142, 147}'                                                                                                                                        +
   WHERE array_dims(b) = '[1:1][1:2][1:2]';
 statement: UPDATE arrtest                                                                                                                                                    +
   SET c[2:2] = '{"new_word"}'                                                                                                                                                +
   WHERE array_dims(c) is not null;
 statement: SELECT a,b,c FROM arrtest;
 statement: SELECT a[1:3],                                                                                                                                                    +
           b[1:1][1:2][1:2],                                                                                                                                                  +
           c[1:2],                                                                                                                                                            +
           d[1:1][2:2]                                                                                                                                                        +
    FROM arrtest;
 statement: INSERT INTO arrtest(a) VALUES('{1,null,3}');
 statement: SELECT a FROM arrtest;
 statement: UPDATE arrtest SET a[4] = NULL WHERE a[2] IS NULL;
 statement: SELECT a FROM arrtest WHERE a[2] IS NULL;
 statement: DELETE FROM arrtest WHERE a[2] IS NULL AND b IS NULL;
 statement: SELECT a,b,c FROM arrtest;
 statement: CREATE TEMP TABLE arrtest1 (i int[], t text[]);
 statement: insert into arrtest1 values(array[1,2,null,4], array['one','two',null,'four']);
 statement: select * from arrtest1;
 statement: update arrtest1 set i[2] = 22, t[2] = 'twenty-two';
 statement: select * from arrtest1;
 statement: update arrtest1 set i[5] = 5, t[5] = 'five';
 statement: select * from arrtest1;
 statement: update arrtest1 set i[8] = 8, t[8] = 'eight';
 statement: select * from arrtest1;
 statement: update arrtest1 set i[0] = 0, t[0] = 'zero';
 statement: select * from arrtest1;
 statement: update arrtest1 set i[-3] = -3, t[-3] = 'minus-three';
 statement: select * from arrtest1;
 statement: update arrtest1 set i[0:2] = array[10,11,12], t[0:2] = array['ten','eleven','twelve'];
 statement: select * from arrtest1;
 statement: update arrtest1 set i[8:10] = array[18,null,20], t[8:10] = array['p18',null,'p20'];
 statement: select * from arrtest1;
 statement: update arrtest1 set i[11:12] = array[null,22], t[11:12] = array[null,'p22'];
 statement: select * from arrtest1;
 statement: update arrtest1 set i[15:16] = array[null,26], t[15:16] = array[null,'p26'];
 statement: select * from arrtest1;
 statement: update arrtest1 set i[-5:-3] = array[-15,-14,-13], t[-5:-3] = array['m15','m14','m13'];
 statement: select * from arrtest1;
 statement: update arrtest1 set i[-7:-6] = array[-17,null], t[-7:-6] = array['m17',null];
 statement: select * from arrtest1;
 statement: update arrtest1 set i[-12:-10] = array[-22,null,-20], t[-12:-10] = array['m22',null,'m20'];
 statement: select * from arrtest1;
 statement: delete from arrtest1;
 statement: insert into arrtest1 values(array[1,2,null,4], array['one','two',null,'four']);
 statement: select * from arrtest1;
 statement: update arrtest1 set i[0:5] = array[0,1,2,null,4,5], t[0:5] = array['z','p1','p2',null,'p4','p5'];
 statement: select * from arrtest1;
 statement: CREATE TEMP TABLE arrtest2 (i integer ARRAY[4], f float8[], n numeric[], t text[], d timestamp[]);
 statement: INSERT INTO arrtest2 VALUES(                                                                                                                                      +
   ARRAY[[[113,142],[1,147]]],                                                                                                                                                +
   ARRAY[1.1,1.2,1.3]::float8[],                                                                                                                                              +
   ARRAY[1.1,1.2,1.3],                                                                                                                                                        +
   ARRAY[[['aaa','aab'],['aba','abb'],['aca','acb']],[['baa','bab'],['bba','bbb'],['bca','bcb']]],                                                                            +
   ARRAY['19620326','19931223','19970117']::timestamp[]                                                                                                                       +
 );
 statement: CREATE TEMP TABLE arrtest_f (f0 int, f1 text, f2 float8);
 statement: insert into arrtest_f values(1,'cat1',1.21);
 statement: insert into arrtest_f values(2,'cat1',1.24);
 statement: insert into arrtest_f values(3,'cat1',1.18);
 statement: insert into arrtest_f values(4,'cat1',1.26);
 statement: insert into arrtest_f values(5,'cat1',1.15);
 statement: insert into arrtest_f values(6,'cat2',1.15);
 statement: insert into arrtest_f values(7,'cat2',1.26);
 statement: insert into arrtest_f values(8,'cat2',1.32);
 statement: insert into arrtest_f values(9,'cat2',1.30);
 statement: CREATE TEMP TABLE arrtest_i (f0 int, f1 text, f2 int);
 statement: insert into arrtest_i values(1,'cat1',21);
 statement: insert into arrtest_i values(2,'cat1',24);
 statement: insert into arrtest_i values(3,'cat1',18);
 statement: insert into arrtest_i values(4,'cat1',26);
 statement: insert into arrtest_i values(5,'cat1',15);
 statement: insert into arrtest_i values(6,'cat2',15);
 statement: insert into arrtest_i values(7,'cat2',26);
 statement: insert into arrtest_i values(8,'cat2',32);
 statement: insert into arrtest_i values(9,'cat2',30);
 statement: SELECT t.f[1][3][1] AS "131", t.f[2][2][1] AS "221" FROM (                                                                                                        +
   SELECT ARRAY[[[111,112],[121,122],[131,132]],[[211,212],[221,122],[231,232]]] AS f                                                                                         +
 ) AS t;
 statement: SELECT ARRAY[[[[[['hello'],['world']]]]]];
 statement: SELECT ARRAY[ARRAY['hello'],ARRAY['world']];
 statement: SELECT ARRAY(select f2 from arrtest_f order by f2) AS "ARRAY";
 statement: SELECT '{1,null,3}'::int[];
 statement: SELECT ARRAY[1,NULL,3];
 statement: SELECT array_append(array[42], 6) AS "{42,6}";
 statement: SELECT array_prepend(6, array[42]) AS "{6,42}";
 statement: SELECT array_cat(ARRAY[1,2], ARRAY[3,4]) AS "{1,2,3,4}";
 statement: SELECT array_cat(ARRAY[1,2], ARRAY[[3,4],[5,6]]) AS "{{1,2},{3,4},{5,6}}";
 statement: SELECT array_cat(ARRAY[[3,4],[5,6]], ARRAY[1,2]) AS "{{3,4},{5,6},{1,2}}";
 statement: SELECT array_position(ARRAY[1,2,3,4,5], 4);
 statement: SELECT array_position(ARRAY[5,3,4,2,1], 4);
 statement: SELECT array_position(ARRAY[[1,2],[3,4]], 3);
 statement: SELECT array_position(ARRAY['sun','mon','tue','wed','thu','fri','sat'], 'mon');
 statement: SELECT array_position(ARRAY['sun','mon','tue','wed','thu','fri','sat'], 'sat');
 statement: SELECT array_position(ARRAY['sun','mon','tue','wed','thu','fri','sat'], NULL);
 statement: SELECT array_position(ARRAY['sun','mon','tue','wed','thu',NULL,'fri','sat'], NULL);
 statement: SELECT array_position(ARRAY['sun','mon','tue','wed','thu',NULL,'fri','sat'], 'sat');
 statement: SELECT array_positions(NULL, 10);
 statement: SELECT array_positions(NULL, NULL::int);
 statement: SELECT array_positions(ARRAY[1,2,3,4,5,6,1,2,3,4,5,6], 4);
 statement: SELECT array_positions(ARRAY[[1,2],[3,4]], 4);
 statement: SELECT array_positions(ARRAY[1,2,3,4,5,6,1,2,3,4,5,6], NULL);
 statement: SELECT array_positions(ARRAY[1,2,3,NULL,5,6,1,2,3,NULL,5,6], NULL);
 statement: SELECT array_length(array_positions(ARRAY(SELECT 'AAAAAAAAAAAAAAAAAAAAAAAAA'::text || i % 10                                                                      +
                                           FROM generate_series(1,100) g(i)),                                                                                                 +
                                   'AAAAAAAAAAAAAAAAAAAAAAAAA5'), 1);
 statement: DO $$                                                                                                                                                             +
 DECLARE                                                                                                                                                                      +
   o int;                                                                                                                                                                     +
   a int[] := ARRAY[1,2,3,2,3,1,2];                                                                                                                                           +
 BEGIN                                                                                                                                                                        +
   o := array_position(a, 2);                                                                                                                                                 +
   WHILE o IS NOT NULL                                                                                                                                                        +
   LOOP                                                                                                                                                                       +
     RAISE NOTICE '%', o;                                                                                                                                                     +
     o := array_position(a, 2, o + 1);                                                                                                                                        +
   END LOOP;                                                                                                                                                                  +
 END                                                                                                                                                                          +
 $$ LANGUAGE plpgsql;
 statement: SELECT array_position('[2:4]={1,2,3}'::int[], 1);
 statement: SELECT array_positions('[2:4]={1,2,3}'::int[], 1);
 statement: SELECT                                                                                                                                                            +
     array_position(ids, (1, 1)),                                                                                                                                             +
     array_positions(ids, (1, 1))                                                                                                                                             +
         FROM                                                                                                                                                                 +
 (VALUES                                                                                                                                                                      +
     (ARRAY[(0, 0), (1, 1)]),                                                                                                                                                 +
     (ARRAY[(1, 1)])                                                                                                                                                          +
 ) AS f (ids);
 statement: SELECT a FROM arrtest WHERE b = ARRAY[[[113,142],[1,147]]];
 statement: SELECT NOT ARRAY[1.1,1.2,1.3] = ARRAY[1.1,1.2,1.3] AS "FALSE";
 statement: SELECT ARRAY[1,2] || 3 AS "{1,2,3}";
 statement: SELECT 0 || ARRAY[1,2] AS "{0,1,2}";
 statement: SELECT ARRAY[1,2] || ARRAY[3,4] AS "{1,2,3,4}";
 statement: SELECT ARRAY[[['hello','world']]] || ARRAY[[['happy','birthday']]] AS "ARRAY";
 statement: SELECT ARRAY[[1,2],[3,4]] || ARRAY[5,6] AS "{{1,2},{3,4},{5,6}}";
 statement: SELECT ARRAY[0,0] || ARRAY[1,1] || ARRAY[2,2] AS "{0,0,1,1,2,2}";
 statement: SELECT 0 || ARRAY[1,2] || 3 AS "{0,1,2,3}";
 statement: SELECT * FROM array_op_test WHERE i @> '{32}' ORDER BY seqno;
 statement: SELECT * FROM array_op_test WHERE i && '{32}' ORDER BY seqno;
 statement: SELECT * FROM array_op_test WHERE i @> '{17}' ORDER BY seqno;
 statement: SELECT * FROM array_op_test WHERE i && '{17}' ORDER BY seqno;
 statement: SELECT * FROM array_op_test WHERE i @> '{32,17}' ORDER BY seqno;
 statement: SELECT * FROM array_op_test WHERE i && '{32,17}' ORDER BY seqno;
 statement: SELECT * FROM array_op_test WHERE i <@ '{38,34,32,89}' ORDER BY seqno;
 statement: SELECT * FROM array_op_test WHERE i = '{}' ORDER BY seqno;
 statement: SELECT * FROM array_op_test WHERE i @> '{}' ORDER BY seqno;
 statement: SELECT * FROM array_op_test WHERE i && '{}' ORDER BY seqno;
 statement: SELECT * FROM array_op_test WHERE i <@ '{}' ORDER BY seqno;
 statement: SELECT * FROM array_op_test WHERE i = '{NULL}' ORDER BY seqno;
 statement: SELECT * FROM array_op_test WHERE i @> '{NULL}' ORDER BY seqno;
 statement: SELECT * FROM array_op_test WHERE i && '{NULL}' ORDER BY seqno;
 statement: SELECT * FROM array_op_test WHERE i <@ '{NULL}' ORDER BY seqno;
 statement: SELECT * FROM array_op_test WHERE t @> '{AAAAAAAA72908}' ORDER BY seqno;
 statement: SELECT * FROM array_op_test WHERE t && '{AAAAAAAA72908}' ORDER BY seqno;
 statement: SELECT * FROM array_op_test WHERE t @> '{AAAAAAAAAA646}' ORDER BY seqno;
 statement: SELECT * FROM array_op_test WHERE t && '{AAAAAAAAAA646}' ORDER BY seqno;
 statement: SELECT * FROM array_op_test WHERE t @> '{AAAAAAAA72908,AAAAAAAAAA646}' ORDER BY seqno;
 statement: SELECT * FROM array_op_test WHERE t && '{AAAAAAAA72908,AAAAAAAAAA646}' ORDER BY seqno;
 statement: SELECT * FROM array_op_test WHERE t <@ '{AAAAAAAA72908,AAAAAAAAAAAAAAAAAAA17075,AA88409,AAAAAAAAAAAAAAAAAA36842,AAAAAAA48038,AAAAAAAAAAAAAA10611}' ORDER BY seqno;
 statement: SELECT * FROM array_op_test WHERE t = '{}' ORDER BY seqno;
 statement: SELECT * FROM array_op_test WHERE t @> '{}' ORDER BY seqno;
 statement: SELECT * FROM array_op_test WHERE t && '{}' ORDER BY seqno;
 statement: SELECT * FROM array_op_test WHERE t <@ '{}' ORDER BY seqno;
 statement: SELECT ARRAY[1,2,3]::text[]::int[]::float8[] AS "{1,2,3}";
 statement: SELECT ARRAY[1,2,3]::text[]::int[]::float8[] is of (float8[]) as "TRUE";
 statement: SELECT ARRAY[['a','bc'],['def','hijk']]::text[]::varchar[] AS "{{a,bc},{def,hijk}}";
 statement: SELECT ARRAY[['a','bc'],['def','hijk']]::text[]::varchar[] is of (varchar[]) as "TRUE";
 statement: SELECT CAST(ARRAY[[[[[['a','bb','ccc']]]]]] as text[]) as "{{{{{{a,bb,ccc}}}}}}";
 statement: select 33 = any ('{1,2,3}');
 statement: select 33 = any ('{1,2,33}');
 statement: select 33 = all ('{1,2,33}');
 statement: select 33 >= all ('{1,2,33}');
 statement: select null::int >= all ('{1,2,33}');
 statement: select null::int >= all ('{}');
 statement: select null::int >= any ('{}');
 statement: select 33.4 = any (array[1,2,3]);
 statement: select 33.4 > all (array[1,2,3]);
 statement: select 33 * any ('{1,2,3}');
 statement: select 33 * any (44);
 statement: select 33 = any (null::int[]);
 statement: select null::int = any ('{1,2,3}');
 statement: select 33 = any ('{1,null,3}');
 statement: select 33 = any ('{1,null,33}');
 statement: select 33 = all (null::int[]);
 statement: select null::int = all ('{1,2,3}');
 statement: select 33 = all ('{1,null,3}');
 statement: select 33 = all ('{33,null,33}');
 statement: create temp table arr_tbl (f1 int[] unique);
 statement: insert into arr_tbl values ('{1,2,3}');
 statement: insert into arr_tbl values ('{1,2}');
 statement: insert into arr_tbl values ('{1,2,3}');
 statement: insert into arr_tbl values ('{2,3,4}');
 statement: insert into arr_tbl values ('{1,5,3}');
 statement: insert into arr_tbl values ('{1,2,10}');
 statement: set enable_seqscan to off;
 statement: set enable_bitmapscan to off;
 statement: select * from arr_tbl where f1 > '{1,2,3}' and f1 <= '{1,5,3}';
 statement: select * from arr_tbl where f1 >= '{1,2,3}' and f1 < '{1,5,3}';
 statement: create temp table arr_pk_tbl (pk int4 primary key, f1 int[]);
 statement: insert into arr_pk_tbl values (1, '{1,2,3}');
 statement: insert into arr_pk_tbl values (1, '{3,4,5}') on conflict (pk)                                                                                                     +
   do update set f1[1] = excluded.f1[1], f1[3] = excluded.f1[3]                                                                                                               +
   returning pk, f1;
 statement: insert into arr_pk_tbl(pk, f1[1:2]) values (1, '{6,7,8}') on conflict (pk)                                                                                        +
   do update set f1[1] = excluded.f1[1],                                                                                                                                      +
     f1[2] = excluded.f1[2],                                                                                                                                                  +
     f1[3] = excluded.f1[3]                                                                                                                                                   +
   returning pk, f1;
 statement: reset enable_seqscan;
 statement: reset enable_bitmapscan;
 statement: select 'foo' like any (array['%a', '%o']);
 statement: select 'foo' like any (array['%a', '%b']);
 statement: select 'foo' like all (array['f%', '%o']);
 statement: select 'foo' like all (array['f%', '%b']);
 statement: select 'foo' not like any (array['%a', '%b']);
 statement: select 'foo' not like all (array['%a', '%o']);
 statement: select 'foo' ilike any (array['%A', '%O']);
 statement: select 'foo' ilike all (array['F%', '%O']);
 statement: select '{{1,{2}},{2,3}}'::text[];
 statement: select '{{},{}}'::text[];
 statement: select E'{{1,2},\\{2,3}}'::text[];
 statement: select '{{"1 2" x},{3}}'::text[];
 statement: select '{}}'::text[];
 statement: select '{ }}'::text[];
 statement: select array[];
 statement: select '{}'::text[];
 statement: select '{{{1,2,3,4},{2,3,4,5}},{{3,4,5,6},{4,5,6,7}}}'::text[];
 statement: select '{0 second  ,0 second}'::interval[];
 statement: select '{ { "," } , { 3 } }'::text[];
 statement: select '  {   {  "  0 second  "   ,  0 second  }   }'::text[];
 statement: select '{                                                                                                                                                         +
            0 second,                                                                                                                                                         +
            @ 1 hour @ 42 minutes @ 20 seconds                                                                                                                                +
          }'::interval[];
 statement: select array[]::text[];
 statement: select '[0:1]={1.1,2.2}'::float8[];
 statement: CREATE TEMP TABLE arraggtest ( f1 INT[], f2 TEXT[][], f3 FLOAT[]);
 statement: INSERT INTO arraggtest (f1, f2, f3) VALUES                                                                                                                        +
 ('{1,2,3,4}','{{grey,red},{blue,blue}}','{1.6, 0.0}');
 statement: INSERT INTO arraggtest (f1, f2, f3) VALUES                                                                                                                        +
 ('{1,2,3}','{{grey,red},{grey,blue}}','{1.6}');
 statement: SELECT max(f1), min(f1), max(f2), min(f2), max(f3), min(f3) FROM arraggtest;
 statement: INSERT INTO arraggtest (f1, f2, f3) VALUES                                                                                                                        +
 ('{3,3,2,4,5,6}','{{white,yellow},{pink,orange}}','{2.1,3.3,1.8,1.7,1.6}');
 statement: SELECT max(f1), min(f1), max(f2), min(f2), max(f3), min(f3) FROM arraggtest;
 statement: INSERT INTO arraggtest (f1, f2, f3) VALUES                                                                                                                        +
 ('{2}','{{black,red},{green,orange}}','{1.6,2.2,2.6,0.4}');
 statement: SELECT max(f1), min(f1), max(f2), min(f2), max(f3), min(f3) FROM arraggtest;
 statement: INSERT INTO arraggtest (f1, f2, f3) VALUES                                                                                                                        +
 ('{4,2,6,7,8,1}','{{red},{black},{purple},{blue},{blue}}',NULL);
 statement: SELECT max(f1), min(f1), max(f2), min(f2), max(f3), min(f3) FROM arraggtest;
 statement: INSERT INTO arraggtest (f1, f2, f3) VALUES                                                                                                                        +
 ('{}','{{pink,white,blue,red,grey,orange}}','{2.1,1.87,1.4,2.2}');
 statement: SELECT max(f1), min(f1), max(f2), min(f2), max(f3), min(f3) FROM arraggtest;
 statement: create type comptype as (f1 int, f2 text);
 statement: create table comptable (c1 comptype, c2 comptype[]);
 statement: insert into comptable                                                                                                                                             +
   values (row(1,'foo'), array[row(2,'bar')::comptype, row(3,'baz')::comptype]);
 statement: create type _comptype as enum('fooey');
 statement: select * from comptable;
 statement: select c2[2].f2 from comptable;
 statement: drop type _comptype;
 statement: drop table comptable;
 statement: drop type comptype;
 statement: create or replace function unnest1(anyarray)                                                                                                                      +
 returns setof anyelement as $$                                                                                                                                               +
 select $1[s] from generate_subscripts($1,1) g(s);                                                                                                                            +
 $$ language sql immutable;
 statement: create or replace function unnest2(anyarray)                                                                                                                      +
 returns setof anyelement as $$                                                                                                                                               +
 select $1[s1][s2] from generate_subscripts($1,1) g1(s1),                                                                                                                     +
                    generate_subscripts($1,2) g2(s2);                                                                                                                         +
 $$ language sql immutable;
 statement: select * from unnest1(array[1,2,3]);
 statement: select * from unnest2(array[[1,2,3],[4,5,6]]);
 statement: drop function unnest1(anyarray);
 statement: drop function unnest2(anyarray);
 statement: select array_fill(null::integer, array[3,3],array[2,2]);
 statement: select array_fill(null::integer, array[3,3]);
 statement: select array_fill(null::text, array[3,3],array[2,2]);
 statement: select array_fill(null::text, array[3,3]);
 statement: select array_fill(7, array[3,3],array[2,2]);
 statement: select array_fill(7, array[3,3]);
 statement: select array_fill('juhu'::text, array[3,3],array[2,2]);
 statement: select array_fill('juhu'::text, array[3,3]);
 statement: select a, a = '{}' as is_eq, array_dims(a)                                                                                                                        +
   from (select array_fill(42, array[0]) as a) ss;
 statement: select a, a = '{}' as is_eq, array_dims(a)                                                                                                                        +
   from (select array_fill(42, '{}') as a) ss;
 statement: select a, a = '{}' as is_eq, array_dims(a)                                                                                                                        +
   from (select array_fill(42, '{}', '{}') as a) ss;
 statement: select array_fill(1, null, array[2,2]);
 statement: select array_fill(1, array[2,2], null);
 statement: select array_fill(1, array[2,2], '{}');
 statement: select array_fill(1, array[3,3], array[1,1,1]);
 statement: select array_fill(1, array[1,2,null]);
 statement: select array_fill(1, array[[1,2],[3,4]]);
 statement: select string_to_array('1|2|3', '|');
 statement: select string_to_array('1|2|3|', '|');
 statement: select string_to_array('1||2|3||', '||');
 statement: select string_to_array('1|2|3', '');
 statement: select string_to_array('', '|');
 statement: select string_to_array('1|2|3', NULL);
 statement: select string_to_array(NULL, '|') IS NULL;
 statement: select string_to_array('abc', '');
 statement: select string_to_array('abc', '', 'abc');
 statement: select string_to_array('abc', ',');
 statement: select string_to_array('abc', ',', 'abc');
 statement: select string_to_array('1,2,3,4,,6', ',');
 statement: select string_to_array('1,2,3,4,,6', ',', '');
 statement: select string_to_array('1,2,3,4,*,6', ',', '*');
 statement: select array_to_string(NULL::int4[], ',') IS NULL;
 statement: select array_to_string('{}'::int4[], ',');
 statement: select array_to_string(array[1,2,3,4,NULL,6], ',');
 statement: select array_to_string(array[1,2,3,4,NULL,6], ',', '*');
 statement: select array_to_string(array[1,2,3,4,NULL,6], NULL);
 statement: select array_to_string(array[1,2,3,4,NULL,6], ',', NULL);
 statement: select array_to_string(string_to_array('1|2|3', '|'), '|');
 statement: select array_length(array[1,2,3], 1);
 statement: select array_length(array[[1,2,3], [4,5,6]], 0);
 statement: select array_length(array[[1,2,3], [4,5,6]], 1);
 statement: select array_length(array[[1,2,3], [4,5,6]], 2);
 statement: select array_length(array[[1,2,3], [4,5,6]], 3);
 statement: select cardinality(NULL::int[]);
 statement: select cardinality('{}'::int[]);
 statement: select cardinality(array[1,2,3]);
 statement: select cardinality('[2:4]={5,6,7}'::int[]);
 statement: select cardinality('{{1,2}}'::int[]);
 statement: select cardinality('{{1,2},{3,4},{5,6}}'::int[]);
 statement: select cardinality('{{{1,9},{5,6}},{{2,3},{3,4}}}'::int[]);
 statement: select array_agg(unique1) from (select unique1 from tenk1 where unique1 < 15 order by unique1) ss;
 statement: select array_agg(ten) from (select ten from tenk1 where unique1 < 15 order by unique1) ss;
 statement: select array_agg(nullif(ten, 4)) from (select ten from tenk1 where unique1 < 15 order by unique1) ss;
 statement: select array_agg(unique1) from tenk1 where unique1 < -15;
 statement: select array_agg(ar)                                                                                                                                              +
   from (values ('{1,2}'::int[]), ('{3,4}'::int[])) v(ar);
 statement: select array_agg(distinct ar order by ar desc)                                                                                                                    +
   from (select array[i / 2] from generate_series(1,10) a(i)) b(ar);
 statement: select array_agg(ar)                                                                                                                                              +
   from (select array_agg(array[i, i+1, i-1])                                                                                                                                 +
         from generate_series(1,2) a(i)) b(ar);
 statement: select array_agg(array[i+1.2, i+1.3, i+1.4]) from generate_series(1,3) g(i);
 statement: select array_agg(array['Hello', i::text]) from generate_series(9,11) g(i);
 statement: select array_agg(array[i, nullif(i, 3), i+1]) from generate_series(1,4) g(i);
 statement: select array_agg('{}'::int[]) from generate_series(1,2);
 statement: select array_agg(null::int[]) from generate_series(1,2);
 statement: select array_agg(ar)                                                                                                                                              +
   from (values ('{1,2}'::int[]), ('{3}'::int[])) v(ar);
 statement: select unnest(array[1,2,3]);
 statement: select * from unnest(array[1,2,3]);
 statement: select unnest(array[1,2,3,4.5]::float8[]);
 statement: select unnest(array[1,2,3,4.5]::numeric[]);
 statement: select unnest(array[1,2,3,null,4,null,null,5,6]);
 statement: select unnest(array[1,2,3,null,4,null,null,5,6]::text[]);
 statement: select abs(unnest(array[1,2,null,-3]));
 statement: select array_remove(array[1,2,2,3], 2);
 statement: select array_remove(array[1,2,2,3], 5);
 statement: select array_remove(array[1,NULL,NULL,3], NULL);
 statement: select array_remove(array['A','CC','D','C','RR'], 'RR');
 statement: select array_remove('{{1,2,2},{1,4,3}}', 2);
 statement: select array_remove(array['X','X','X'], 'X') = '{}';
 statement: select array_replace(array[1,2,5,4],5,3);
 statement: select array_replace(array[1,2,5,4],5,NULL);
 statement: select array_replace(array[1,2,NULL,4,NULL],NULL,5);
 statement: select array_replace(array['A','B','DD','B'],'B','CC');
 statement: select array_replace(array[1,NULL,3],NULL,NULL);
 statement: select array_replace(array['AB',NULL,'CDE'],NULL,'12');
 statement: select array(select array[i,i/2] from generate_series(1,5) i);
 statement: select array(select array['Hello', i::text] from generate_series(9,11) i);
 statement: create temp table t1 (f1 int8_tbl[]);
 statement: insert into t1 (f1[5].q1) values(42);
 statement: select * from t1;
 statement: update t1 set f1[5].q2 = 43;
 statement: select * from t1;
 statement: create temp table src (f1 text);
 statement: insert into src                                                                                                                                                   +
   select string_agg(random()::text,'') from generate_series(1,10000);
 statement: create type textandtext as (c1 text, c2 text);
 statement: create temp table dest (f1 textandtext[]);
 statement: insert into dest select array[row(f1,f1)::textandtext] from src;
 statement: select length(md5((f1[1]).c2)) from dest;
 statement: delete from src;
 statement: select length(md5((f1[1]).c2)) from dest;
 statement: truncate table src;
 statement: drop table src;
 statement: select length(md5((f1[1]).c2)) from dest;
 statement: drop table dest;
 statement: drop type textandtext;
 statement: SELECT                                                                                                                                                            +
     op,                                                                                                                                                                      +
     width_bucket(op::numeric, ARRAY[1, 3, 5, 10.0]::numeric[]) AS wb_n1,                                                                                                     +
     width_bucket(op::numeric, ARRAY[0, 5.5, 9.99]::numeric[]) AS wb_n2,                                                                                                      +
     width_bucket(op::numeric, ARRAY[-6, -5, 2.0]::numeric[]) AS wb_n3,                                                                                                       +
     width_bucket(op::float8, ARRAY[1, 3, 5, 10.0]::float8[]) AS wb_f1,                                                                                                       +
     width_bucket(op::float8, ARRAY[0, 5.5, 9.99]::float8[]) AS wb_f2,                                                                                                        +
     width_bucket(op::float8, ARRAY[-6, -5, 2.0]::float8[]) AS wb_f3                                                                                                          +
 FROM (VALUES                                                                                                                                                                 +
   (-5.2),                                                                                                                                                                    +
   (-0.0000000001),                                                                                                                                                           +
   (0.000000000001),                                                                                                                                                          +
   (1),                                                                                                                                                                       +
   (1.99999999999999),                                                                                                                                                        +
   (2),                                                                                                                                                                       +
   (2.00000000000001),                                                                                                                                                        +
   (3),                                                                                                                                                                       +
   (4),                                                                                                                                                                       +
   (4.5),                                                                                                                                                                     +
   (5),                                                                                                                                                                       +
   (5.5),                                                                                                                                                                     +
   (6),                                                                                                                                                                       +
   (7),                                                                                                                                                                       +
   (8),                                                                                                                                                                       +
   (9),                                                                                                                                                                       +
   (9.99999999999999),                                                                                                                                                        +
   (10),                                                                                                                                                                      +
   (10.0000000000001)                                                                                                                                                         +
 ) v(op);
 statement: SELECT                                                                                                                                                            +
     op,                                                                                                                                                                      +
     width_bucket(op, ARRAY[1, 3, 9, 'NaN', 'NaN']::float8[]) AS wb                                                                                                           +
 FROM (VALUES                                                                                                                                                                 +
   (-5.2::float8),                                                                                                                                                            +
   (4::float8),                                                                                                                                                               +
   (77::float8),                                                                                                                                                              +
   ('NaN'::float8)                                                                                                                                                            +
 ) v(op);
 statement: SELECT                                                                                                                                                            +
     op,                                                                                                                                                                      +
     width_bucket(op, ARRAY[1, 3, 5, 10]) AS wb_1                                                                                                                             +
 FROM generate_series(0,11) as op;
 statement: SELECT width_bucket(now(),                                                                                                                                        +
                     array['yesterday', 'today', 'tomorrow']::timestamptz[]);
 statement: SELECT width_bucket(5, ARRAY[3]);
 statement: SELECT width_bucket(5, '{}');
 statement: SELECT width_bucket('5'::text, ARRAY[3, 4]::integer[]);
 statement: SELECT width_bucket(5, ARRAY[3, 4, NULL]);
 statement: SELECT width_bucket(5, ARRAY[ARRAY[1, 2], ARRAY[3, 4]]);

