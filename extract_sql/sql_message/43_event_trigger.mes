LOG:  statement: select message from postgres_log where query is null;
 statement: create event trigger regress_event_trigger                                               +
    on ddl_command_start                                                                             +
    execute procedure pg_backend_pid();
 statement: create function test_event_trigger() returns event_trigger as $$                         +
 BEGIN                                                                                               +
     RAISE NOTICE 'test_event_trigger: % %', tg_event, tg_tag;                                       +
 END                                                                                                 +
 $$ language plpgsql;
 statement: create function test_event_trigger_arg(name text)                                        +
 returns event_trigger as $$ BEGIN RETURN 1; END $$ language plpgsql;
 statement: create function test_event_trigger_sql() returns event_trigger as $$                     +
 SELECT 1 $$ language sql;
 statement: create event trigger regress_event_trigger on elephant_bootstrap                         +
    execute procedure test_event_trigger();
 statement: create event trigger regress_event_trigger on ddl_command_start                          +
    execute procedure test_event_trigger();
 statement: create event trigger regress_event_trigger_end on ddl_command_end                        +
    execute procedure test_event_trigger();
 statement: create event trigger regress_event_trigger2 on ddl_command_start                         +
    when food in ('sandwhich')                                                                       +
    execute procedure test_event_trigger();
 statement: create event trigger regress_event_trigger2 on ddl_command_start                         +
    when tag in ('sandwhich')                                                                        +
    execute procedure test_event_trigger();
 statement: create event trigger regress_event_trigger2 on ddl_command_start                         +
    when tag in ('create table', 'create skunkcabbage')                                              +
    execute procedure test_event_trigger();
 statement: create event trigger regress_event_trigger2 on ddl_command_start                         +
    when tag in ('DROP EVENT TRIGGER')                                                               +
    execute procedure test_event_trigger();
 statement: create event trigger regress_event_trigger2 on ddl_command_start                         +
    when tag in ('CREATE ROLE')                                                                      +
    execute procedure test_event_trigger();
 statement: create event trigger regress_event_trigger2 on ddl_command_start                         +
    when tag in ('CREATE DATABASE')                                                                  +
    execute procedure test_event_trigger();
 statement: create event trigger regress_event_trigger2 on ddl_command_start                         +
    when tag in ('CREATE TABLESPACE')                                                                +
    execute procedure test_event_trigger();
 statement: create event trigger regress_event_trigger2 on ddl_command_start                         +
    when tag in ('create table') and tag in ('CREATE FUNCTION')                                      +
    execute procedure test_event_trigger();
 statement: create event trigger regress_event_trigger2 on ddl_command_start                         +
    when tag in ('create table', 'CREATE FUNCTION')                                                  +
    execute procedure test_event_trigger();
 statement: comment on event trigger regress_event_trigger is 'test comment';
 statement: comment on event trigger wrong.regress_event_trigger is 'test comment';
 statement: create role regression_bob;
 statement: set role regression_bob;
 statement: create event trigger regress_event_trigger_noperms on ddl_command_start                  +
    execute procedure test_event_trigger();
 statement: reset role;
 statement: alter event trigger regress_event_trigger enable replica;
 statement: alter event trigger regress_event_trigger enable always;
 statement: alter event trigger regress_event_trigger enable;
 statement: alter event trigger regress_event_trigger disable;
 statement: create table event_trigger_fire1 (a int);
 statement: grant all on table event_trigger_fire1 to public;
 statement: comment on table event_trigger_fire1 is 'here is a comment';
 statement: revoke all on table event_trigger_fire1 from public;
 statement: drop table event_trigger_fire1;
 statement: create foreign data wrapper useless;
 statement: create server useless_server foreign data wrapper useless;
 statement: create user mapping for regression_bob server useless_server;
 statement: alter default privileges for role regression_bob                                         +
  revoke delete on tables from regression_bob;
 statement: alter event trigger regress_event_trigger owner to regression_bob;
 statement: alter role regression_bob superuser;
 statement: alter event trigger regress_event_trigger owner to regression_bob;
 statement: alter event trigger regress_event_trigger rename to regress_event_trigger2;
 statement: alter event trigger regress_event_trigger rename to regress_event_trigger3;
 statement: drop event trigger regress_event_trigger;
 statement: drop role regression_bob;
 statement: drop event trigger if exists regress_event_trigger2;
 statement: drop event trigger if exists regress_event_trigger2;
 statement: drop event trigger regress_event_trigger3;
 statement: drop event trigger regress_event_trigger_end;
 statement: CREATE SCHEMA schema_one authorization regression_bob;
 statement: CREATE SCHEMA schema_two authorization regression_bob;
 statement: CREATE SCHEMA audit_tbls authorization regression_bob;
 statement: CREATE TEMP TABLE a_temp_tbl ();
 statement: SET SESSION AUTHORIZATION regression_bob;
 statement: CREATE TABLE schema_one.table_one(a int);
 statement: CREATE TABLE schema_one."table two"(a int);
 statement: CREATE TABLE schema_one.table_three(a int);
 statement: CREATE TABLE audit_tbls.schema_one_table_two(the_value text);
 statement: CREATE TABLE schema_two.table_two(a int);
 statement: CREATE TABLE schema_two.table_three(a int, b text);
 statement: CREATE TABLE audit_tbls.schema_two_table_three(the_value text);
 statement: CREATE OR REPLACE FUNCTION schema_two.add(int, int) RETURNS int LANGUAGE plpgsql         +
   CALLED ON NULL INPUT                                                                              +
   AS $$ BEGIN RETURN coalesce($1,0) + coalesce($2,0); END; $$;
 statement: CREATE AGGREGATE schema_two.newton                                                       +
   (BASETYPE = int, SFUNC = schema_two.add, STYPE = int);
 statement: RESET SESSION AUTHORIZATION;
 statement: CREATE TABLE undroppable_objs (                                                          +
         object_type text,                                                                           +
         object_identity text                                                                        +
 );
 statement: INSERT INTO undroppable_objs VALUES                                                      +
 ('table', 'schema_one.table_three'),                                                                +
 ('table', 'audit_tbls.schema_two_table_three');
 statement: CREATE TABLE dropped_objects (                                                           +
         type text,                                                                                  +
         schema text,                                                                                +
         object text                                                                                 +
 );
 statement: CREATE OR REPLACE FUNCTION undroppable() RETURNS event_trigger                           +
 LANGUAGE plpgsql AS $$                                                                              +
 DECLARE                                                                                             +
         obj record;                                                                                 +
 BEGIN                                                                                               +
         PERFORM 1 FROM pg_tables WHERE tablename = 'undroppable_objs';                              +
         IF NOT FOUND THEN                                                                           +
                 RAISE NOTICE 'table undroppable_objs not found, skipping';                          +
                 RETURN;                                                                             +
         END IF;                                                                                     +
         FOR obj IN                                                                                  +
                 SELECT * FROM pg_event_trigger_dropped_objects() JOIN                               +
                         undroppable_objs USING (object_type, object_identity)                       +
         LOOP                                                                                        +
                 RAISE EXCEPTION 'object % of type % cannot be dropped',                             +
                         obj.object_identity, obj.object_type;                                       +
         END LOOP;                                                                                   +
 END;                                                                                                +
 $$;
 statement: CREATE EVENT TRIGGER undroppable ON sql_drop                                             +
         EXECUTE PROCEDURE undroppable();
 statement: CREATE OR REPLACE FUNCTION test_evtrig_dropped_objects() RETURNS event_trigger           +
 LANGUAGE plpgsql AS $$                                                                              +
 DECLARE                                                                                             +
     obj record;                                                                                     +
 BEGIN                                                                                               +
     FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()                                     +
     LOOP                                                                                            +
         IF obj.object_type = 'table' THEN                                                           +
                 EXECUTE format('DROP TABLE IF EXISTS audit_tbls.%I',                                +
                                         format('%s_%s', obj.schema_name, obj.object_name));         +
         END IF;                                                                                     +
                                                                                                     +
         INSERT INTO dropped_objects                                                                 +
                 (type, schema, object) VALUES                                                       +
                 (obj.object_type, obj.schema_name, obj.object_identity);                            +
     END LOOP;                                                                                       +
 END                                                                                                 +
 $$;
 statement: CREATE EVENT TRIGGER regress_event_trigger_drop_objects ON sql_drop                      +
         WHEN TAG IN ('drop table', 'drop function', 'drop view',                                    +
                 'drop owned', 'drop schema', 'alter table')                                         +
         EXECUTE PROCEDURE test_evtrig_dropped_objects();
 statement: ALTER TABLE schema_one.table_one DROP COLUMN a;
 statement: DROP SCHEMA schema_one, schema_two CASCADE;
 statement: DELETE FROM undroppable_objs WHERE object_identity = 'audit_tbls.schema_two_table_three';
 statement: DROP SCHEMA schema_one, schema_two CASCADE;
 statement: DELETE FROM undroppable_objs WHERE object_identity = 'schema_one.table_three';
 statement: DROP SCHEMA schema_one, schema_two CASCADE;
 statement: SELECT * FROM dropped_objects WHERE schema IS NULL OR schema <> 'pg_toast';
 statement: DROP OWNED BY regression_bob;
 statement: SELECT * FROM dropped_objects WHERE type = 'schema';
 statement: DROP ROLE regression_bob;
 statement: DROP EVENT TRIGGER regress_event_trigger_drop_objects;
 statement: DROP EVENT TRIGGER undroppable;
 statement: CREATE OR REPLACE FUNCTION event_trigger_report_dropped()                                +
  RETURNS event_trigger                                                                              +
  LANGUAGE plpgsql                                                                                   +
 AS $$                                                                                               +
 DECLARE r record;                                                                                   +
 BEGIN                                                                                               +
     FOR r IN SELECT * from pg_event_trigger_dropped_objects()                                       +
     LOOP                                                                                            +
     IF NOT r.normal AND NOT r.original THEN                                                         +
         CONTINUE;                                                                                   +
     END IF;                                                                                         +
     RAISE NOTICE 'NORMAL: orig=% normal=% istemp=% type=% identity=% name=% args=%',                +
         r.original, r.normal, r.is_temporary, r.object_type,                                        +
         r.object_identity, r.address_names, r.address_args;                                         +
     END LOOP;                                                                                       +
 END; $$;
 statement: CREATE EVENT TRIGGER regress_event_trigger_report_dropped ON sql_drop                    +
     EXECUTE PROCEDURE event_trigger_report_dropped();
 statement: CREATE SCHEMA evttrig                                                                    +
         CREATE TABLE one (col_a SERIAL PRIMARY KEY, col_b text DEFAULT 'forty two')                 +
         CREATE INDEX one_idx ON one (col_b)                                                         +
         CREATE TABLE two (col_c INTEGER CHECK (col_c > 0) REFERENCES one DEFAULT 42);
 statement: ALTER TABLE evttrig.two DROP COLUMN col_c;
 statement: ALTER TABLE evttrig.one ALTER COLUMN col_b DROP DEFAULT;
 statement: ALTER TABLE evttrig.one DROP CONSTRAINT one_pkey;
 statement: DROP INDEX evttrig.one_idx;
 statement: DROP SCHEMA evttrig CASCADE;
 statement: DROP TABLE a_temp_tbl;
 statement: DROP EVENT TRIGGER regress_event_trigger_report_dropped;
 statement: select pg_event_trigger_table_rewrite_oid();
 statement: CREATE OR REPLACE FUNCTION test_evtrig_no_rewrite() RETURNS event_trigger                +
 LANGUAGE plpgsql AS $$                                                                              +
 BEGIN                                                                                               +
   RAISE EXCEPTION 'I''m sorry Sir, No Rewrite Allowed.';                                            +
 END;                                                                                                +
 $$;
 statement: create event trigger no_rewrite_allowed on table_rewrite                                 +
   execute procedure test_evtrig_no_rewrite();
 statement: create table rewriteme (id serial primary key, foo float);
 statement: insert into rewriteme                                                                    +
      select x * 1.001 from generate_series(1, 500) as t(x);
 statement: alter table rewriteme alter column foo type numeric;
 statement: alter table rewriteme add column baz int default 0;
 statement: CREATE OR REPLACE FUNCTION test_evtrig_no_rewrite() RETURNS event_trigger                +
 LANGUAGE plpgsql AS $$                                                                              +
 BEGIN                                                                                               +
   RAISE NOTICE 'Table ''%'' is being rewritten (reason = %)',                                       +
                pg_event_trigger_table_rewrite_oid()::regclass,                                      +
                pg_event_trigger_table_rewrite_reason();                                             +
 END;                                                                                                +
 $$;
 statement: alter table rewriteme                                                                    +
  add column onemore int default 0,                                                                  +
  add column another int default -1,                                                                 +
  alter column foo type numeric(10,4);
 statement: alter table rewriteme alter column foo type numeric(12,4);
 statement: CREATE OR REPLACE FUNCTION test_evtrig_no_rewrite() RETURNS event_trigger                +
 LANGUAGE plpgsql AS $$                                                                              +
 BEGIN                                                                                               +
   RAISE NOTICE 'Table is being rewritten (reason = %)',                                             +
                pg_event_trigger_table_rewrite_reason();                                             +
 END;                                                                                                +
 $$;
 statement: create type rewritetype as (a int);
 statement: create table rewritemetoo1 of rewritetype;
 statement: create table rewritemetoo2 of rewritetype;
 statement: alter type rewritetype alter attribute a type text cascade;
 statement: create table rewritemetoo3 (a rewritetype);
 statement: alter type rewritetype alter attribute a type varchar cascade;
 statement: drop table rewriteme;
 statement: drop event trigger no_rewrite_allowed;
 statement: drop function test_evtrig_no_rewrite();
 statement: RESET SESSION AUTHORIZATION;
 statement: CREATE TABLE event_trigger_test (a integer, b text);
 statement: CREATE OR REPLACE FUNCTION start_command()                                               +
 RETURNS event_trigger AS $$                                                                         +
 BEGIN                                                                                               +
 RAISE NOTICE '% - ddl_command_start', tg_tag;                                                       +
 END;                                                                                                +
 $$ LANGUAGE plpgsql;
 statement: CREATE OR REPLACE FUNCTION end_command()                                                 +
 RETURNS event_trigger AS $$                                                                         +
 BEGIN                                                                                               +
 RAISE NOTICE '% - ddl_command_end', tg_tag;                                                         +
 END;                                                                                                +
 $$ LANGUAGE plpgsql;
 statement: CREATE OR REPLACE FUNCTION drop_sql_command()                                            +
 RETURNS event_trigger AS $$                                                                         +
 BEGIN                                                                                               +
 RAISE NOTICE '% - sql_drop', tg_tag;                                                                +
 END;                                                                                                +
 $$ LANGUAGE plpgsql;
 statement: CREATE EVENT TRIGGER start_rls_command ON ddl_command_start                              +
     WHEN TAG IN ('CREATE POLICY', 'ALTER POLICY', 'DROP POLICY') EXECUTE PROCEDURE start_command();
 statement: CREATE EVENT TRIGGER end_rls_command ON ddl_command_end                                  +
     WHEN TAG IN ('CREATE POLICY', 'ALTER POLICY', 'DROP POLICY') EXECUTE PROCEDURE end_command();
 statement: CREATE EVENT TRIGGER sql_drop_command ON sql_drop                                        +
     WHEN TAG IN ('DROP POLICY') EXECUTE PROCEDURE drop_sql_command();
 statement: CREATE POLICY p1 ON event_trigger_test USING (FALSE);
 statement: ALTER POLICY p1 ON event_trigger_test USING (TRUE);
 statement: ALTER POLICY p1 ON event_trigger_test RENAME TO p2;
 statement: DROP POLICY p2 ON event_trigger_test;
 statement: DROP EVENT TRIGGER start_rls_command;
 statement: DROP EVENT TRIGGER end_rls_command;
 statement: DROP EVENT TRIGGER sql_drop_command;

